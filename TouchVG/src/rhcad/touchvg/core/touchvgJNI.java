/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package rhcad.touchvg.core;

public class touchvgJNI {
  public final static native float _MGZERO_get();
  public final static native float _M_E_get();
  public final static native float _M_LOG2E_get();
  public final static native float _M_LOG10E_get();
  public final static native float _M_LN2_get();
  public final static native float _M_LN10_get();
  public final static native float _M_PI_get();
  public final static native float _M_PI_2_get();
  public final static native float _M_PI_4_get();
  public final static native float _M_1_PI_get();
  public final static native float _M_2_PI_get();
  public final static native float _M_2_SQRTPI_get();
  public final static native float _M_SQRT2_get();
  public final static native float _M_SQRT1_2_get();
  public final static native float _M_2PI_get();
  public final static native float _M_PI_3_get();
  public final static native float _M_PI_6_get();
  public final static native float _M_D2R_get();
  public final static native float _M_R2D_get();
  public final static native float _M_1_SQRPI_get();
  public final static native float _FLT_MIN_get();
  public final static native float _FLT_MAX_get();
  public final static native long Tol_gTol();
  public final static native long Tol_minTol();
  public final static native long new_Tol__SWIG_0();
  public final static native long new_Tol__SWIG_1(float jarg1, float jarg2);
  public final static native long new_Tol__SWIG_2(float jarg1);
  public final static native float Tol_equalPoint(long jarg1, Tol jarg1_);
  public final static native float Tol_equalVector(long jarg1, Tol jarg1_);
  public final static native void Tol_setEqualPoint(long jarg1, Tol jarg1_, float jarg2);
  public final static native void Tol_setEqualVector(long jarg1, Tol jarg1_, float jarg2);
  public final static native void delete_Tol(long jarg1);
  public final static native void Vector2d_x_set(long jarg1, Vector2d jarg1_, float jarg2);
  public final static native float Vector2d_x_get(long jarg1, Vector2d jarg1_);
  public final static native void Vector2d_y_set(long jarg1, Vector2d jarg1_, float jarg2);
  public final static native float Vector2d_y_get(long jarg1, Vector2d jarg1_);
  public final static native long Vector2d_kIdentity();
  public final static native long Vector2d_kXAxis();
  public final static native long Vector2d_kYAxis();
  public final static native long new_Vector2d__SWIG_0();
  public final static native long new_Vector2d__SWIG_1(float jarg1, float jarg2);
  public final static native long new_Vector2d__SWIG_2(long jarg1, Vector2d jarg1_);
  public final static native long Vector2d_transform(long jarg1, Vector2d jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native long Vector2d_add(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Vector2d_subtract(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Vector2d_negate(long jarg1, Vector2d jarg1_);
  public final static native long Vector2d_perpVector(long jarg1, Vector2d jarg1_);
  public final static native long Vector2d_scaleBy__SWIG_0(long jarg1, Vector2d jarg1_, float jarg2, float jarg3);
  public final static native long Vector2d_scaleBy__SWIG_1(long jarg1, Vector2d jarg1_, float jarg2);
  public final static native float Vector2d_dotProduct(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native float Vector2d_crossProduct(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native float Vector2d_angle(long jarg1, Vector2d jarg1_);
  public final static native float Vector2d_angle2(long jarg1, Vector2d jarg1_);
  public final static native float Vector2d_angleTo(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native float Vector2d_angleTo2(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native float Vector2d_length(long jarg1, Vector2d jarg1_);
  public final static native float Vector2d_lengthSquare(long jarg1, Vector2d jarg1_);
  public final static native long Vector2d_unitVector(long jarg1, Vector2d jarg1_);
  public final static native boolean Vector2d_normalize__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Tol jarg2_);
  public final static native boolean Vector2d_normalize__SWIG_1(long jarg1, Vector2d jarg1_);
  public final static native boolean Vector2d_isUnitVector__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Tol jarg2_);
  public final static native boolean Vector2d_isUnitVector__SWIG_1(long jarg1, Vector2d jarg1_);
  public final static native boolean Vector2d_isZeroVector__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Tol jarg2_);
  public final static native boolean Vector2d_isZeroVector__SWIG_1(long jarg1, Vector2d jarg1_);
  public final static native boolean Vector2d_isDegenerate(long jarg1, Vector2d jarg1_);
  public final static native boolean Vector2d_isEqualTo__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Vector2d_isEqualTo__SWIG_1(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Vector2d_set__SWIG_0(long jarg1, Vector2d jarg1_, float jarg2, float jarg3);
  public final static native long Vector2d_set__SWIG_1(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Vector2d_setAngleLength(long jarg1, Vector2d jarg1_, float jarg2, float jarg3);
  public final static native long Vector2d_angledVector(float jarg1, float jarg2);
  public final static native long Vector2d_setLength(long jarg1, Vector2d jarg1_, float jarg2);
  public final static native long Vector2d_scaledVector(long jarg1, Vector2d jarg1_, float jarg2);
  public final static native boolean Vector2d_isRightOf(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native boolean Vector2d_isLeftOf(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native boolean Vector2d_isParallelTo__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Vector2d_isParallelTo__SWIG_1(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native boolean Vector2d_isCodirectionalTo__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Vector2d_isCodirectionalTo__SWIG_1(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native boolean Vector2d_isOppositeTo__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Vector2d_isOppositeTo__SWIG_1(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native boolean Vector2d_isPerpendicularTo__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Vector2d_isPerpendicularTo__SWIG_1(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native float Vector2d_distanceToVector(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native float Vector2d_projectScaleToVector(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native float Vector2d_projectResolveVector(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Vector2d jarg3_, long jarg4, Vector2d jarg4_);
  public final static native boolean Vector2d_resolveVector__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Vector2d jarg3_, long jarg4, Vector2d jarg4_);
  public final static native boolean Vector2d_resolveVector__SWIG_1(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Vector2d jarg3_);
  public final static native void delete_Vector2d(long jarg1);
  public final static native void Point2d_x_set(long jarg1, Point2d jarg1_, float jarg2);
  public final static native float Point2d_x_get(long jarg1, Point2d jarg1_);
  public final static native void Point2d_y_set(long jarg1, Point2d jarg1_, float jarg2);
  public final static native float Point2d_y_get(long jarg1, Point2d jarg1_);
  public final static native long Point2d_kInvalid();
  public final static native long Point2d_kOrigin();
  public final static native long new_Point2d__SWIG_0();
  public final static native long new_Point2d__SWIG_1(float jarg1, float jarg2);
  public final static native long new_Point2d__SWIG_2(long jarg1, Point2d jarg1_);
  public final static native long Point2d_transform(long jarg1, Point2d jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native long Point2d_scaleBy__SWIG_0(long jarg1, Point2d jarg1_, float jarg2, float jarg3);
  public final static native long Point2d_scaleBy__SWIG_1(long jarg1, Point2d jarg1_, float jarg2);
  public final static native void Point2d_offset__SWIG_0(long jarg1, Point2d jarg1_, float jarg2, float jarg3);
  public final static native void Point2d_offset__SWIG_1(long jarg1, Point2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Point2d_add(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native long Point2d_subtract__SWIG_0(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native long Point2d_subtract__SWIG_1(long jarg1, Point2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Point2d_negate(long jarg1, Point2d jarg1_);
  public final static native long Point2d_asVector(long jarg1, Point2d jarg1_);
  public final static native float Point2d_length(long jarg1, Point2d jarg1_);
  public final static native float Point2d_distanceTo(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native float Point2d_distanceSquare(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native boolean Point2d_isEqualTo__SWIG_0(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Point2d_isEqualTo__SWIG_1(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native boolean Point2d_isDegenerate(long jarg1, Point2d jarg1_);
  public final static native long Point2d_set__SWIG_0(long jarg1, Point2d jarg1_, float jarg2, float jarg3);
  public final static native long Point2d_set__SWIG_1(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native long Point2d_polarPoint(long jarg1, Point2d jarg1_, float jarg2, float jarg3);
  public final static native long Point2d_rulerPoint__SWIG_0(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, float jarg3);
  public final static native long Point2d_rulerPoint__SWIG_1(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, float jarg3, float jarg4);
  public final static native void delete_Point2d(long jarg1);
  public final static native void Matrix2d_m11_set(long jarg1, Matrix2d jarg1_, float jarg2);
  public final static native float Matrix2d_m11_get(long jarg1, Matrix2d jarg1_);
  public final static native void Matrix2d_m12_set(long jarg1, Matrix2d jarg1_, float jarg2);
  public final static native float Matrix2d_m12_get(long jarg1, Matrix2d jarg1_);
  public final static native void Matrix2d_m21_set(long jarg1, Matrix2d jarg1_, float jarg2);
  public final static native float Matrix2d_m21_get(long jarg1, Matrix2d jarg1_);
  public final static native void Matrix2d_m22_set(long jarg1, Matrix2d jarg1_, float jarg2);
  public final static native float Matrix2d_m22_get(long jarg1, Matrix2d jarg1_);
  public final static native void Matrix2d_dx_set(long jarg1, Matrix2d jarg1_, float jarg2);
  public final static native float Matrix2d_dx_get(long jarg1, Matrix2d jarg1_);
  public final static native void Matrix2d_dy_set(long jarg1, Matrix2d jarg1_, float jarg2);
  public final static native float Matrix2d_dy_get(long jarg1, Matrix2d jarg1_);
  public final static native long Matrix2d_kIdentity();
  public final static native long new_Matrix2d__SWIG_0();
  public final static native long new_Matrix2d__SWIG_1(long jarg1, Matrix2d jarg1_);
  public final static native long new_Matrix2d__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6);
  public final static native long new_Matrix2d__SWIG_3(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native long Matrix2d_scaleBy__SWIG_0(long jarg1, Matrix2d jarg1_, float jarg2, float jarg3);
  public final static native long Matrix2d_scaleBy__SWIG_1(long jarg1, Matrix2d jarg1_, float jarg2);
  public final static native long Matrix2d_preMultBy(long jarg1, Matrix2d jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native long Matrix2d_postMultBy(long jarg1, Matrix2d jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native long Matrix2d_setToProduct(long jarg1, Matrix2d jarg1_, long jarg2, Matrix2d jarg2_, long jarg3, Matrix2d jarg3_);
  public final static native void Matrix2d_transformPoints(long jarg1, Matrix2d jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native void Matrix2d_transformVectors(long jarg1, Matrix2d jarg1_, int jarg2, long jarg3, Vector2d jarg3_);
  public final static native float Matrix2d_det(long jarg1, Matrix2d jarg1_);
  public final static native boolean Matrix2d_invert(long jarg1, Matrix2d jarg1_);
  public final static native long Matrix2d_inverse(long jarg1, Matrix2d jarg1_);
  public final static native boolean Matrix2d_isInvertible(long jarg1, Matrix2d jarg1_);
  public final static native float Matrix2d_scale(long jarg1, Matrix2d jarg1_);
  public final static native float Matrix2d_scaleX(long jarg1, Matrix2d jarg1_);
  public final static native float Matrix2d_scaleY(long jarg1, Matrix2d jarg1_);
  public final static native float Matrix2d_angle(long jarg1, Matrix2d jarg1_);
  public final static native boolean Matrix2d_isEqualTo__SWIG_0(long jarg1, Matrix2d jarg1_, long jarg2, Matrix2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Matrix2d_isEqualTo__SWIG_1(long jarg1, Matrix2d jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native boolean Matrix2d_isIdentity(long jarg1, Matrix2d jarg1_);
  public final static native boolean Matrix2d_isOrtho(long jarg1, Matrix2d jarg1_);
  public final static native boolean Matrix2d_hasMirror(long jarg1, Matrix2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Matrix2d_setCoordSystem(long jarg1, Matrix2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Vector2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native void Matrix2d_getCoordSystem(long jarg1, Matrix2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Vector2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native long Matrix2d_coordSystem__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native long Matrix2d_coordSystem__SWIG_1(long jarg1, Point2d jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native long Matrix2d_coordSystem__SWIG_2(long jarg1, Point2d jarg1_, float jarg2, float jarg3);
  public final static native long Matrix2d_coordSystem__SWIG_3(long jarg1, Point2d jarg1_, float jarg2);
  public final static native long Matrix2d_setToIdentity(long jarg1, Matrix2d jarg1_);
  public final static native long Matrix2d_set(long jarg1, Matrix2d jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native long Matrix2d_setToTranslation(long jarg1, Matrix2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Matrix2d_setToRotation__SWIG_0(long jarg1, Matrix2d jarg1_, float jarg2, long jarg3, Point2d jarg3_);
  public final static native long Matrix2d_setToRotation__SWIG_1(long jarg1, Matrix2d jarg1_, float jarg2);
  public final static native long Matrix2d_setToScaling__SWIG_0(long jarg1, Matrix2d jarg1_, float jarg2, long jarg3, Point2d jarg3_);
  public final static native long Matrix2d_setToScaling__SWIG_1(long jarg1, Matrix2d jarg1_, float jarg2);
  public final static native long Matrix2d_setToScaling__SWIG_2(long jarg1, Matrix2d jarg1_, float jarg2, float jarg3, long jarg4, Point2d jarg4_);
  public final static native long Matrix2d_setToScaling__SWIG_3(long jarg1, Matrix2d jarg1_, float jarg2, float jarg3);
  public final static native long Matrix2d_setToMirroring__SWIG_0(long jarg1, Matrix2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native long Matrix2d_setToMirroring__SWIG_1(long jarg1, Matrix2d jarg1_);
  public final static native long Matrix2d_setToMirroring__SWIG_2(long jarg1, Matrix2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Vector2d jarg3_);
  public final static native long Matrix2d_setToShearing__SWIG_0(long jarg1, Matrix2d jarg1_, float jarg2, float jarg3, long jarg4, Point2d jarg4_);
  public final static native long Matrix2d_setToShearing__SWIG_1(long jarg1, Matrix2d jarg1_, float jarg2, float jarg3);
  public final static native long Matrix2d_translation(long jarg1, Vector2d jarg1_);
  public final static native long Matrix2d_rotation__SWIG_0(float jarg1, long jarg2, Point2d jarg2_);
  public final static native long Matrix2d_rotation__SWIG_1(float jarg1);
  public final static native long Matrix2d_scaling__SWIG_0(float jarg1, long jarg2, Point2d jarg2_);
  public final static native long Matrix2d_scaling__SWIG_1(float jarg1);
  public final static native long Matrix2d_scaling__SWIG_2(float jarg1, float jarg2, long jarg3, Point2d jarg3_);
  public final static native long Matrix2d_scaling__SWIG_3(float jarg1, float jarg2);
  public final static native long Matrix2d_mirroring__SWIG_0(long jarg1, Point2d jarg1_);
  public final static native long Matrix2d_mirroring__SWIG_1();
  public final static native long Matrix2d_mirroring__SWIG_2(long jarg1, Point2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Matrix2d_shearing__SWIG_0(float jarg1, float jarg2, long jarg3, Point2d jarg3_);
  public final static native long Matrix2d_shearing__SWIG_1(float jarg1, float jarg2);
  public final static native long Matrix2d_transformWith2P(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native void delete_Matrix2d(long jarg1);
  public final static native void RECT_2D_left_set(long jarg1, RECT_2D jarg1_, float jarg2);
  public final static native float RECT_2D_left_get(long jarg1, RECT_2D jarg1_);
  public final static native void RECT_2D_top_set(long jarg1, RECT_2D jarg1_, float jarg2);
  public final static native float RECT_2D_top_get(long jarg1, RECT_2D jarg1_);
  public final static native void RECT_2D_right_set(long jarg1, RECT_2D jarg1_, float jarg2);
  public final static native float RECT_2D_right_get(long jarg1, RECT_2D jarg1_);
  public final static native void RECT_2D_bottom_set(long jarg1, RECT_2D jarg1_, float jarg2);
  public final static native float RECT_2D_bottom_get(long jarg1, RECT_2D jarg1_);
  public final static native long new_RECT_2D();
  public final static native float RECT_2D_width(long jarg1, RECT_2D jarg1_);
  public final static native float RECT_2D_height(long jarg1, RECT_2D jarg1_);
  public final static native void delete_RECT_2D(long jarg1);
  public final static native void Box2d_xmin_set(long jarg1, Box2d jarg1_, float jarg2);
  public final static native float Box2d_xmin_get(long jarg1, Box2d jarg1_);
  public final static native void Box2d_ymin_set(long jarg1, Box2d jarg1_, float jarg2);
  public final static native float Box2d_ymin_get(long jarg1, Box2d jarg1_);
  public final static native void Box2d_xmax_set(long jarg1, Box2d jarg1_, float jarg2);
  public final static native float Box2d_xmax_get(long jarg1, Box2d jarg1_);
  public final static native void Box2d_ymax_set(long jarg1, Box2d jarg1_, float jarg2);
  public final static native float Box2d_ymax_get(long jarg1, Box2d jarg1_);
  public final static native long Box2d_kIdentity();
  public final static native long new_Box2d__SWIG_0();
  public final static native long new_Box2d__SWIG_1(long jarg1, Box2d jarg1_, boolean jarg2);
  public final static native long new_Box2d__SWIG_2(long jarg1, Box2d jarg1_);
  public final static native long new_Box2d__SWIG_3(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native long new_Box2d__SWIG_4(float jarg1, float jarg2, float jarg3, float jarg4, boolean jarg5);
  public final static native long new_Box2d__SWIG_5(float jarg1, float jarg2, float jarg3, float jarg4);
  public final static native long new_Box2d__SWIG_6(long jarg1, RECT_2D jarg1_, boolean jarg2);
  public final static native long new_Box2d__SWIG_7(long jarg1, RECT_2D jarg1_);
  public final static native long new_Box2d__SWIG_8(int jarg1, int jarg2, int jarg3, int jarg4, boolean jarg5);
  public final static native long new_Box2d__SWIG_9(int jarg1, int jarg2, int jarg3, int jarg4);
  public final static native long new_Box2d__SWIG_10(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native long new_Box2d__SWIG_11(int jarg1, long jarg2, Point2d jarg2_);
  public final static native long new_Box2d__SWIG_12(long jarg1, Point2d jarg1_, float jarg2, float jarg3);
  public final static native long new_Box2d__SWIG_13(float jarg1, float jarg2);
  public final static native void Box2d_get__SWIG_0(long jarg1, Box2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native long Box2d_get__SWIG_1(long jarg1, Box2d jarg1_, long jarg2, RECT_2D jarg2_);
  public final static native long Box2d_set__SWIG_0(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_, boolean jarg3);
  public final static native long Box2d_set__SWIG_1(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native long Box2d_set__SWIG_2(long jarg1, Box2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native long Box2d_set__SWIG_3(long jarg1, Box2d jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native long Box2d_set__SWIG_4(long jarg1, Box2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_, long jarg5, Point2d jarg5_);
  public final static native long Box2d_set__SWIG_5(long jarg1, Box2d jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native long Box2d_set__SWIG_6(long jarg1, Box2d jarg1_, long jarg2, Point2d jarg2_, float jarg3, float jarg4);
  public final static native float Box2d_width(long jarg1, Box2d jarg1_);
  public final static native float Box2d_height(long jarg1, Box2d jarg1_);
  public final static native long Box2d_size(long jarg1, Box2d jarg1_);
  public final static native long Box2d_center(long jarg1, Box2d jarg1_);
  public final static native long Box2d_leftTop(long jarg1, Box2d jarg1_);
  public final static native long Box2d_rightTop(long jarg1, Box2d jarg1_);
  public final static native long Box2d_leftBottom(long jarg1, Box2d jarg1_);
  public final static native long Box2d_rightBottom(long jarg1, Box2d jarg1_);
  public final static native long Box2d_normalize(long jarg1, Box2d jarg1_);
  public final static native long Box2d_swapTopBottom(long jarg1, Box2d jarg1_);
  public final static native long Box2d_empty(long jarg1, Box2d jarg1_);
  public final static native boolean Box2d_isNormalized(long jarg1, Box2d jarg1_);
  public final static native boolean Box2d_isNull(long jarg1, Box2d jarg1_);
  public final static native boolean Box2d_isEmpty__SWIG_0(long jarg1, Box2d jarg1_, long jarg2, Tol jarg2_, boolean jarg3);
  public final static native boolean Box2d_isEmpty__SWIG_1(long jarg1, Box2d jarg1_, long jarg2, Tol jarg2_);
  public final static native boolean Box2d_isEmpty__SWIG_2(long jarg1, Box2d jarg1_);
  public final static native boolean Box2d_isEmptyMinus__SWIG_0(long jarg1, Box2d jarg1_, long jarg2, Tol jarg2_);
  public final static native boolean Box2d_isEmptyMinus__SWIG_1(long jarg1, Box2d jarg1_);
  public final static native boolean Box2d_contains__SWIG_0(long jarg1, Box2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native boolean Box2d_contains__SWIG_1(long jarg1, Box2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Box2d_contains__SWIG_2(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean Box2d_contains__SWIG_3(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_, long jarg3, Tol jarg3_);
  public final static native long Box2d_inflate__SWIG_0(long jarg1, Box2d jarg1_, float jarg2);
  public final static native long Box2d_inflate__SWIG_1(long jarg1, Box2d jarg1_, float jarg2, float jarg3);
  public final static native long Box2d_inflate__SWIG_2(long jarg1, Box2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Box2d_inflate__SWIG_3(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native long Box2d_inflate__SWIG_4(long jarg1, Box2d jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native long Box2d_deflate__SWIG_0(long jarg1, Box2d jarg1_, float jarg2);
  public final static native long Box2d_deflate__SWIG_1(long jarg1, Box2d jarg1_, float jarg2, float jarg3);
  public final static native long Box2d_deflate__SWIG_2(long jarg1, Box2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Box2d_deflate__SWIG_3(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native long Box2d_deflate__SWIG_4(long jarg1, Box2d jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native long Box2d_offset__SWIG_0(long jarg1, Box2d jarg1_, float jarg2, float jarg3);
  public final static native long Box2d_offset__SWIG_1(long jarg1, Box2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Box2d_scaleBy__SWIG_0(long jarg1, Box2d jarg1_, float jarg2, float jarg3);
  public final static native long Box2d_scaleBy__SWIG_1(long jarg1, Box2d jarg1_, float jarg2);
  public final static native boolean Box2d_isIntersect(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native long Box2d_intersectWith__SWIG_0(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_, long jarg3, Box2d jarg3_);
  public final static native long Box2d_intersectWith__SWIG_1(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native long Box2d_unionWith__SWIG_0(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_, long jarg3, Box2d jarg3_);
  public final static native long Box2d_unionWith__SWIG_1(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native long Box2d_unionWith__SWIG_2(long jarg1, Box2d jarg1_, float jarg2, float jarg3);
  public final static native long Box2d_unionWith__SWIG_3(long jarg1, Box2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native long Box2d_offset__SWIG_2(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean Box2d_isEqualTo__SWIG_0(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Box2d_isEqualTo__SWIG_1(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native void delete_Box2d(long jarg1);
  public final static native float mgbase_toRange(float jarg1, float jarg2, float jarg3);
  public final static native float mgbase_to0_2PI(float jarg1);
  public final static native float mgbase_toPI(float jarg1);
  public final static native float mgbase_deg2Rad(float jarg1);
  public final static native float mgbase_rad2Deg(float jarg1);
  public final static native float mgbase_dms2Deg(float jarg1);
  public final static native float mgbase_deg2Dms(float jarg1);
  public final static native float mgbase_getMidAngle(float jarg1, float jarg2);
  public final static native float mgbase_getMidAngle2(float jarg1, float jarg2);
  public final static native float mgbase_getDiffAngle(float jarg1, float jarg2);
  public final static native int mgbase_getGcd(int jarg1, int jarg2);
  public final static native float mgbase_roundReal(float jarg1, int jarg2);
  public final static native long new_mgbase();
  public final static native void delete_mgbase(long jarg1);
  public final static native void mgcurv_fitBezier(long jarg1, Point2d jarg1_, float jarg2, long jarg3, Point2d jarg3_);
  public final static native void mgcurv_bezierTanget(long jarg1, Point2d jarg1_, float jarg2, long jarg3, Point2d jarg3_);
  public final static native void mgcurv_splitBezier(long jarg1, Point2d jarg1_, float jarg2, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native boolean mgcurv_bezierIsStraight(long jarg1, Point2d jarg1_);
  public final static native float mgcurv_lengthOfBezier(long jarg1, Point2d jarg1_);
  public final static native float mgcurv_bezierPointLengthFromStart(long jarg1, Point2d jarg1_, float jarg2);
  public final static native void mgcurv_bezier4P(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_, long jarg5, Point2d jarg5_, long jarg6, Point2d jarg6_);
  public final static native int mgcurv_fitCurve(int jarg1, long jarg2, Point2d jarg2_, long jarg3, Vector2d jarg3_, int jarg4, long jarg5, Point2d jarg5_, float jarg6);
  public final static native void mgcurv_quadBezierToCubic(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native void mgcurv_ellipse90ToBezier(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native void mgcurv_ellipseToBezier(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, float jarg3, float jarg4);
  public final static native void mgcurv_roundRectToBeziers(long jarg1, Point2d jarg1_, long jarg2, Box2d jarg2_, float jarg3, float jarg4);
  public final static native int mgcurv_arcToBezier(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, float jarg3, float jarg4, float jarg5, float jarg6);
  public final static native int mgcurv_crossTwoCircles(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, float jarg4, long jarg5, Point2d jarg5_, float jarg6);
  public final static native int mgcurv_crossLineCircle__SWIG_0(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_, long jarg5, Point2d jarg5_, float jarg6, boolean jarg7);
  public final static native int mgcurv_crossLineCircle__SWIG_1(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_, long jarg5, Point2d jarg5_, float jarg6);
  public final static native boolean mgcurv_cubicSplines__SWIG_0(int jarg1, long jarg2, Point2d jarg2_, long jarg3, Vector2d jarg3_, int jarg4, float jarg5);
  public final static native boolean mgcurv_cubicSplines__SWIG_1(int jarg1, long jarg2, Point2d jarg2_, long jarg3, Vector2d jarg3_, int jarg4);
  public final static native boolean mgcurv_cubicSplines__SWIG_2(int jarg1, long jarg2, Point2d jarg2_, long jarg3, Vector2d jarg3_);
  public final static native void mgcurv_fitCubicSpline(int jarg1, long jarg2, Point2d jarg2_, long jarg3, Vector2d jarg3_, int jarg4, float jarg5, long jarg6, Point2d jarg6_);
  public final static native void mgcurv_cubicSplineToBezier__SWIG_0(int jarg1, long jarg2, Point2d jarg2_, long jarg3, Vector2d jarg3_, int jarg4, long jarg5, Point2d jarg5_, boolean jarg6);
  public final static native void mgcurv_cubicSplineToBezier__SWIG_1(int jarg1, long jarg2, Point2d jarg2_, long jarg3, Vector2d jarg3_, int jarg4, long jarg5, Point2d jarg5_);
  public final static native int mgcurv_bsplinesToBeziers(long jarg1, Point2d jarg1_, int jarg2, long jarg3, Point2d jarg3_, boolean jarg4);
  public final static native long new_mgcurv();
  public final static native void delete_mgcurv(long jarg1);
  public final static native boolean mglnrel_isLeft(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native boolean mglnrel_isLeft2(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Tol jarg4_);
  public final static native boolean mglnrel_isLeftOn(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native boolean mglnrel_isLeftOn2(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Tol jarg4_);
  public final static native boolean mglnrel_isColinear(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native boolean mglnrel_isColinear2(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Tol jarg4_);
  public final static native boolean mglnrel_isIntersectProp(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native boolean mglnrel_isBetweenLine(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native boolean mglnrel_isProjectBetweenLine(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native boolean mglnrel_isProjectBetweenRayline(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native boolean mglnrel_isBetweenLine2(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Tol jarg4_);
  public final static native boolean mglnrel_isBetweenLine3__SWIG_0(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native boolean mglnrel_isBetweenLine3__SWIG_1(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native boolean mglnrel_isIntersect(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native float mglnrel_ptToBeeline(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native float mglnrel_ptToBeeline2(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native float mglnrel_ptToLine(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native boolean mglnrel_crossLineAbc__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, long jarg7, Point2d jarg7_, long jarg8, Tol jarg8_);
  public final static native boolean mglnrel_crossLineAbc__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, long jarg7, Point2d jarg7_);
  public final static native boolean mglnrel_cross2Line__SWIG_0(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_, long jarg5, Point2d jarg5_, long jarg6, Tol jarg6_);
  public final static native boolean mglnrel_cross2Line__SWIG_1(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_, long jarg5, Point2d jarg5_);
  public final static native boolean mglnrel_clipLine(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Box2d jarg3_);
  public final static native long new_mglnrel();
  public final static native void delete_mglnrel(long jarg1);
  public final static native float mgnear_nearestOnBezier(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native long mgnear_bezierBox1(long jarg1, Point2d jarg1_);
  public final static native long mgnear_bezierBox4(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native void mgnear_beziersBox__SWIG_0(long jarg1, Box2d jarg1_, int jarg2, long jarg3, Point2d jarg3_, boolean jarg4);
  public final static native void mgnear_beziersBox__SWIG_1(long jarg1, Box2d jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean mgnear_beziersIntersectBox__SWIG_0(long jarg1, Box2d jarg1_, int jarg2, long jarg3, Point2d jarg3_, boolean jarg4);
  public final static native boolean mgnear_beziersIntersectBox__SWIG_1(long jarg1, Box2d jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native void mgnear_cubicSplinesBox__SWIG_0(long jarg1, Box2d jarg1_, int jarg2, long jarg3, Point2d jarg3_, long jarg4, Vector2d jarg4_, boolean jarg5, boolean jarg6);
  public final static native void mgnear_cubicSplinesBox__SWIG_1(long jarg1, Box2d jarg1_, int jarg2, long jarg3, Point2d jarg3_, long jarg4, Vector2d jarg4_, boolean jarg5);
  public final static native void mgnear_cubicSplinesBox__SWIG_2(long jarg1, Box2d jarg1_, int jarg2, long jarg3, Point2d jarg3_, long jarg4, Vector2d jarg4_);
  public final static native boolean mgnear_cubicSplinesIntersectBox__SWIG_0(long jarg1, Box2d jarg1_, int jarg2, long jarg3, Point2d jarg3_, long jarg4, Vector2d jarg4_, boolean jarg5, boolean jarg6);
  public final static native boolean mgnear_cubicSplinesIntersectBox__SWIG_1(long jarg1, Box2d jarg1_, int jarg2, long jarg3, Point2d jarg3_, long jarg4, Vector2d jarg4_, boolean jarg5);
  public final static native boolean mgnear_cubicSplinesIntersectBox__SWIG_2(long jarg1, Box2d jarg1_, int jarg2, long jarg3, Point2d jarg3_, long jarg4, Vector2d jarg4_);
  public final static native void mgnear_getRectHandle(long jarg1, Box2d jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native void mgnear_moveRectHandle__SWIG_0(long jarg1, Box2d jarg1_, int jarg2, long jarg3, Point2d jarg3_, boolean jarg4);
  public final static native void mgnear_moveRectHandle__SWIG_1(long jarg1, Box2d jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native long new_mgnear();
  public final static native void delete_mgnear(long jarg1);
  public final static native void delete_GiCanvas(long jarg1);
  public final static native void GiCanvas_setPen(long jarg1, GiCanvas jarg1_, int jarg2, float jarg3, int jarg4, float jarg5, float jarg6);
  public final static native void GiCanvas_setBrush(long jarg1, GiCanvas jarg1_, int jarg2, int jarg3);
  public final static native void GiCanvas_clearRect(long jarg1, GiCanvas jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void GiCanvas_drawRect(long jarg1, GiCanvas jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, boolean jarg6, boolean jarg7);
  public final static native void GiCanvas_drawLine(long jarg1, GiCanvas jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void GiCanvas_drawEllipse(long jarg1, GiCanvas jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, boolean jarg6, boolean jarg7);
  public final static native void GiCanvas_beginPath(long jarg1, GiCanvas jarg1_);
  public final static native void GiCanvas_moveTo(long jarg1, GiCanvas jarg1_, float jarg2, float jarg3);
  public final static native void GiCanvas_lineTo(long jarg1, GiCanvas jarg1_, float jarg2, float jarg3);
  public final static native void GiCanvas_bezierTo(long jarg1, GiCanvas jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native void GiCanvas_quadTo(long jarg1, GiCanvas jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void GiCanvas_closePath(long jarg1, GiCanvas jarg1_);
  public final static native void GiCanvas_drawPath(long jarg1, GiCanvas jarg1_, boolean jarg2, boolean jarg3);
  public final static native void GiCanvas_saveClip(long jarg1, GiCanvas jarg1_);
  public final static native void GiCanvas_restoreClip(long jarg1, GiCanvas jarg1_);
  public final static native boolean GiCanvas_clipRect(long jarg1, GiCanvas jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native boolean GiCanvas_clipPath(long jarg1, GiCanvas jarg1_);
  public final static native boolean GiCanvas_drawHandle(long jarg1, GiCanvas jarg1_, float jarg2, float jarg3, int jarg4, float jarg5);
  public final static native boolean GiCanvas_drawBitmap(long jarg1, GiCanvas jarg1_, String jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native float GiCanvas_drawTextAt(long jarg1, GiCanvas jarg1_, String jarg2, float jarg3, float jarg4, float jarg5, int jarg6, float jarg7);
  public final static native boolean GiCanvas_beginShape(long jarg1, GiCanvas jarg1_, int jarg2, int jarg3, int jarg4, float jarg5, float jarg6, float jarg7, float jarg8);
  public final static native boolean GiCanvas_beginShapeSwigExplicitGiCanvas(long jarg1, GiCanvas jarg1_, int jarg2, int jarg3, int jarg4, float jarg5, float jarg6, float jarg7, float jarg8);
  public final static native void GiCanvas_endShape(long jarg1, GiCanvas jarg1_, int jarg2, int jarg3, float jarg4, float jarg5);
  public final static native void GiCanvas_endShapeSwigExplicitGiCanvas(long jarg1, GiCanvas jarg1_, int jarg2, int jarg3, float jarg4, float jarg5);
  public final static native long new_GiCanvas();
  public final static native void GiCanvas_director_connect(GiCanvas obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void GiCanvas_change_ownership(GiCanvas obj, long cptr, boolean take_or_release);
  public final static native void GiColor_r_set(long jarg1, GiColor jarg1_, short jarg2);
  public final static native short GiColor_r_get(long jarg1, GiColor jarg1_);
  public final static native void GiColor_g_set(long jarg1, GiColor jarg1_, short jarg2);
  public final static native short GiColor_g_get(long jarg1, GiColor jarg1_);
  public final static native void GiColor_b_set(long jarg1, GiColor jarg1_, short jarg2);
  public final static native short GiColor_b_get(long jarg1, GiColor jarg1_);
  public final static native void GiColor_a_set(long jarg1, GiColor jarg1_, short jarg2);
  public final static native short GiColor_a_get(long jarg1, GiColor jarg1_);
  public final static native long new_GiColor__SWIG_0();
  public final static native long new_GiColor__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4);
  public final static native long new_GiColor__SWIG_2(int jarg1, int jarg2, int jarg3);
  public final static native long new_GiColor__SWIG_3(long jarg1, GiColor jarg1_);
  public final static native long new_GiColor__SWIG_4(int jarg1, boolean jarg2);
  public final static native long new_GiColor__SWIG_5(int jarg1);
  public final static native long GiColor_White();
  public final static native long GiColor_Black();
  public final static native long GiColor_Blue();
  public final static native long GiColor_Red();
  public final static native long GiColor_Green();
  public final static native long GiColor_Invalid();
  public final static native int GiColor_getARGB(long jarg1, GiColor jarg1_);
  public final static native void GiColor_setARGB(long jarg1, GiColor jarg1_, int jarg2);
  public final static native void GiColor_set__SWIG_0(long jarg1, GiColor jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native void GiColor_set__SWIG_1(long jarg1, GiColor jarg1_, int jarg2, int jarg3, int jarg4, int jarg5);
  public final static native long GiColor_withAlpha(long jarg1, GiColor jarg1_, int jarg2);
  public final static native boolean GiColor_isInvalid(long jarg1, GiColor jarg1_);
  public final static native boolean GiColor_equals(long jarg1, GiColor jarg1_, long jarg2, GiColor jarg2_);
  public final static native void delete_GiColor(long jarg1);
  public final static native long new_GiContext__SWIG_0();
  public final static native long new_GiContext__SWIG_1(float jarg1, long jarg2, GiColor jarg2_, int jarg3, long jarg4, GiColor jarg4_, boolean jarg5);
  public final static native long new_GiContext__SWIG_2(float jarg1, long jarg2, GiColor jarg2_, int jarg3, long jarg4, GiColor jarg4_);
  public final static native long new_GiContext__SWIG_3(float jarg1, long jarg2, GiColor jarg2_, int jarg3);
  public final static native long new_GiContext__SWIG_4(float jarg1, long jarg2, GiColor jarg2_);
  public final static native long new_GiContext__SWIG_5(float jarg1);
  public final static native long new_GiContext__SWIG_6(long jarg1, GiContext jarg1_);
  public final static native long GiContext_copy__SWIG_0(long jarg1, GiContext jarg1_, long jarg2, GiContext jarg2_, int jarg3);
  public final static native long GiContext_copy__SWIG_1(long jarg1, GiContext jarg1_, long jarg2, GiContext jarg2_);
  public final static native boolean GiContext_equals(long jarg1, GiContext jarg1_, long jarg2, GiContext jarg2_);
  public final static native int GiContext_getLineStyle(long jarg1, GiContext jarg1_);
  public final static native int GiContext_getLineStyleEx(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setLineStyle__SWIG_0(long jarg1, GiContext jarg1_, int jarg2, boolean jarg3);
  public final static native void GiContext_setLineStyle__SWIG_1(long jarg1, GiContext jarg1_, int jarg2);
  public final static native float GiContext_getLineWidth(long jarg1, GiContext jarg1_);
  public final static native float GiContext_getExtraWidth(long jarg1, GiContext jarg1_);
  public final static native boolean GiContext_isAutoScale(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setLineWidth(long jarg1, GiContext jarg1_, float jarg2, boolean jarg3);
  public final static native void GiContext_setExtraWidth(long jarg1, GiContext jarg1_, float jarg2);
  public final static native boolean GiContext_isNullLine(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setNullLine(long jarg1, GiContext jarg1_);
  public final static native long GiContext_getLineColor(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setLineColor__SWIG_0(long jarg1, GiContext jarg1_, long jarg2, GiColor jarg2_);
  public final static native void GiContext_setLineColor__SWIG_1(long jarg1, GiContext jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native void GiContext_setLineColor__SWIG_2(long jarg1, GiContext jarg1_, int jarg2, int jarg3, int jarg4, int jarg5);
  public final static native int GiContext_getLineARGB(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setLineARGB(long jarg1, GiContext jarg1_, int jarg2);
  public final static native int GiContext_getLineAlpha(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setLineAlpha(long jarg1, GiContext jarg1_, int jarg2);
  public final static native boolean GiContext_hasFillColor(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setNoFillColor(long jarg1, GiContext jarg1_);
  public final static native long GiContext_getFillColor(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setFillColor__SWIG_0(long jarg1, GiContext jarg1_, long jarg2, GiColor jarg2_);
  public final static native void GiContext_setFillColor__SWIG_1(long jarg1, GiContext jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native void GiContext_setFillColor__SWIG_2(long jarg1, GiContext jarg1_, int jarg2, int jarg3, int jarg4, int jarg5);
  public final static native int GiContext_getFillARGB(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setFillARGB(long jarg1, GiContext jarg1_, int jarg2);
  public final static native int GiContext_getFillAlpha(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setFillAlpha(long jarg1, GiContext jarg1_, int jarg2);
  public final static native boolean GiContext_hasArrayHead(long jarg1, GiContext jarg1_);
  public final static native int GiContext_getStartArrayHead(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setStartArrayHead(long jarg1, GiContext jarg1_, int jarg2);
  public final static native int GiContext_getEndArrayHead(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setEndArrayHead(long jarg1, GiContext jarg1_, int jarg2);
  public final static native void delete_GiContext(long jarg1);
  public final static native long new_GiTransform__SWIG_0(boolean jarg1);
  public final static native long new_GiTransform__SWIG_1();
  public final static native long new_GiTransform__SWIG_2(long jarg1, GiTransform jarg1_);
  public final static native void delete_GiTransform(long jarg1);
  public final static native long GiTransform_copy(long jarg1, GiTransform jarg1_, long jarg2, GiTransform jarg2_);
  public final static native float GiTransform_getDpiX(long jarg1, GiTransform jarg1_);
  public final static native float GiTransform_getDpiY(long jarg1, GiTransform jarg1_);
  public final static native int GiTransform_getWidth(long jarg1, GiTransform jarg1_);
  public final static native int GiTransform_getHeight(long jarg1, GiTransform jarg1_);
  public final static native long GiTransform_getCenterW(long jarg1, GiTransform jarg1_);
  public final static native float GiTransform_getViewScale(long jarg1, GiTransform jarg1_);
  public final static native float GiTransform_getWorldToDisplayX__SWIG_0(long jarg1, GiTransform jarg1_, boolean jarg2);
  public final static native float GiTransform_getWorldToDisplayX__SWIG_1(long jarg1, GiTransform jarg1_);
  public final static native float GiTransform_getWorldToDisplayY__SWIG_0(long jarg1, GiTransform jarg1_, boolean jarg2);
  public final static native float GiTransform_getWorldToDisplayY__SWIG_1(long jarg1, GiTransform jarg1_);
  public final static native float GiTransform_displayToModel__SWIG_0(long jarg1, GiTransform jarg1_, float jarg2, boolean jarg3);
  public final static native float GiTransform_displayToModel__SWIG_1(long jarg1, GiTransform jarg1_, float jarg2);
  public final static native long GiTransform_modelToWorld(long jarg1, GiTransform jarg1_);
  public final static native long GiTransform_worldToModel(long jarg1, GiTransform jarg1_);
  public final static native long GiTransform_displayToWorld(long jarg1, GiTransform jarg1_);
  public final static native long GiTransform_worldToDisplay(long jarg1, GiTransform jarg1_);
  public final static native long GiTransform_displayToModel__SWIG_2(long jarg1, GiTransform jarg1_);
  public final static native long GiTransform_modelToDisplay(long jarg1, GiTransform jarg1_);
  public final static native boolean GiTransform_setWndSize(long jarg1, GiTransform jarg1_, int jarg2, int jarg3);
  public final static native void GiTransform_setResolution__SWIG_0(long jarg1, GiTransform jarg1_, float jarg2, float jarg3);
  public final static native void GiTransform_setResolution__SWIG_1(long jarg1, GiTransform jarg1_, float jarg2);
  public final static native boolean GiTransform_setModelTransform(long jarg1, GiTransform jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native long GiTransform_getWndRectW(long jarg1, GiTransform jarg1_);
  public final static native long GiTransform_getWndRectM(long jarg1, GiTransform jarg1_);
  public final static native long GiTransform_getWndRect(long jarg1, GiTransform jarg1_);
  public final static native float GiTransform_getMinViewScale(long jarg1, GiTransform jarg1_);
  public final static native float GiTransform_getMaxViewScale(long jarg1, GiTransform jarg1_);
  public final static native long GiTransform_getWorldLimits(long jarg1, GiTransform jarg1_);
  public final static native void GiTransform_setViewScaleRange(long jarg1, GiTransform jarg1_, float jarg2, float jarg3);
  public final static native long GiTransform_setWorldLimits(long jarg1, GiTransform jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean GiTransform_zoomWnd__SWIG_0(long jarg1, GiTransform jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, boolean jarg4);
  public final static native boolean GiTransform_zoomWnd__SWIG_1(long jarg1, GiTransform jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native boolean GiTransform_zoomTo__SWIG_0(long jarg1, GiTransform jarg1_, long jarg2, Box2d jarg2_, long jarg3, RECT_2D jarg3_, boolean jarg4);
  public final static native boolean GiTransform_zoomTo__SWIG_1(long jarg1, GiTransform jarg1_, long jarg2, Box2d jarg2_, long jarg3, RECT_2D jarg3_);
  public final static native boolean GiTransform_zoomTo__SWIG_2(long jarg1, GiTransform jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean GiTransform_zoomTo__SWIG_3(long jarg1, GiTransform jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, boolean jarg4);
  public final static native boolean GiTransform_zoomTo__SWIG_4(long jarg1, GiTransform jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native boolean GiTransform_zoomTo__SWIG_5(long jarg1, GiTransform jarg1_, long jarg2, Point2d jarg2_);
  public final static native boolean GiTransform_zoomPan__SWIG_0(long jarg1, GiTransform jarg1_, float jarg2, float jarg3, boolean jarg4);
  public final static native boolean GiTransform_zoomPan__SWIG_1(long jarg1, GiTransform jarg1_, float jarg2, float jarg3);
  public final static native boolean GiTransform_zoomByFactor__SWIG_0(long jarg1, GiTransform jarg1_, float jarg2, long jarg3, Point2d jarg3_, boolean jarg4);
  public final static native boolean GiTransform_zoomByFactor__SWIG_1(long jarg1, GiTransform jarg1_, float jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean GiTransform_zoomByFactor__SWIG_2(long jarg1, GiTransform jarg1_, float jarg2);
  public final static native boolean GiTransform_zoomScale__SWIG_0(long jarg1, GiTransform jarg1_, float jarg2, long jarg3, Point2d jarg3_, boolean jarg4);
  public final static native boolean GiTransform_zoomScale__SWIG_1(long jarg1, GiTransform jarg1_, float jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean GiTransform_zoomScale__SWIG_2(long jarg1, GiTransform jarg1_, float jarg2);
  public final static native boolean GiTransform_zoom(long jarg1, GiTransform jarg1_, long jarg2, Point2d jarg2_, float jarg3);
  public final static native boolean GiTransform_enableZoom(long jarg1, GiTransform jarg1_, boolean jarg2);
  public final static native float GiTransform_getZoomValue(long jarg1, GiTransform jarg1_, long jarg2, Point2d jarg2_);
  public final static native int GiTransform_getZoomTimes(long jarg1, GiTransform jarg1_);
  public final static native long new_GiSaveModelTransform(long jarg1, GiTransform jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native void delete_GiSaveModelTransform(long jarg1);
  public final static native long new_MgPath__SWIG_0();
  public final static native long new_MgPath__SWIG_1(long jarg1, MgPath jarg1_);
  public final static native long new_MgPath__SWIG_2(int jarg1, long jarg2, Point2d jarg2_, String jarg3);
  public final static native long new_MgPath__SWIG_3(String jarg1);
  public final static native void delete_MgPath(long jarg1);
  public final static native long MgPath_copy(long jarg1, MgPath jarg1_, long jarg2, MgPath jarg2_);
  public final static native long MgPath_append(long jarg1, MgPath jarg1_, long jarg2, MgPath jarg2_);
  public final static native long MgPath_addSVGPath(long jarg1, MgPath jarg1_, String jarg2);
  public final static native long MgPath_reverse(long jarg1, MgPath jarg1_);
  public final static native boolean MgPath_genericRoundLines__SWIG_0(long jarg1, MgPath jarg1_, int jarg2, long jarg3, Point2d jarg3_, float jarg4, boolean jarg5);
  public final static native boolean MgPath_genericRoundLines__SWIG_1(long jarg1, MgPath jarg1_, int jarg2, long jarg3, Point2d jarg3_, float jarg4);
  public final static native int MgPath_getCount(long jarg1, MgPath jarg1_);
  public final static native int MgPath_getSubPathCount(long jarg1, MgPath jarg1_);
  public final static native long MgPath_getStartPoint(long jarg1, MgPath jarg1_);
  public final static native long MgPath_getStartTangent(long jarg1, MgPath jarg1_);
  public final static native long MgPath_getEndPoint(long jarg1, MgPath jarg1_);
  public final static native long MgPath_getEndTangent(long jarg1, MgPath jarg1_);
  public final static native boolean MgPath_isLine(long jarg1, MgPath jarg1_);
  public final static native boolean MgPath_isLines(long jarg1, MgPath jarg1_);
  public final static native boolean MgPath_isCurve(long jarg1, MgPath jarg1_);
  public final static native boolean MgPath_isClosed(long jarg1, MgPath jarg1_);
  public final static native float MgPath_getLength(long jarg1, MgPath jarg1_);
  public final static native int MgPath_getNodeType(long jarg1, MgPath jarg1_, int jarg2);
  public final static native long MgPath_getPoint(long jarg1, MgPath jarg1_, int jarg2);
  public final static native void MgPath_setPoint(long jarg1, MgPath jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native void MgPath_clear(long jarg1, MgPath jarg1_);
  public final static native void MgPath_transform(long jarg1, MgPath jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native void MgPath_startFigure(long jarg1, MgPath jarg1_);
  public final static native boolean MgPath_moveTo__SWIG_0(long jarg1, MgPath jarg1_, long jarg2, Point2d jarg2_, boolean jarg3);
  public final static native boolean MgPath_moveTo__SWIG_1(long jarg1, MgPath jarg1_, long jarg2, Point2d jarg2_);
  public final static native boolean MgPath_lineTo__SWIG_0(long jarg1, MgPath jarg1_, long jarg2, Point2d jarg2_, boolean jarg3);
  public final static native boolean MgPath_lineTo__SWIG_1(long jarg1, MgPath jarg1_, long jarg2, Point2d jarg2_);
  public final static native boolean MgPath_horzTo__SWIG_0(long jarg1, MgPath jarg1_, float jarg2, boolean jarg3);
  public final static native boolean MgPath_horzTo__SWIG_1(long jarg1, MgPath jarg1_, float jarg2);
  public final static native boolean MgPath_vertTo__SWIG_0(long jarg1, MgPath jarg1_, float jarg2, boolean jarg3);
  public final static native boolean MgPath_vertTo__SWIG_1(long jarg1, MgPath jarg1_, float jarg2);
  public final static native boolean MgPath_linesTo__SWIG_0(long jarg1, MgPath jarg1_, int jarg2, long jarg3, Point2d jarg3_, boolean jarg4);
  public final static native boolean MgPath_linesTo__SWIG_1(long jarg1, MgPath jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean MgPath_beziersTo__SWIG_0(long jarg1, MgPath jarg1_, int jarg2, long jarg3, Point2d jarg3_, boolean jarg4, boolean jarg5);
  public final static native boolean MgPath_beziersTo__SWIG_1(long jarg1, MgPath jarg1_, int jarg2, long jarg3, Point2d jarg3_, boolean jarg4);
  public final static native boolean MgPath_beziersTo__SWIG_2(long jarg1, MgPath jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean MgPath_bezierTo__SWIG_0(long jarg1, MgPath jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_, boolean jarg5);
  public final static native boolean MgPath_bezierTo__SWIG_1(long jarg1, MgPath jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native boolean MgPath_smoothBezierTo__SWIG_0(long jarg1, MgPath jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, boolean jarg4);
  public final static native boolean MgPath_smoothBezierTo__SWIG_1(long jarg1, MgPath jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native boolean MgPath_quadsTo__SWIG_0(long jarg1, MgPath jarg1_, int jarg2, long jarg3, Point2d jarg3_, boolean jarg4);
  public final static native boolean MgPath_quadsTo__SWIG_1(long jarg1, MgPath jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean MgPath_quadTo__SWIG_0(long jarg1, MgPath jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, boolean jarg4);
  public final static native boolean MgPath_quadTo__SWIG_1(long jarg1, MgPath jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native boolean MgPath_smoothQuadTo__SWIG_0(long jarg1, MgPath jarg1_, long jarg2, Point2d jarg2_, boolean jarg3);
  public final static native boolean MgPath_smoothQuadTo__SWIG_1(long jarg1, MgPath jarg1_, long jarg2, Point2d jarg2_);
  public final static native boolean MgPath_arcTo__SWIG_0(long jarg1, MgPath jarg1_, long jarg2, Point2d jarg2_, boolean jarg3);
  public final static native boolean MgPath_arcTo__SWIG_1(long jarg1, MgPath jarg1_, long jarg2, Point2d jarg2_);
  public final static native boolean MgPath_arcTo__SWIG_2(long jarg1, MgPath jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, boolean jarg4);
  public final static native boolean MgPath_arcTo__SWIG_3(long jarg1, MgPath jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native boolean MgPath_closeFigure(long jarg1, MgPath jarg1_);
  public final static native boolean MgPath_trimStart(long jarg1, MgPath jarg1_, long jarg2, Point2d jarg2_, float jarg3);
  public final static native boolean MgPath_crossWithPath(long jarg1, MgPath jarg1_, long jarg2, MgPath jarg2_, long jarg3, Box2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native long new_GiGraphics__SWIG_0();
  public final static native long new_GiGraphics__SWIG_1(long jarg1, GiTransform jarg1_, boolean jarg2);
  public final static native long new_GiGraphics__SWIG_2(long jarg1, GiTransform jarg1_);
  public final static native long new_GiGraphics__SWIG_3(long jarg1, GiGraphics jarg1_);
  public final static native void delete_GiGraphics(long jarg1);
  public final static native long GiGraphics_fromHandle(int jarg1);
  public final static native int GiGraphics_toHandle(long jarg1, GiGraphics jarg1_);
  public final static native void GiGraphics_copy(long jarg1, GiGraphics jarg1_, long jarg2, GiGraphics jarg2_);
  public final static native long GiGraphics_xf(long jarg1, GiGraphics jarg1_);
  public final static native boolean GiGraphics_isDrawing(long jarg1, GiGraphics jarg1_);
  public final static native boolean GiGraphics_isPrint(long jarg1, GiGraphics jarg1_);
  public final static native boolean GiGraphics_isStopping(long jarg1, GiGraphics jarg1_);
  public final static native void GiGraphics_stopDrawing__SWIG_0(long jarg1, GiGraphics jarg1_, boolean jarg2);
  public final static native void GiGraphics_stopDrawing__SWIG_1(long jarg1, GiGraphics jarg1_);
  public final static native long GiGraphics_getClipModel(long jarg1, GiGraphics jarg1_);
  public final static native long GiGraphics_getClipWorld(long jarg1, GiGraphics jarg1_);
  public final static native long GiGraphics_getClipBox(long jarg1, GiGraphics jarg1_, long jarg2, RECT_2D jarg2_);
  public final static native boolean GiGraphics_setClipBox(long jarg1, GiGraphics jarg1_, long jarg2, RECT_2D jarg2_);
  public final static native boolean GiGraphics_setClipWorld(long jarg1, GiGraphics jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean GiGraphics_isGrayMode(long jarg1, GiGraphics jarg1_);
  public final static native void GiGraphics_setGrayMode(long jarg1, GiGraphics jarg1_, boolean jarg2);
  public final static native long GiGraphics_getBkColor(long jarg1, GiGraphics jarg1_);
  public final static native long GiGraphics_setBkColor(long jarg1, GiGraphics jarg1_, long jarg2, GiColor jarg2_);
  public final static native long GiGraphics_calcPenColor(long jarg1, GiGraphics jarg1_, long jarg2, GiColor jarg2_);
  public final static native float GiGraphics_calcPenWidth(long jarg1, GiGraphics jarg1_, float jarg2, boolean jarg3);
  public final static native void GiGraphics_setMaxPenWidth__SWIG_0(long jarg1, GiGraphics jarg1_, float jarg2, float jarg3);
  public final static native void GiGraphics_setMaxPenWidth__SWIG_1(long jarg1, GiGraphics jarg1_, float jarg2);
  public final static native void GiGraphics_setPenWidthFactor(float jarg1);
  public final static native boolean GiGraphics_setPhaseEnabled(long jarg1, GiGraphics jarg1_, boolean jarg2);
  public final static native boolean GiGraphics_drawLine__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_, boolean jarg5);
  public final static native boolean GiGraphics_drawLine__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native boolean GiGraphics_drawRayline__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_, boolean jarg5);
  public final static native boolean GiGraphics_drawRayline__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native boolean GiGraphics_drawBeeline__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_, boolean jarg5);
  public final static native boolean GiGraphics_drawBeeline__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native boolean GiGraphics_drawLines__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, boolean jarg5);
  public final static native boolean GiGraphics_drawLines__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_);
  public final static native boolean GiGraphics_drawBeziers__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, boolean jarg5, boolean jarg6);
  public final static native boolean GiGraphics_drawBeziers__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, boolean jarg5);
  public final static native boolean GiGraphics_drawBeziers__SWIG_2(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_);
  public final static native boolean GiGraphics_drawBeziers__SWIG_3(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, long jarg5, Vector2d jarg5_, boolean jarg6, boolean jarg7);
  public final static native boolean GiGraphics_drawBeziers__SWIG_4(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, long jarg5, Vector2d jarg5_, boolean jarg6);
  public final static native boolean GiGraphics_drawBeziers__SWIG_5(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, long jarg5, Vector2d jarg5_);
  public final static native boolean GiGraphics_drawArc__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, float jarg4, float jarg5, float jarg6, float jarg7, boolean jarg8);
  public final static native boolean GiGraphics_drawArc__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native boolean GiGraphics_drawArc3P__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_, long jarg5, Point2d jarg5_, boolean jarg6);
  public final static native boolean GiGraphics_drawArc3P__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_, long jarg5, Point2d jarg5_);
  public final static native boolean GiGraphics_drawPolygon__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, boolean jarg5);
  public final static native boolean GiGraphics_drawPolygon__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_);
  public final static native boolean GiGraphics_drawCircle__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, float jarg4, boolean jarg5);
  public final static native boolean GiGraphics_drawCircle__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, float jarg4);
  public final static native boolean GiGraphics_drawEllipse__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, float jarg4, float jarg5, boolean jarg6);
  public final static native boolean GiGraphics_drawEllipse__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, float jarg4, float jarg5);
  public final static native boolean GiGraphics_drawEllipse__SWIG_2(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Box2d jarg3_, boolean jarg4);
  public final static native boolean GiGraphics_drawEllipse__SWIG_3(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Box2d jarg3_);
  public final static native boolean GiGraphics_drawPie__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, float jarg4, float jarg5, float jarg6, float jarg7, boolean jarg8);
  public final static native boolean GiGraphics_drawPie__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native boolean GiGraphics_drawRect__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Box2d jarg3_, boolean jarg4);
  public final static native boolean GiGraphics_drawRect__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Box2d jarg3_);
  public final static native boolean GiGraphics_drawRoundRect__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Box2d jarg3_, float jarg4, float jarg5, boolean jarg6);
  public final static native boolean GiGraphics_drawRoundRect__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Box2d jarg3_, float jarg4, float jarg5);
  public final static native boolean GiGraphics_drawRoundRect__SWIG_2(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Box2d jarg3_, float jarg4);
  public final static native boolean GiGraphics_drawHermiteSplines__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, long jarg5, Vector2d jarg5_, boolean jarg6, boolean jarg7);
  public final static native boolean GiGraphics_drawHermiteSplines__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, long jarg5, Vector2d jarg5_, boolean jarg6);
  public final static native boolean GiGraphics_drawHermiteSplines__SWIG_2(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, long jarg5, Vector2d jarg5_);
  public final static native boolean GiGraphics_drawBSplines__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, boolean jarg5, boolean jarg6);
  public final static native boolean GiGraphics_drawBSplines__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, boolean jarg5);
  public final static native boolean GiGraphics_drawBSplines__SWIG_2(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_);
  public final static native boolean GiGraphics_drawQuadSplines__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, boolean jarg5, boolean jarg6);
  public final static native boolean GiGraphics_drawQuadSplines__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, boolean jarg5);
  public final static native boolean GiGraphics_drawQuadSplines__SWIG_2(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_);
  public final static native boolean GiGraphics_drawPath__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, MgPath jarg3_, boolean jarg4, boolean jarg5);
  public final static native boolean GiGraphics_drawPath__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, MgPath jarg3_, boolean jarg4);
  public final static native boolean GiGraphics_drawHandle__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, Point2d jarg2_, int jarg3, float jarg4, boolean jarg5);
  public final static native boolean GiGraphics_drawHandle__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, Point2d jarg2_, int jarg3, float jarg4);
  public final static native boolean GiGraphics_drawHandle__SWIG_2(long jarg1, GiGraphics jarg1_, long jarg2, Point2d jarg2_, int jarg3);
  public final static native float GiGraphics_drawTextAt__SWIG_0(long jarg1, GiGraphics jarg1_, int jarg2, String jarg3, long jarg4, Point2d jarg4_, float jarg5, int jarg6, float jarg7);
  public final static native float GiGraphics_drawTextAt__SWIG_1(long jarg1, GiGraphics jarg1_, int jarg2, String jarg3, long jarg4, Point2d jarg4_, float jarg5, int jarg6);
  public final static native float GiGraphics_drawTextAt__SWIG_2(long jarg1, GiGraphics jarg1_, int jarg2, String jarg3, long jarg4, Point2d jarg4_, float jarg5);
  public final static native boolean GiGraphics_beginPaint__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiCanvas jarg2_, long jarg3, RECT_2D jarg3_);
  public final static native boolean GiGraphics_beginPaint__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiCanvas jarg2_);
  public final static native void GiGraphics_endPaint(long jarg1, GiGraphics jarg1_);
  public final static native long new_GiSaveClipBox(long jarg1, GiGraphics jarg1_, long jarg2, Box2d jarg2_);
  public final static native void delete_GiSaveClipBox(long jarg1);
  public final static native boolean GiSaveClipBox_succeed(long jarg1, GiSaveClipBox jarg1_);
  public final static native void delete_Ints(long jarg1);
  public final static native long new_Ints__SWIG_0(int jarg1);
  public final static native long new_Ints__SWIG_1();
  public final static native void Ints_setSize(long jarg1, Ints jarg1_, int jarg2);
  public final static native long new_Ints__SWIG_2(int jarg1, int jarg2);
  public final static native long new_Ints__SWIG_3(int jarg1, int jarg2, int jarg3, int jarg4);
  public final static native int Ints_count(long jarg1, Ints jarg1_);
  public final static native int Ints_get(long jarg1, Ints jarg1_, int jarg2);
  public final static native void Ints_set__SWIG_0(long jarg1, Ints jarg1_, int jarg2, int jarg3);
  public final static native void Ints_set__SWIG_1(long jarg1, Ints jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native void delete_Longs(long jarg1);
  public final static native long new_Longs__SWIG_0(int jarg1);
  public final static native long new_Longs__SWIG_1();
  public final static native void Longs_setSize(long jarg1, Longs jarg1_, int jarg2);
  public final static native long new_Longs__SWIG_2(int jarg1, int jarg2);
  public final static native long new_Longs__SWIG_3(int jarg1, int jarg2, int jarg3, int jarg4);
  public final static native int Longs_count(long jarg1, Longs jarg1_);
  public final static native int Longs_get(long jarg1, Longs jarg1_, int jarg2);
  public final static native void Longs_set__SWIG_0(long jarg1, Longs jarg1_, int jarg2, int jarg3);
  public final static native void Longs_set__SWIG_1(long jarg1, Longs jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native void delete_Floats(long jarg1);
  public final static native long new_Floats__SWIG_0(int jarg1);
  public final static native long new_Floats__SWIG_1();
  public final static native void Floats_setSize(long jarg1, Floats jarg1_, int jarg2);
  public final static native long new_Floats__SWIG_2(float jarg1, float jarg2);
  public final static native long new_Floats__SWIG_3(float jarg1, float jarg2, float jarg3, float jarg4);
  public final static native int Floats_count(long jarg1, Floats jarg1_);
  public final static native float Floats_get(long jarg1, Floats jarg1_, int jarg2);
  public final static native void Floats_set__SWIG_0(long jarg1, Floats jarg1_, int jarg2, float jarg3);
  public final static native void Floats_set__SWIG_1(long jarg1, Floats jarg1_, int jarg2, float jarg3, float jarg4);
  public final static native void delete_Chars(long jarg1);
  public final static native long new_Chars__SWIG_0(int jarg1);
  public final static native long new_Chars__SWIG_1();
  public final static native void Chars_setSize(long jarg1, Chars jarg1_, int jarg2);
  public final static native long new_Chars__SWIG_2(char jarg1, char jarg2);
  public final static native long new_Chars__SWIG_3(char jarg1, char jarg2, char jarg3, char jarg4);
  public final static native int Chars_count(long jarg1, Chars jarg1_);
  public final static native char Chars_get(long jarg1, Chars jarg1_, int jarg2);
  public final static native void Chars_set__SWIG_0(long jarg1, Chars jarg1_, int jarg2, char jarg3);
  public final static native void Chars_set__SWIG_1(long jarg1, Chars jarg1_, int jarg2, char jarg3, char jarg4);
  public final static native void delete_ConstShapes(long jarg1);
  public final static native long new_ConstShapes__SWIG_0(int jarg1);
  public final static native long new_ConstShapes__SWIG_1();
  public final static native void ConstShapes_setSize(long jarg1, ConstShapes jarg1_, int jarg2);
  public final static native long new_ConstShapes__SWIG_2(long jarg1, MgShape jarg1_, long jarg2, MgShape jarg2_);
  public final static native long new_ConstShapes__SWIG_3(long jarg1, MgShape jarg1_, long jarg2, MgShape jarg2_, long jarg3, MgShape jarg3_, long jarg4, MgShape jarg4_);
  public final static native int ConstShapes_count(long jarg1, ConstShapes jarg1_);
  public final static native long ConstShapes_get(long jarg1, ConstShapes jarg1_, int jarg2);
  public final static native void ConstShapes_set__SWIG_0(long jarg1, ConstShapes jarg1_, int jarg2, long jarg3, MgShape jarg3_);
  public final static native void ConstShapes_set__SWIG_1(long jarg1, ConstShapes jarg1_, int jarg2, long jarg3, MgShape jarg3_, long jarg4, MgShape jarg4_);
  public final static native void delete_Shapes(long jarg1);
  public final static native long new_Shapes__SWIG_0(int jarg1);
  public final static native long new_Shapes__SWIG_1();
  public final static native void Shapes_setSize(long jarg1, Shapes jarg1_, int jarg2);
  public final static native long new_Shapes__SWIG_2(long jarg1, MgShape jarg1_, long jarg2, MgShape jarg2_);
  public final static native long new_Shapes__SWIG_3(long jarg1, MgShape jarg1_, long jarg2, MgShape jarg2_, long jarg3, MgShape jarg3_, long jarg4, MgShape jarg4_);
  public final static native int Shapes_count(long jarg1, Shapes jarg1_);
  public final static native long Shapes_get(long jarg1, Shapes jarg1_, int jarg2);
  public final static native void Shapes_set__SWIG_0(long jarg1, Shapes jarg1_, int jarg2, long jarg3, MgShape jarg3_);
  public final static native void Shapes_set__SWIG_1(long jarg1, Shapes jarg1_, int jarg2, long jarg3, MgShape jarg3_, long jarg4, MgShape jarg4_);
  public final static native void delete_MgStorage(long jarg1);
  public final static native boolean MgStorage_readNode(long jarg1, MgStorage jarg1_, String jarg2, int jarg3, boolean jarg4);
  public final static native boolean MgStorage_writeNode(long jarg1, MgStorage jarg1_, String jarg2, int jarg3, boolean jarg4);
  public final static native boolean MgStorage_readBool(long jarg1, MgStorage jarg1_, String jarg2, boolean jarg3);
  public final static native float MgStorage_readFloat(long jarg1, MgStorage jarg1_, String jarg2, float jarg3);
  public final static native double MgStorage_readDouble(long jarg1, MgStorage jarg1_, String jarg2, double jarg3);
  public final static native void MgStorage_writeBool(long jarg1, MgStorage jarg1_, String jarg2, boolean jarg3);
  public final static native void MgStorage_writeFloat(long jarg1, MgStorage jarg1_, String jarg2, float jarg3);
  public final static native void MgStorage_writeDouble(long jarg1, MgStorage jarg1_, String jarg2, double jarg3);
  public final static native void MgStorage_writeString(long jarg1, MgStorage jarg1_, String jarg2, String jarg3);
  public final static native int MgStorage_readFloatArray(long jarg1, MgStorage jarg1_, String jarg2);
  public final static native int MgStorage_readIntArray(long jarg1, MgStorage jarg1_, String jarg2);
  public final static native int MgStorage_readString(long jarg1, MgStorage jarg1_, String jarg2);
  public final static native int MgStorage_readInt(long jarg1, MgStorage jarg1_, String jarg2, int jarg3);
  public final static native void MgStorage_writeInt(long jarg1, MgStorage jarg1_, String jarg2, int jarg3);
  public final static native void MgStorage_writeUInt(long jarg1, MgStorage jarg1_, String jarg2, int jarg3);
  public final static native boolean MgStorage_setError(long jarg1, MgStorage jarg1_, String jarg2);
  public final static native long new_MgJsonFile(String jarg1, boolean jarg2);
  public final static native void delete_MgJsonFile(long jarg1);
  public final static native boolean MgJsonFile_opened(long jarg1, MgJsonFile jarg1_);
  public final static native void MgJsonFile_close(long jarg1, MgJsonFile jarg1_);
  public final static native long new_MgJsonStorage();
  public final static native void delete_MgJsonStorage(long jarg1);
  public final static native long MgJsonStorage_storageForRead__SWIG_0(long jarg1, MgJsonStorage jarg1_, String jarg2);
  public final static native long MgJsonStorage_storageForWrite(long jarg1, MgJsonStorage jarg1_);
  public final static native long MgJsonStorage_storageForRead__SWIG_1(long jarg1, MgJsonStorage jarg1_, long jarg2, MgJsonFile jarg2_);
  public final static native boolean MgJsonStorage_save__SWIG_0(long jarg1, MgJsonStorage jarg1_, long jarg2, MgJsonFile jarg2_, boolean jarg3);
  public final static native boolean MgJsonStorage_save__SWIG_1(long jarg1, MgJsonStorage jarg1_, long jarg2, MgJsonFile jarg2_);
  public final static native String MgJsonStorage_stringify__SWIG_0(long jarg1, MgJsonStorage jarg1_, boolean jarg2);
  public final static native String MgJsonStorage_stringify__SWIG_1(long jarg1, MgJsonStorage jarg1_);
  public final static native void MgJsonStorage_clear(long jarg1, MgJsonStorage jarg1_);
  public final static native String MgJsonStorage_getParseError(long jarg1, MgJsonStorage jarg1_);
  public final static native void MgJsonStorage_setArrayMode(long jarg1, MgJsonStorage jarg1_, boolean jarg2);
  public final static native void MgJsonStorage_saveNumberAsString(long jarg1, MgJsonStorage jarg1_, boolean jarg2);
  public final static native boolean MgJsonStorage_toUTF8(String jarg1, String jarg2);
  public final static native boolean MgJsonStorage_toUTF16(String jarg1, String jarg2);
  public final static native long MgObject_clone(long jarg1, MgObject jarg1_);
  public final static native void MgObject_copy(long jarg1, MgObject jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgObject_release(long jarg1, MgObject jarg1_);
  public final static native void MgObject_addRef(long jarg1, MgObject jarg1_);
  public final static native boolean MgObject_equals(long jarg1, MgObject jarg1_, long jarg2, MgObject jarg2_);
  public final static native int MgObject_getType(long jarg1, MgObject jarg1_);
  public final static native boolean MgObject_isKindOf(long jarg1, MgObject jarg1_, int jarg2);
  public final static native long new_MgObject();
  public final static native void MgObject_director_connect(MgObject obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void MgObject_change_ownership(MgObject obj, long cptr, boolean take_or_release);
  public final static native void MgHitResult_nearpt_set(long jarg1, MgHitResult jarg1_, long jarg2, Point2d jarg2_);
  public final static native long MgHitResult_nearpt_get(long jarg1, MgHitResult jarg1_);
  public final static native void MgHitResult_segment_set(long jarg1, MgHitResult jarg1_, int jarg2);
  public final static native int MgHitResult_segment_get(long jarg1, MgHitResult jarg1_);
  public final static native void MgHitResult_inside_set(long jarg1, MgHitResult jarg1_, boolean jarg2);
  public final static native boolean MgHitResult_inside_get(long jarg1, MgHitResult jarg1_);
  public final static native void MgHitResult_contained_set(long jarg1, MgHitResult jarg1_, boolean jarg2);
  public final static native boolean MgHitResult_contained_get(long jarg1, MgHitResult jarg1_);
  public final static native void MgHitResult_dist_set(long jarg1, MgHitResult jarg1_, float jarg2);
  public final static native float MgHitResult_dist_get(long jarg1, MgHitResult jarg1_);
  public final static native void MgHitResult_mask_set(long jarg1, MgHitResult jarg1_, int jarg2);
  public final static native int MgHitResult_mask_get(long jarg1, MgHitResult jarg1_);
  public final static native void MgHitResult_ignoreHandle_set(long jarg1, MgHitResult jarg1_, int jarg2);
  public final static native int MgHitResult_ignoreHandle_get(long jarg1, MgHitResult jarg1_);
  public final static native long new_MgHitResult();
  public final static native boolean MgHitResult_snapVertexEnabled(long jarg1, MgHitResult jarg1_);
  public final static native boolean MgHitResult_snapEdgeEnabled(long jarg1, MgHitResult jarg1_);
  public final static native void MgHitResult_disnableSnapVertex(long jarg1, MgHitResult jarg1_);
  public final static native void MgHitResult_disnableSnapEdge(long jarg1, MgHitResult jarg1_);
  public final static native void delete_MgHitResult(long jarg1);
  public final static native long new_MgBaseShape();
  public final static native void delete_MgBaseShape(long jarg1);
  public final static native int MgBaseShape_Type();
  public final static native long MgBaseShape_minTol();
  public final static native int MgBaseShape_toHandle(long jarg1, MgBaseShape jarg1_);
  public final static native long MgBaseShape_cloneShape(long jarg1, MgBaseShape jarg1_);
  public final static native long MgBaseShape_getExtent(long jarg1, MgBaseShape jarg1_);
  public final static native long MgBaseShape_getExtentSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_);
  public final static native int MgBaseShape_getChangeCount(long jarg1, MgBaseShape jarg1_);
  public final static native int MgBaseShape_getChangeCountSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_);
  public final static native void MgBaseShape_resetChangeCount(long jarg1, MgBaseShape jarg1_, int jarg2);
  public final static native void MgBaseShape_resetChangeCountSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_, int jarg2);
  public final static native void MgBaseShape_afterChanged(long jarg1, MgBaseShape jarg1_);
  public final static native void MgBaseShape_afterChangedSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_);
  public final static native void MgBaseShape_update(long jarg1, MgBaseShape jarg1_);
  public final static native void MgBaseShape_updateSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_);
  public final static native void MgBaseShape_transform(long jarg1, MgBaseShape jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native void MgBaseShape_transformSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native void MgBaseShape_clear(long jarg1, MgBaseShape jarg1_);
  public final static native void MgBaseShape_clearSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_);
  public final static native void MgBaseShape_clearCachedData(long jarg1, MgBaseShape jarg1_);
  public final static native void MgBaseShape_clearCachedDataSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_);
  public final static native int MgBaseShape_getPointCount(long jarg1, MgBaseShape jarg1_);
  public final static native long MgBaseShape_getPoint(long jarg1, MgBaseShape jarg1_, int jarg2);
  public final static native void MgBaseShape_setPoint(long jarg1, MgBaseShape jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean MgBaseShape_isClosed(long jarg1, MgBaseShape jarg1_);
  public final static native boolean MgBaseShape_isClosedSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_);
  public final static native boolean MgBaseShape_isCurve(long jarg1, MgBaseShape jarg1_);
  public final static native boolean MgBaseShape_isCurveSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_);
  public final static native float MgBaseShape_hitTest(long jarg1, MgBaseShape jarg1_, long jarg2, Point2d jarg2_, float jarg3, long jarg4, MgHitResult jarg4_);
  public final static native float MgBaseShape_hitTest2(long jarg1, MgBaseShape jarg1_, long jarg2, Point2d jarg2_, float jarg3, long jarg4, Point2d jarg4_);
  public final static native boolean MgBaseShape_hitTestBox(long jarg1, MgBaseShape jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean MgBaseShape_hitTestBoxSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean MgBaseShape_draw(long jarg1, MgBaseShape jarg1_, int jarg2, long jarg3, GiGraphics jarg3_, long jarg4, GiContext jarg4_, int jarg5);
  public final static native boolean MgBaseShape_drawSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_, int jarg2, long jarg3, GiGraphics jarg3_, long jarg4, GiContext jarg4_, int jarg5);
  public final static native boolean MgBaseShape_draw2(long jarg1, MgBaseShape jarg1_, long jarg2, MgObject jarg2_, int jarg3, long jarg4, GiGraphics jarg4_, long jarg5, GiContext jarg5_, int jarg6);
  public final static native boolean MgBaseShape_draw2SwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_, long jarg2, MgObject jarg2_, int jarg3, long jarg4, GiGraphics jarg4_, long jarg5, GiContext jarg5_, int jarg6);
  public final static native void MgBaseShape_output(long jarg1, MgBaseShape jarg1_, long jarg2, MgPath jarg2_);
  public final static native long MgBaseShape_getPath(long jarg1, MgBaseShape jarg1_);
  public final static native boolean MgBaseShape_save(long jarg1, MgBaseShape jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgBaseShape_saveSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgBaseShape_load(long jarg1, MgBaseShape jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_);
  public final static native boolean MgBaseShape_loadSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_);
  public final static native int MgBaseShape_getHandleCount(long jarg1, MgBaseShape jarg1_);
  public final static native int MgBaseShape_getHandleCountSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_);
  public final static native long MgBaseShape_getHandlePoint(long jarg1, MgBaseShape jarg1_, int jarg2);
  public final static native long MgBaseShape_getHandlePointSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_, int jarg2);
  public final static native boolean MgBaseShape_setHandlePoint(long jarg1, MgBaseShape jarg1_, int jarg2, long jarg3, Point2d jarg3_, float jarg4);
  public final static native boolean MgBaseShape_setHandlePointSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_, int jarg2, long jarg3, Point2d jarg3_, float jarg4);
  public final static native boolean MgBaseShape_isHandleFixed(long jarg1, MgBaseShape jarg1_, int jarg2);
  public final static native boolean MgBaseShape_isHandleFixedSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_, int jarg2);
  public final static native int MgBaseShape_getHandleType(long jarg1, MgBaseShape jarg1_, int jarg2);
  public final static native int MgBaseShape_getHandleTypeSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_, int jarg2);
  public final static native boolean MgBaseShape_offset(long jarg1, MgBaseShape jarg1_, long jarg2, Vector2d jarg2_, int jarg3);
  public final static native boolean MgBaseShape_offsetSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_, long jarg2, Vector2d jarg2_, int jarg3);
  public final static native boolean MgBaseShape_getFlag(long jarg1, MgBaseShape jarg1_, int jarg2);
  public final static native void MgBaseShape_setFlag(long jarg1, MgBaseShape jarg1_, int jarg2, boolean jarg3);
  public final static native void MgBaseShape_setFlagSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_, int jarg2, boolean jarg3);
  public final static native void MgBaseShape_copy(long jarg1, MgBaseShape jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgBaseShape_copySwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_, long jarg2, MgObject jarg2_);
  public final static native boolean MgBaseShape_equals(long jarg1, MgBaseShape jarg1_, long jarg2, MgObject jarg2_);
  public final static native boolean MgBaseShape_equalsSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_, long jarg2, MgObject jarg2_);
  public final static native boolean MgBaseShape_isKindOf(long jarg1, MgBaseShape jarg1_, int jarg2);
  public final static native boolean MgBaseShape_isKindOfSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_, int jarg2);
  public final static native void MgBaseShape_addRef(long jarg1, MgBaseShape jarg1_);
  public final static native void MgBaseShape_addRefSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_);
  public final static native void MgBaseShape_setExtent(long jarg1, MgBaseShape jarg1_, long jarg2, Box2d jarg2_);
  public final static native void MgBaseShape_setOwner(long jarg1, MgBaseShape jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgBaseShape_setOwnerSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_, long jarg2, MgObject jarg2_);
  public final static native int MgBaseShape_getSubType(long jarg1, MgBaseShape jarg1_);
  public final static native int MgBaseShape_getSubTypeSwigExplicitMgBaseShape(long jarg1, MgBaseShape jarg1_);
  public final static native boolean MgBaseShape_isVisible(long jarg1, MgBaseShape jarg1_);
  public final static native boolean MgBaseShape_isLocked(long jarg1, MgBaseShape jarg1_);
  public final static native float MgBaseShape_linesHit(int jarg1, long jarg2, Point2d jarg2_, boolean jarg3, long jarg4, Point2d jarg4_, float jarg5, long jarg6, MgHitResult jarg6_);
  public final static native void MgBaseShape_director_connect(MgBaseShape obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void MgBaseShape_change_ownership(MgBaseShape obj, long cptr, boolean take_or_release);
  public final static native int MgBaseRect_Type();
  public final static native long MgBaseRect_getCenter(long jarg1, MgBaseRect jarg1_);
  public final static native long MgBaseRect_getRect(long jarg1, MgBaseRect jarg1_);
  public final static native float MgBaseRect_getWidth(long jarg1, MgBaseRect jarg1_);
  public final static native float MgBaseRect_getHeight(long jarg1, MgBaseRect jarg1_);
  public final static native float MgBaseRect_getDiagonalLength(long jarg1, MgBaseRect jarg1_);
  public final static native float MgBaseRect_getAngle(long jarg1, MgBaseRect jarg1_);
  public final static native boolean MgBaseRect_isEmpty(long jarg1, MgBaseRect jarg1_, float jarg2);
  public final static native boolean MgBaseRect_isOrtho(long jarg1, MgBaseRect jarg1_);
  public final static native void MgBaseRect_setRect2P(long jarg1, MgBaseRect jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native void MgBaseRect_setRectWithAngle(long jarg1, MgBaseRect jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, float jarg4, long jarg5, Point2d jarg5_);
  public final static native void MgBaseRect_setRect4P(long jarg1, MgBaseRect jarg1_, long jarg2, Point2d jarg2_);
  public final static native boolean MgBaseRect_transformWith2P(long jarg1, MgBaseRect jarg1_, long jarg2, Point2d jarg2_, int jarg3, long jarg4, Point2d jarg4_, int jarg5);
  public final static native void MgBaseRect_setCenter(long jarg1, MgBaseRect jarg1_, long jarg2, Point2d jarg2_);
  public final static native void MgBaseRect_setSquare(long jarg1, MgBaseRect jarg1_, boolean jarg2);
  public final static native long new_MgBaseRect();
  public final static native void delete_MgBaseRect(long jarg1);
  public final static native void MgBaseRect_director_connect(MgBaseRect obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void MgBaseRect_change_ownership(MgBaseRect obj, long cptr, boolean take_or_release);
  public final static native long new_MgRect();
  public final static native void delete_MgRect(long jarg1);
  public final static native long MgRect_create();
  public final static native int MgRect_Type();
  public final static native long MgRect_cast(long jarg1, MgBaseShape jarg1_);
  public final static native long MgRect_fromHandle(int jarg1);
  public final static native long MgRect_clone(long jarg1, MgRect jarg1_);
  public final static native void MgRect_copy(long jarg1, MgRect jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgRect_release(long jarg1, MgRect jarg1_);
  public final static native boolean MgRect_equals(long jarg1, MgRect jarg1_, long jarg2, MgObject jarg2_);
  public final static native int MgRect_getType(long jarg1, MgRect jarg1_);
  public final static native boolean MgRect_isKindOf(long jarg1, MgRect jarg1_, int jarg2);
  public final static native long MgRect_getExtent(long jarg1, MgRect jarg1_);
  public final static native void MgRect_update(long jarg1, MgRect jarg1_);
  public final static native void MgRect_transform(long jarg1, MgRect jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native void MgRect_clear(long jarg1, MgRect jarg1_);
  public final static native void MgRect_clearCachedData(long jarg1, MgRect jarg1_);
  public final static native int MgRect_getPointCount(long jarg1, MgRect jarg1_);
  public final static native long MgRect_getPoint(long jarg1, MgRect jarg1_, int jarg2);
  public final static native void MgRect_setPoint(long jarg1, MgRect jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean MgRect_isClosed(long jarg1, MgRect jarg1_);
  public final static native boolean MgRect_hitTestBox(long jarg1, MgRect jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean MgRect_draw(long jarg1, MgRect jarg1_, int jarg2, long jarg3, GiGraphics jarg3_, long jarg4, GiContext jarg4_, int jarg5);
  public final static native void MgRect_output(long jarg1, MgRect jarg1_, long jarg2, MgPath jarg2_);
  public final static native boolean MgRect_save(long jarg1, MgRect jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgRect_load(long jarg1, MgRect jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_);
  public final static native int MgRect_getHandleCount(long jarg1, MgRect jarg1_);
  public final static native long MgRect_getHandlePoint(long jarg1, MgRect jarg1_, int jarg2);
  public final static native boolean MgRect_setHandlePoint(long jarg1, MgRect jarg1_, int jarg2, long jarg3, Point2d jarg3_, float jarg4);
  public final static native boolean MgRect_isHandleFixed(long jarg1, MgRect jarg1_, int jarg2);
  public final static native int MgRect_getHandleType(long jarg1, MgRect jarg1_, int jarg2);
  public final static native boolean MgRect_offset(long jarg1, MgRect jarg1_, long jarg2, Vector2d jarg2_, int jarg3);
  public final static native float MgRect_hitTest(long jarg1, MgRect jarg1_, long jarg2, Point2d jarg2_, float jarg3, long jarg4, MgHitResult jarg4_);
  public final static native int MgBaseLines_Type();
  public final static native void MgBaseLines_setClosed(long jarg1, MgBaseLines jarg1_, boolean jarg2);
  public final static native long MgBaseLines_endPoint(long jarg1, MgBaseLines jarg1_);
  public final static native boolean MgBaseLines_resize(long jarg1, MgBaseLines jarg1_, int jarg2);
  public final static native boolean MgBaseLines_resizeSwigExplicitMgBaseLines(long jarg1, MgBaseLines jarg1_, int jarg2);
  public final static native boolean MgBaseLines_addPoint(long jarg1, MgBaseLines jarg1_, long jarg2, Point2d jarg2_);
  public final static native boolean MgBaseLines_addPointSwigExplicitMgBaseLines(long jarg1, MgBaseLines jarg1_, long jarg2, Point2d jarg2_);
  public final static native boolean MgBaseLines_insertPoint(long jarg1, MgBaseLines jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean MgBaseLines_insertPointSwigExplicitMgBaseLines(long jarg1, MgBaseLines jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean MgBaseLines_removePoint(long jarg1, MgBaseLines jarg1_, int jarg2);
  public final static native boolean MgBaseLines_removePointSwigExplicitMgBaseLines(long jarg1, MgBaseLines jarg1_, int jarg2);
  public final static native int MgBaseLines_maxEdgeIndex(long jarg1, MgBaseLines jarg1_);
  public final static native boolean MgBaseLines_isIncrementFrom(long jarg1, MgBaseLines jarg1_, long jarg2, MgBaseLines jarg2_);
  public final static native long new_MgBaseLines();
  public final static native void MgBaseLines_director_connect(MgBaseLines obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void MgBaseLines_change_ownership(MgBaseLines obj, long cptr, boolean take_or_release);
  public final static native long new_MgLines();
  public final static native void delete_MgLines(long jarg1);
  public final static native long MgLines_create();
  public final static native int MgLines_Type();
  public final static native long MgLines_cast(long jarg1, MgBaseShape jarg1_);
  public final static native long MgLines_fromHandle(int jarg1);
  public final static native long MgLines_clone(long jarg1, MgLines jarg1_);
  public final static native void MgLines_copy(long jarg1, MgLines jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgLines_release(long jarg1, MgLines jarg1_);
  public final static native boolean MgLines_equals(long jarg1, MgLines jarg1_, long jarg2, MgObject jarg2_);
  public final static native int MgLines_getType(long jarg1, MgLines jarg1_);
  public final static native boolean MgLines_isKindOf(long jarg1, MgLines jarg1_, int jarg2);
  public final static native long MgLines_getExtent(long jarg1, MgLines jarg1_);
  public final static native void MgLines_update(long jarg1, MgLines jarg1_);
  public final static native void MgLines_transform(long jarg1, MgLines jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native void MgLines_clear(long jarg1, MgLines jarg1_);
  public final static native void MgLines_clearCachedData(long jarg1, MgLines jarg1_);
  public final static native int MgLines_getPointCount(long jarg1, MgLines jarg1_);
  public final static native long MgLines_getPoint(long jarg1, MgLines jarg1_, int jarg2);
  public final static native void MgLines_setPoint(long jarg1, MgLines jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean MgLines_isClosed(long jarg1, MgLines jarg1_);
  public final static native boolean MgLines_hitTestBox(long jarg1, MgLines jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean MgLines_draw(long jarg1, MgLines jarg1_, int jarg2, long jarg3, GiGraphics jarg3_, long jarg4, GiContext jarg4_, int jarg5);
  public final static native void MgLines_output(long jarg1, MgLines jarg1_, long jarg2, MgPath jarg2_);
  public final static native boolean MgLines_save(long jarg1, MgLines jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgLines_load(long jarg1, MgLines jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_);
  public final static native int MgLines_getHandleCount(long jarg1, MgLines jarg1_);
  public final static native long MgLines_getHandlePoint(long jarg1, MgLines jarg1_, int jarg2);
  public final static native boolean MgLines_setHandlePoint(long jarg1, MgLines jarg1_, int jarg2, long jarg3, Point2d jarg3_, float jarg4);
  public final static native boolean MgLines_isHandleFixed(long jarg1, MgLines jarg1_, int jarg2);
  public final static native int MgLines_getHandleType(long jarg1, MgLines jarg1_, int jarg2);
  public final static native boolean MgLines_offset(long jarg1, MgLines jarg1_, long jarg2, Vector2d jarg2_, int jarg3);
  public final static native float MgLines_hitTest(long jarg1, MgLines jarg1_, long jarg2, Point2d jarg2_, float jarg3, long jarg4, MgHitResult jarg4_);
  public final static native long new_MgCoreShapeFactory();
  public final static native void delete_MgCoreShapeFactory(long jarg1);
  public final static native long MgCoreShapeFactory_createShape(long jarg1, MgCoreShapeFactory jarg1_, int jarg2);
  public final static native long new_MgArc();
  public final static native void delete_MgArc(long jarg1);
  public final static native long MgArc_create();
  public final static native int MgArc_Type();
  public final static native long MgArc_cast(long jarg1, MgBaseShape jarg1_);
  public final static native long MgArc_fromHandle(int jarg1);
  public final static native long MgArc_clone(long jarg1, MgArc jarg1_);
  public final static native void MgArc_copy(long jarg1, MgArc jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgArc_release(long jarg1, MgArc jarg1_);
  public final static native boolean MgArc_equals(long jarg1, MgArc jarg1_, long jarg2, MgObject jarg2_);
  public final static native int MgArc_getType(long jarg1, MgArc jarg1_);
  public final static native boolean MgArc_isKindOf(long jarg1, MgArc jarg1_, int jarg2);
  public final static native long MgArc_getExtent(long jarg1, MgArc jarg1_);
  public final static native void MgArc_update(long jarg1, MgArc jarg1_);
  public final static native void MgArc_transform(long jarg1, MgArc jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native void MgArc_clear(long jarg1, MgArc jarg1_);
  public final static native void MgArc_clearCachedData(long jarg1, MgArc jarg1_);
  public final static native int MgArc_getPointCount(long jarg1, MgArc jarg1_);
  public final static native long MgArc_getPoint(long jarg1, MgArc jarg1_, int jarg2);
  public final static native void MgArc_setPoint(long jarg1, MgArc jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean MgArc_isClosed(long jarg1, MgArc jarg1_);
  public final static native boolean MgArc_hitTestBox(long jarg1, MgArc jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean MgArc_draw(long jarg1, MgArc jarg1_, int jarg2, long jarg3, GiGraphics jarg3_, long jarg4, GiContext jarg4_, int jarg5);
  public final static native void MgArc_output(long jarg1, MgArc jarg1_, long jarg2, MgPath jarg2_);
  public final static native boolean MgArc_save(long jarg1, MgArc jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgArc_load(long jarg1, MgArc jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_);
  public final static native int MgArc_getHandleCount(long jarg1, MgArc jarg1_);
  public final static native long MgArc_getHandlePoint(long jarg1, MgArc jarg1_, int jarg2);
  public final static native boolean MgArc_setHandlePoint(long jarg1, MgArc jarg1_, int jarg2, long jarg3, Point2d jarg3_, float jarg4);
  public final static native boolean MgArc_isHandleFixed(long jarg1, MgArc jarg1_, int jarg2);
  public final static native int MgArc_getHandleType(long jarg1, MgArc jarg1_, int jarg2);
  public final static native boolean MgArc_offset(long jarg1, MgArc jarg1_, long jarg2, Vector2d jarg2_, int jarg3);
  public final static native float MgArc_hitTest(long jarg1, MgArc jarg1_, long jarg2, Point2d jarg2_, float jarg3, long jarg4, MgHitResult jarg4_);
  public final static native long MgArc_getCenter(long jarg1, MgArc jarg1_);
  public final static native long MgArc_getStartPoint(long jarg1, MgArc jarg1_);
  public final static native long MgArc_getEndPoint(long jarg1, MgArc jarg1_);
  public final static native long MgArc_getMidPoint(long jarg1, MgArc jarg1_);
  public final static native float MgArc_getRadius(long jarg1, MgArc jarg1_);
  public final static native float MgArc_getStartAngle(long jarg1, MgArc jarg1_);
  public final static native float MgArc_getEndAngle(long jarg1, MgArc jarg1_);
  public final static native float MgArc_getSweepAngle(long jarg1, MgArc jarg1_);
  public final static native long MgArc_getStartTangent(long jarg1, MgArc jarg1_);
  public final static native long MgArc_getEndTangent(long jarg1, MgArc jarg1_);
  public final static native boolean MgArc_setStartMidEnd(long jarg1, MgArc jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native boolean MgArc_setCenterStartEnd__SWIG_0(long jarg1, MgArc jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native boolean MgArc_setCenterStartEnd__SWIG_1(long jarg1, MgArc jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native boolean MgArc_setTanStartEnd(long jarg1, MgArc jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native boolean MgArc_setCenterRadius(long jarg1, MgArc jarg1_, long jarg2, Point2d jarg2_, float jarg3, float jarg4, float jarg5);
  public final static native void MgArc_setSubType(long jarg1, MgArc jarg1_, int jarg2);
  public final static native long new_MgDiamond();
  public final static native void delete_MgDiamond(long jarg1);
  public final static native long MgDiamond_create();
  public final static native int MgDiamond_Type();
  public final static native long MgDiamond_cast(long jarg1, MgBaseShape jarg1_);
  public final static native long MgDiamond_fromHandle(int jarg1);
  public final static native long MgDiamond_clone(long jarg1, MgDiamond jarg1_);
  public final static native void MgDiamond_copy(long jarg1, MgDiamond jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgDiamond_release(long jarg1, MgDiamond jarg1_);
  public final static native boolean MgDiamond_equals(long jarg1, MgDiamond jarg1_, long jarg2, MgObject jarg2_);
  public final static native int MgDiamond_getType(long jarg1, MgDiamond jarg1_);
  public final static native boolean MgDiamond_isKindOf(long jarg1, MgDiamond jarg1_, int jarg2);
  public final static native long MgDiamond_getExtent(long jarg1, MgDiamond jarg1_);
  public final static native void MgDiamond_update(long jarg1, MgDiamond jarg1_);
  public final static native void MgDiamond_transform(long jarg1, MgDiamond jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native void MgDiamond_clear(long jarg1, MgDiamond jarg1_);
  public final static native void MgDiamond_clearCachedData(long jarg1, MgDiamond jarg1_);
  public final static native int MgDiamond_getPointCount(long jarg1, MgDiamond jarg1_);
  public final static native long MgDiamond_getPoint(long jarg1, MgDiamond jarg1_, int jarg2);
  public final static native void MgDiamond_setPoint(long jarg1, MgDiamond jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean MgDiamond_isClosed(long jarg1, MgDiamond jarg1_);
  public final static native boolean MgDiamond_hitTestBox(long jarg1, MgDiamond jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean MgDiamond_draw(long jarg1, MgDiamond jarg1_, int jarg2, long jarg3, GiGraphics jarg3_, long jarg4, GiContext jarg4_, int jarg5);
  public final static native void MgDiamond_output(long jarg1, MgDiamond jarg1_, long jarg2, MgPath jarg2_);
  public final static native boolean MgDiamond_save(long jarg1, MgDiamond jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgDiamond_load(long jarg1, MgDiamond jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_);
  public final static native int MgDiamond_getHandleCount(long jarg1, MgDiamond jarg1_);
  public final static native long MgDiamond_getHandlePoint(long jarg1, MgDiamond jarg1_, int jarg2);
  public final static native boolean MgDiamond_setHandlePoint(long jarg1, MgDiamond jarg1_, int jarg2, long jarg3, Point2d jarg3_, float jarg4);
  public final static native boolean MgDiamond_isHandleFixed(long jarg1, MgDiamond jarg1_, int jarg2);
  public final static native int MgDiamond_getHandleType(long jarg1, MgDiamond jarg1_, int jarg2);
  public final static native boolean MgDiamond_offset(long jarg1, MgDiamond jarg1_, long jarg2, Vector2d jarg2_, int jarg3);
  public final static native float MgDiamond_hitTest(long jarg1, MgDiamond jarg1_, long jarg2, Point2d jarg2_, float jarg3, long jarg4, MgHitResult jarg4_);
  public final static native long new_MgDot();
  public final static native void delete_MgDot(long jarg1);
  public final static native long MgDot_create();
  public final static native int MgDot_Type();
  public final static native long MgDot_cast(long jarg1, MgBaseShape jarg1_);
  public final static native long MgDot_fromHandle(int jarg1);
  public final static native long MgDot_clone(long jarg1, MgDot jarg1_);
  public final static native void MgDot_copy(long jarg1, MgDot jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgDot_release(long jarg1, MgDot jarg1_);
  public final static native boolean MgDot_equals(long jarg1, MgDot jarg1_, long jarg2, MgObject jarg2_);
  public final static native int MgDot_getType(long jarg1, MgDot jarg1_);
  public final static native boolean MgDot_isKindOf(long jarg1, MgDot jarg1_, int jarg2);
  public final static native long MgDot_getExtent(long jarg1, MgDot jarg1_);
  public final static native void MgDot_update(long jarg1, MgDot jarg1_);
  public final static native void MgDot_transform(long jarg1, MgDot jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native void MgDot_clear(long jarg1, MgDot jarg1_);
  public final static native void MgDot_clearCachedData(long jarg1, MgDot jarg1_);
  public final static native int MgDot_getPointCount(long jarg1, MgDot jarg1_);
  public final static native long MgDot_getPoint(long jarg1, MgDot jarg1_, int jarg2);
  public final static native void MgDot_setPoint(long jarg1, MgDot jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean MgDot_isClosed(long jarg1, MgDot jarg1_);
  public final static native boolean MgDot_hitTestBox(long jarg1, MgDot jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean MgDot_draw(long jarg1, MgDot jarg1_, int jarg2, long jarg3, GiGraphics jarg3_, long jarg4, GiContext jarg4_, int jarg5);
  public final static native void MgDot_output(long jarg1, MgDot jarg1_, long jarg2, MgPath jarg2_);
  public final static native boolean MgDot_save(long jarg1, MgDot jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgDot_load(long jarg1, MgDot jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_);
  public final static native int MgDot_getHandleCount(long jarg1, MgDot jarg1_);
  public final static native long MgDot_getHandlePoint(long jarg1, MgDot jarg1_, int jarg2);
  public final static native boolean MgDot_setHandlePoint(long jarg1, MgDot jarg1_, int jarg2, long jarg3, Point2d jarg3_, float jarg4);
  public final static native boolean MgDot_isHandleFixed(long jarg1, MgDot jarg1_, int jarg2);
  public final static native int MgDot_getHandleType(long jarg1, MgDot jarg1_, int jarg2);
  public final static native boolean MgDot_offset(long jarg1, MgDot jarg1_, long jarg2, Vector2d jarg2_, int jarg3);
  public final static native float MgDot_hitTest(long jarg1, MgDot jarg1_, long jarg2, Point2d jarg2_, float jarg3, long jarg4, MgHitResult jarg4_);
  public final static native int MgDot_getPointType(long jarg1, MgDot jarg1_);
  public final static native void MgDot_setPointType(long jarg1, MgDot jarg1_, int jarg2);
  public final static native long new_MgEllipse();
  public final static native void delete_MgEllipse(long jarg1);
  public final static native long MgEllipse_create();
  public final static native int MgEllipse_Type();
  public final static native long MgEllipse_cast(long jarg1, MgBaseShape jarg1_);
  public final static native long MgEllipse_fromHandle(int jarg1);
  public final static native long MgEllipse_clone(long jarg1, MgEllipse jarg1_);
  public final static native void MgEllipse_copy(long jarg1, MgEllipse jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgEllipse_release(long jarg1, MgEllipse jarg1_);
  public final static native boolean MgEllipse_equals(long jarg1, MgEllipse jarg1_, long jarg2, MgObject jarg2_);
  public final static native int MgEllipse_getType(long jarg1, MgEllipse jarg1_);
  public final static native boolean MgEllipse_isKindOf(long jarg1, MgEllipse jarg1_, int jarg2);
  public final static native long MgEllipse_getExtent(long jarg1, MgEllipse jarg1_);
  public final static native void MgEllipse_update(long jarg1, MgEllipse jarg1_);
  public final static native void MgEllipse_transform(long jarg1, MgEllipse jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native void MgEllipse_clear(long jarg1, MgEllipse jarg1_);
  public final static native void MgEllipse_clearCachedData(long jarg1, MgEllipse jarg1_);
  public final static native int MgEllipse_getPointCount(long jarg1, MgEllipse jarg1_);
  public final static native long MgEllipse_getPoint(long jarg1, MgEllipse jarg1_, int jarg2);
  public final static native void MgEllipse_setPoint(long jarg1, MgEllipse jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean MgEllipse_isClosed(long jarg1, MgEllipse jarg1_);
  public final static native boolean MgEllipse_hitTestBox(long jarg1, MgEllipse jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean MgEllipse_draw(long jarg1, MgEllipse jarg1_, int jarg2, long jarg3, GiGraphics jarg3_, long jarg4, GiContext jarg4_, int jarg5);
  public final static native void MgEllipse_output(long jarg1, MgEllipse jarg1_, long jarg2, MgPath jarg2_);
  public final static native boolean MgEllipse_save(long jarg1, MgEllipse jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgEllipse_load(long jarg1, MgEllipse jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_);
  public final static native int MgEllipse_getHandleCount(long jarg1, MgEllipse jarg1_);
  public final static native long MgEllipse_getHandlePoint(long jarg1, MgEllipse jarg1_, int jarg2);
  public final static native boolean MgEllipse_setHandlePoint(long jarg1, MgEllipse jarg1_, int jarg2, long jarg3, Point2d jarg3_, float jarg4);
  public final static native boolean MgEllipse_isHandleFixed(long jarg1, MgEllipse jarg1_, int jarg2);
  public final static native int MgEllipse_getHandleType(long jarg1, MgEllipse jarg1_, int jarg2);
  public final static native boolean MgEllipse_offset(long jarg1, MgEllipse jarg1_, long jarg2, Vector2d jarg2_, int jarg3);
  public final static native float MgEllipse_hitTest(long jarg1, MgEllipse jarg1_, long jarg2, Point2d jarg2_, float jarg3, long jarg4, MgHitResult jarg4_);
  public final static native float MgEllipse_getRadiusX(long jarg1, MgEllipse jarg1_);
  public final static native float MgEllipse_getRadiusY(long jarg1, MgEllipse jarg1_);
  public final static native void MgEllipse_setRadius__SWIG_0(long jarg1, MgEllipse jarg1_, float jarg2, float jarg3);
  public final static native void MgEllipse_setRadius__SWIG_1(long jarg1, MgEllipse jarg1_, float jarg2);
  public final static native boolean MgEllipse_setCircle(long jarg1, MgEllipse jarg1_, long jarg2, Point2d jarg2_, float jarg3);
  public final static native boolean MgEllipse_setCircle2P(long jarg1, MgEllipse jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native boolean MgEllipse_setCircle3P(long jarg1, MgEllipse jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native boolean MgEllipse_isCircle__SWIG_0(long jarg1, MgEllipse jarg1_);
  public final static native boolean MgEllipse_isCircle__SWIG_1(long jarg1, MgBaseShape jarg1_);
  public final static native int MgEllipse_crossCircle__SWIG_0(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, MgBaseShape jarg3_, long jarg4, MgBaseShape jarg4_, long jarg5, Point2d jarg5_);
  public final static native int MgEllipse_crossCircle__SWIG_1(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, MgBaseShape jarg3_);
  public final static native long new_MgGrid();
  public final static native void delete_MgGrid(long jarg1);
  public final static native long MgGrid_create();
  public final static native int MgGrid_Type();
  public final static native long MgGrid_cast(long jarg1, MgBaseShape jarg1_);
  public final static native long MgGrid_fromHandle(int jarg1);
  public final static native long MgGrid_clone(long jarg1, MgGrid jarg1_);
  public final static native void MgGrid_copy(long jarg1, MgGrid jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgGrid_release(long jarg1, MgGrid jarg1_);
  public final static native boolean MgGrid_equals(long jarg1, MgGrid jarg1_, long jarg2, MgObject jarg2_);
  public final static native int MgGrid_getType(long jarg1, MgGrid jarg1_);
  public final static native boolean MgGrid_isKindOf(long jarg1, MgGrid jarg1_, int jarg2);
  public final static native long MgGrid_getExtent(long jarg1, MgGrid jarg1_);
  public final static native void MgGrid_update(long jarg1, MgGrid jarg1_);
  public final static native void MgGrid_transform(long jarg1, MgGrid jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native void MgGrid_clear(long jarg1, MgGrid jarg1_);
  public final static native void MgGrid_clearCachedData(long jarg1, MgGrid jarg1_);
  public final static native int MgGrid_getPointCount(long jarg1, MgGrid jarg1_);
  public final static native long MgGrid_getPoint(long jarg1, MgGrid jarg1_, int jarg2);
  public final static native void MgGrid_setPoint(long jarg1, MgGrid jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean MgGrid_isClosed(long jarg1, MgGrid jarg1_);
  public final static native boolean MgGrid_hitTestBox(long jarg1, MgGrid jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean MgGrid_draw(long jarg1, MgGrid jarg1_, int jarg2, long jarg3, GiGraphics jarg3_, long jarg4, GiContext jarg4_, int jarg5);
  public final static native void MgGrid_output(long jarg1, MgGrid jarg1_, long jarg2, MgPath jarg2_);
  public final static native boolean MgGrid_save(long jarg1, MgGrid jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgGrid_load(long jarg1, MgGrid jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_);
  public final static native int MgGrid_getHandleCount(long jarg1, MgGrid jarg1_);
  public final static native long MgGrid_getHandlePoint(long jarg1, MgGrid jarg1_, int jarg2);
  public final static native boolean MgGrid_setHandlePoint(long jarg1, MgGrid jarg1_, int jarg2, long jarg3, Point2d jarg3_, float jarg4);
  public final static native boolean MgGrid_isHandleFixed(long jarg1, MgGrid jarg1_, int jarg2);
  public final static native int MgGrid_getHandleType(long jarg1, MgGrid jarg1_, int jarg2);
  public final static native boolean MgGrid_offset(long jarg1, MgGrid jarg1_, long jarg2, Vector2d jarg2_, int jarg3);
  public final static native float MgGrid_hitTest(long jarg1, MgGrid jarg1_, long jarg2, Point2d jarg2_, float jarg3, long jarg4, MgHitResult jarg4_);
  public final static native int MgGrid_snap(long jarg1, MgGrid jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native long MgGrid_getCellSize(long jarg1, MgGrid jarg1_);
  public final static native boolean MgGrid_isValid(long jarg1, MgGrid jarg1_, float jarg2);
  public final static native long new_MgLine();
  public final static native void delete_MgLine(long jarg1);
  public final static native long MgLine_create();
  public final static native int MgLine_Type();
  public final static native long MgLine_cast(long jarg1, MgBaseShape jarg1_);
  public final static native long MgLine_fromHandle(int jarg1);
  public final static native long MgLine_clone(long jarg1, MgLine jarg1_);
  public final static native void MgLine_copy(long jarg1, MgLine jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgLine_release(long jarg1, MgLine jarg1_);
  public final static native boolean MgLine_equals(long jarg1, MgLine jarg1_, long jarg2, MgObject jarg2_);
  public final static native int MgLine_getType(long jarg1, MgLine jarg1_);
  public final static native boolean MgLine_isKindOf(long jarg1, MgLine jarg1_, int jarg2);
  public final static native long MgLine_getExtent(long jarg1, MgLine jarg1_);
  public final static native void MgLine_update(long jarg1, MgLine jarg1_);
  public final static native void MgLine_transform(long jarg1, MgLine jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native void MgLine_clear(long jarg1, MgLine jarg1_);
  public final static native void MgLine_clearCachedData(long jarg1, MgLine jarg1_);
  public final static native int MgLine_getPointCount(long jarg1, MgLine jarg1_);
  public final static native long MgLine_getPoint(long jarg1, MgLine jarg1_, int jarg2);
  public final static native void MgLine_setPoint(long jarg1, MgLine jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean MgLine_isClosed(long jarg1, MgLine jarg1_);
  public final static native boolean MgLine_hitTestBox(long jarg1, MgLine jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean MgLine_draw(long jarg1, MgLine jarg1_, int jarg2, long jarg3, GiGraphics jarg3_, long jarg4, GiContext jarg4_, int jarg5);
  public final static native void MgLine_output(long jarg1, MgLine jarg1_, long jarg2, MgPath jarg2_);
  public final static native boolean MgLine_save(long jarg1, MgLine jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgLine_load(long jarg1, MgLine jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_);
  public final static native int MgLine_getHandleCount(long jarg1, MgLine jarg1_);
  public final static native long MgLine_getHandlePoint(long jarg1, MgLine jarg1_, int jarg2);
  public final static native boolean MgLine_setHandlePoint(long jarg1, MgLine jarg1_, int jarg2, long jarg3, Point2d jarg3_, float jarg4);
  public final static native boolean MgLine_isHandleFixed(long jarg1, MgLine jarg1_, int jarg2);
  public final static native int MgLine_getHandleType(long jarg1, MgLine jarg1_, int jarg2);
  public final static native boolean MgLine_offset(long jarg1, MgLine jarg1_, long jarg2, Vector2d jarg2_, int jarg3);
  public final static native float MgLine_hitTest(long jarg1, MgLine jarg1_, long jarg2, Point2d jarg2_, float jarg3, long jarg4, MgHitResult jarg4_);
  public final static native long MgLine_startPoint(long jarg1, MgLine jarg1_);
  public final static native long MgLine_endPoint(long jarg1, MgLine jarg1_);
  public final static native long MgLine_center(long jarg1, MgLine jarg1_);
  public final static native float MgLine_length(long jarg1, MgLine jarg1_);
  public final static native float MgLine_angle(long jarg1, MgLine jarg1_);
  public final static native void MgLine_setStartPoint(long jarg1, MgLine jarg1_, long jarg2, Point2d jarg2_);
  public final static native void MgLine_setEndPoint(long jarg1, MgLine jarg1_, long jarg2, Point2d jarg2_);
  public final static native void MgLine_setRayline(long jarg1, MgLine jarg1_, boolean jarg2);
  public final static native void MgLine_setBeeline(long jarg1, MgLine jarg1_, boolean jarg2);
  public final static native boolean MgLine_isRayline(long jarg1, MgLine jarg1_);
  public final static native boolean MgLine_isBeeline(long jarg1, MgLine jarg1_);
  public final static native long new_MgParallel();
  public final static native void delete_MgParallel(long jarg1);
  public final static native long MgParallel_create();
  public final static native int MgParallel_Type();
  public final static native long MgParallel_cast(long jarg1, MgBaseShape jarg1_);
  public final static native long MgParallel_fromHandle(int jarg1);
  public final static native long MgParallel_clone(long jarg1, MgParallel jarg1_);
  public final static native void MgParallel_copy(long jarg1, MgParallel jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgParallel_release(long jarg1, MgParallel jarg1_);
  public final static native boolean MgParallel_equals(long jarg1, MgParallel jarg1_, long jarg2, MgObject jarg2_);
  public final static native int MgParallel_getType(long jarg1, MgParallel jarg1_);
  public final static native boolean MgParallel_isKindOf(long jarg1, MgParallel jarg1_, int jarg2);
  public final static native long MgParallel_getExtent(long jarg1, MgParallel jarg1_);
  public final static native void MgParallel_update(long jarg1, MgParallel jarg1_);
  public final static native void MgParallel_transform(long jarg1, MgParallel jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native void MgParallel_clear(long jarg1, MgParallel jarg1_);
  public final static native void MgParallel_clearCachedData(long jarg1, MgParallel jarg1_);
  public final static native int MgParallel_getPointCount(long jarg1, MgParallel jarg1_);
  public final static native long MgParallel_getPoint(long jarg1, MgParallel jarg1_, int jarg2);
  public final static native void MgParallel_setPoint(long jarg1, MgParallel jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean MgParallel_isClosed(long jarg1, MgParallel jarg1_);
  public final static native boolean MgParallel_hitTestBox(long jarg1, MgParallel jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean MgParallel_draw(long jarg1, MgParallel jarg1_, int jarg2, long jarg3, GiGraphics jarg3_, long jarg4, GiContext jarg4_, int jarg5);
  public final static native void MgParallel_output(long jarg1, MgParallel jarg1_, long jarg2, MgPath jarg2_);
  public final static native boolean MgParallel_save(long jarg1, MgParallel jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgParallel_load(long jarg1, MgParallel jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_);
  public final static native int MgParallel_getHandleCount(long jarg1, MgParallel jarg1_);
  public final static native long MgParallel_getHandlePoint(long jarg1, MgParallel jarg1_, int jarg2);
  public final static native boolean MgParallel_setHandlePoint(long jarg1, MgParallel jarg1_, int jarg2, long jarg3, Point2d jarg3_, float jarg4);
  public final static native boolean MgParallel_isHandleFixed(long jarg1, MgParallel jarg1_, int jarg2);
  public final static native int MgParallel_getHandleType(long jarg1, MgParallel jarg1_, int jarg2);
  public final static native boolean MgParallel_offset(long jarg1, MgParallel jarg1_, long jarg2, Vector2d jarg2_, int jarg3);
  public final static native float MgParallel_hitTest(long jarg1, MgParallel jarg1_, long jarg2, Point2d jarg2_, float jarg3, long jarg4, MgHitResult jarg4_);
  public final static native long MgParallel_getCenter(long jarg1, MgParallel jarg1_);
  public final static native long MgParallel_getRect(long jarg1, MgParallel jarg1_);
  public final static native float MgParallel_getWidth(long jarg1, MgParallel jarg1_);
  public final static native float MgParallel_getHeight(long jarg1, MgParallel jarg1_);
  public final static native float MgParallel_angle(long jarg1, MgParallel jarg1_);
  public final static native boolean MgParallel_isEmpty(long jarg1, MgParallel jarg1_, float jarg2);
  public final static native long new_MgPathShape();
  public final static native void delete_MgPathShape(long jarg1);
  public final static native long MgPathShape_create();
  public final static native int MgPathShape_Type();
  public final static native long MgPathShape_cast(long jarg1, MgBaseShape jarg1_);
  public final static native long MgPathShape_fromHandle(int jarg1);
  public final static native long MgPathShape_clone(long jarg1, MgPathShape jarg1_);
  public final static native void MgPathShape_copy(long jarg1, MgPathShape jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgPathShape_release(long jarg1, MgPathShape jarg1_);
  public final static native boolean MgPathShape_equals(long jarg1, MgPathShape jarg1_, long jarg2, MgObject jarg2_);
  public final static native int MgPathShape_getType(long jarg1, MgPathShape jarg1_);
  public final static native boolean MgPathShape_isKindOf(long jarg1, MgPathShape jarg1_, int jarg2);
  public final static native long MgPathShape_getExtent(long jarg1, MgPathShape jarg1_);
  public final static native void MgPathShape_update(long jarg1, MgPathShape jarg1_);
  public final static native void MgPathShape_transform(long jarg1, MgPathShape jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native void MgPathShape_clear(long jarg1, MgPathShape jarg1_);
  public final static native void MgPathShape_clearCachedData(long jarg1, MgPathShape jarg1_);
  public final static native int MgPathShape_getPointCount(long jarg1, MgPathShape jarg1_);
  public final static native long MgPathShape_getPoint(long jarg1, MgPathShape jarg1_, int jarg2);
  public final static native void MgPathShape_setPoint(long jarg1, MgPathShape jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean MgPathShape_isClosed(long jarg1, MgPathShape jarg1_);
  public final static native boolean MgPathShape_hitTestBox(long jarg1, MgPathShape jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean MgPathShape_draw(long jarg1, MgPathShape jarg1_, int jarg2, long jarg3, GiGraphics jarg3_, long jarg4, GiContext jarg4_, int jarg5);
  public final static native void MgPathShape_output(long jarg1, MgPathShape jarg1_, long jarg2, MgPath jarg2_);
  public final static native boolean MgPathShape_save(long jarg1, MgPathShape jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgPathShape_load(long jarg1, MgPathShape jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_);
  public final static native int MgPathShape_getHandleCount(long jarg1, MgPathShape jarg1_);
  public final static native long MgPathShape_getHandlePoint(long jarg1, MgPathShape jarg1_, int jarg2);
  public final static native boolean MgPathShape_setHandlePoint(long jarg1, MgPathShape jarg1_, int jarg2, long jarg3, Point2d jarg3_, float jarg4);
  public final static native boolean MgPathShape_isHandleFixed(long jarg1, MgPathShape jarg1_, int jarg2);
  public final static native int MgPathShape_getHandleType(long jarg1, MgPathShape jarg1_, int jarg2);
  public final static native boolean MgPathShape_offset(long jarg1, MgPathShape jarg1_, long jarg2, Vector2d jarg2_, int jarg3);
  public final static native float MgPathShape_hitTest(long jarg1, MgPathShape jarg1_, long jarg2, Point2d jarg2_, float jarg3, long jarg4, MgHitResult jarg4_);
  public final static native long MgPathShape_pathc(long jarg1, MgPathShape jarg1_);
  public final static native long MgPathShape_path(long jarg1, MgPathShape jarg1_);
  public final static native boolean MgPathShape_importSVGPath(long jarg1, MgPathShape jarg1_, String jarg2);
  public final static native int MgPathShape_exportSVGPath__SWIG_0(long jarg1, MgPathShape jarg1_, String jarg2, int jarg3);
  public final static native int MgPathShape_exportSVGPath__SWIG_1(long jarg1, MgPath jarg1_, String jarg2, int jarg3);
  public final static native long new_MgRoundRect();
  public final static native void delete_MgRoundRect(long jarg1);
  public final static native long MgRoundRect_create();
  public final static native int MgRoundRect_Type();
  public final static native long MgRoundRect_cast(long jarg1, MgBaseShape jarg1_);
  public final static native long MgRoundRect_fromHandle(int jarg1);
  public final static native long MgRoundRect_clone(long jarg1, MgRoundRect jarg1_);
  public final static native void MgRoundRect_copy(long jarg1, MgRoundRect jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgRoundRect_release(long jarg1, MgRoundRect jarg1_);
  public final static native boolean MgRoundRect_equals(long jarg1, MgRoundRect jarg1_, long jarg2, MgObject jarg2_);
  public final static native int MgRoundRect_getType(long jarg1, MgRoundRect jarg1_);
  public final static native boolean MgRoundRect_isKindOf(long jarg1, MgRoundRect jarg1_, int jarg2);
  public final static native long MgRoundRect_getExtent(long jarg1, MgRoundRect jarg1_);
  public final static native void MgRoundRect_update(long jarg1, MgRoundRect jarg1_);
  public final static native void MgRoundRect_transform(long jarg1, MgRoundRect jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native void MgRoundRect_clear(long jarg1, MgRoundRect jarg1_);
  public final static native void MgRoundRect_clearCachedData(long jarg1, MgRoundRect jarg1_);
  public final static native int MgRoundRect_getPointCount(long jarg1, MgRoundRect jarg1_);
  public final static native long MgRoundRect_getPoint(long jarg1, MgRoundRect jarg1_, int jarg2);
  public final static native void MgRoundRect_setPoint(long jarg1, MgRoundRect jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean MgRoundRect_isClosed(long jarg1, MgRoundRect jarg1_);
  public final static native boolean MgRoundRect_hitTestBox(long jarg1, MgRoundRect jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean MgRoundRect_draw(long jarg1, MgRoundRect jarg1_, int jarg2, long jarg3, GiGraphics jarg3_, long jarg4, GiContext jarg4_, int jarg5);
  public final static native void MgRoundRect_output(long jarg1, MgRoundRect jarg1_, long jarg2, MgPath jarg2_);
  public final static native boolean MgRoundRect_save(long jarg1, MgRoundRect jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgRoundRect_load(long jarg1, MgRoundRect jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_);
  public final static native int MgRoundRect_getHandleCount(long jarg1, MgRoundRect jarg1_);
  public final static native long MgRoundRect_getHandlePoint(long jarg1, MgRoundRect jarg1_, int jarg2);
  public final static native boolean MgRoundRect_setHandlePoint(long jarg1, MgRoundRect jarg1_, int jarg2, long jarg3, Point2d jarg3_, float jarg4);
  public final static native boolean MgRoundRect_isHandleFixed(long jarg1, MgRoundRect jarg1_, int jarg2);
  public final static native int MgRoundRect_getHandleType(long jarg1, MgRoundRect jarg1_, int jarg2);
  public final static native boolean MgRoundRect_offset(long jarg1, MgRoundRect jarg1_, long jarg2, Vector2d jarg2_, int jarg3);
  public final static native float MgRoundRect_hitTest(long jarg1, MgRoundRect jarg1_, long jarg2, Point2d jarg2_, float jarg3, long jarg4, MgHitResult jarg4_);
  public final static native float MgRoundRect_getRadiusX(long jarg1, MgRoundRect jarg1_);
  public final static native float MgRoundRect_getRadiusY(long jarg1, MgRoundRect jarg1_);
  public final static native void MgRoundRect_setRadius__SWIG_0(long jarg1, MgRoundRect jarg1_, float jarg2, float jarg3);
  public final static native void MgRoundRect_setRadius__SWIG_1(long jarg1, MgRoundRect jarg1_, float jarg2);
  public final static native long new_MgSplines();
  public final static native void delete_MgSplines(long jarg1);
  public final static native long MgSplines_create();
  public final static native int MgSplines_Type();
  public final static native long MgSplines_cast(long jarg1, MgBaseShape jarg1_);
  public final static native long MgSplines_fromHandle(int jarg1);
  public final static native long MgSplines_clone(long jarg1, MgSplines jarg1_);
  public final static native void MgSplines_copy(long jarg1, MgSplines jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgSplines_release(long jarg1, MgSplines jarg1_);
  public final static native boolean MgSplines_equals(long jarg1, MgSplines jarg1_, long jarg2, MgObject jarg2_);
  public final static native int MgSplines_getType(long jarg1, MgSplines jarg1_);
  public final static native boolean MgSplines_isKindOf(long jarg1, MgSplines jarg1_, int jarg2);
  public final static native long MgSplines_getExtent(long jarg1, MgSplines jarg1_);
  public final static native void MgSplines_update(long jarg1, MgSplines jarg1_);
  public final static native void MgSplines_transform(long jarg1, MgSplines jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native void MgSplines_clear(long jarg1, MgSplines jarg1_);
  public final static native void MgSplines_clearCachedData(long jarg1, MgSplines jarg1_);
  public final static native int MgSplines_getPointCount(long jarg1, MgSplines jarg1_);
  public final static native long MgSplines_getPoint(long jarg1, MgSplines jarg1_, int jarg2);
  public final static native void MgSplines_setPoint(long jarg1, MgSplines jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean MgSplines_isClosed(long jarg1, MgSplines jarg1_);
  public final static native boolean MgSplines_hitTestBox(long jarg1, MgSplines jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean MgSplines_draw(long jarg1, MgSplines jarg1_, int jarg2, long jarg3, GiGraphics jarg3_, long jarg4, GiContext jarg4_, int jarg5);
  public final static native void MgSplines_output(long jarg1, MgSplines jarg1_, long jarg2, MgPath jarg2_);
  public final static native boolean MgSplines_save(long jarg1, MgSplines jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgSplines_load(long jarg1, MgSplines jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_);
  public final static native int MgSplines_getHandleCount(long jarg1, MgSplines jarg1_);
  public final static native long MgSplines_getHandlePoint(long jarg1, MgSplines jarg1_, int jarg2);
  public final static native boolean MgSplines_setHandlePoint(long jarg1, MgSplines jarg1_, int jarg2, long jarg3, Point2d jarg3_, float jarg4);
  public final static native boolean MgSplines_isHandleFixed(long jarg1, MgSplines jarg1_, int jarg2);
  public final static native int MgSplines_getHandleType(long jarg1, MgSplines jarg1_, int jarg2);
  public final static native boolean MgSplines_offset(long jarg1, MgSplines jarg1_, long jarg2, Vector2d jarg2_, int jarg3);
  public final static native float MgSplines_hitTest(long jarg1, MgSplines jarg1_, long jarg2, Point2d jarg2_, float jarg3, long jarg4, MgHitResult jarg4_);
  public final static native boolean MgSplines_smooth(long jarg1, MgSplines jarg1_, long jarg2, Matrix2d jarg2_, float jarg3);
  public final static native int MgSplines_smoothForPoints(long jarg1, MgSplines jarg1_, int jarg2, long jarg3, Point2d jarg3_, long jarg4, Matrix2d jarg4_, float jarg5);
  public final static native void MgSplines_clearVectors(long jarg1, MgSplines jarg1_);
  public final static native int MgShape_Type();
  public final static native long MgShape_Null();
  public final static native long MgShape_fromHandle(int jarg1);
  public final static native int MgShape_toHandle(long jarg1, MgShape jarg1_);
  public final static native long MgShape_cloneShape(long jarg1, MgShape jarg1_);
  public final static native long MgShape_context(long jarg1, MgShape jarg1_);
  public final static native void MgShape_setContext__SWIG_0(long jarg1, MgShape jarg1_, long jarg2, GiContext jarg2_, int jarg3);
  public final static native void MgShape_setContext__SWIG_1(long jarg1, MgShape jarg1_, long jarg2, GiContext jarg2_);
  public final static native long MgShape_shape(long jarg1, MgShape jarg1_);
  public final static native long MgShape_shapec(long jarg1, MgShape jarg1_);
  public final static native boolean MgShape_hasFillColor(long jarg1, MgShape jarg1_);
  public final static native boolean MgShape_draw(long jarg1, MgShape jarg1_, int jarg2, long jarg3, GiGraphics jarg3_, long jarg4, GiContext jarg4_, int jarg5);
  public final static native boolean MgShape_save(long jarg1, MgShape jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgShape_load(long jarg1, MgShape jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_);
  public final static native int MgShape_getID(long jarg1, MgShape jarg1_);
  public final static native long MgShape_getParent(long jarg1, MgShape jarg1_);
  public final static native void MgShape_setParent(long jarg1, MgShape jarg1_, long jarg2, MgShapes jarg2_, int jarg3);
  public final static native int MgShape_getTag(long jarg1, MgShape jarg1_);
  public final static native void MgShape_setTag(long jarg1, MgShape jarg1_, int jarg2);
  public final static native void MgShape_copy(long jarg1, MgShape jarg1_, long jarg2, MgObject jarg2_);
  public final static native boolean MgShape_equals(long jarg1, MgShape jarg1_, long jarg2, MgObject jarg2_);
  public final static native boolean MgShape_isKindOf(long jarg1, MgShape jarg1_, int jarg2);
  public final static native boolean MgShape_drawShape(long jarg1, MgShapes jarg1_, long jarg2, MgBaseShape jarg2_, int jarg3, long jarg4, GiGraphics jarg4_, long jarg5, GiContext jarg5_, int jarg6);
  public final static native int MgShape_getPointCount(long jarg1, MgShape jarg1_);
  public final static native long MgShape_getPoint(long jarg1, MgShape jarg1_, int jarg2);
  public final static native int MgShape_getHandleCount(long jarg1, MgShape jarg1_);
  public final static native long MgShape_getHandlePoint(long jarg1, MgShape jarg1_, int jarg2);
  public final static native int MgShape_getHandleType(long jarg1, MgShape jarg1_, int jarg2);
  public final static native void delete_MgShapeFactory(long jarg1);
  public final static native long MgShapeFactory_createShape(long jarg1, MgShapeFactory jarg1_, int jarg2);
  public final static native int MgShapes_Type();
  public final static native long MgShapes_cloneShapes(long jarg1, MgShapes jarg1_);
  public final static native long MgShapes_shallowCopy(long jarg1, MgShapes jarg1_);
  public final static native long MgShapes_create__SWIG_0(long jarg1, MgObject jarg1_, int jarg2);
  public final static native long MgShapes_create__SWIG_1(long jarg1, MgObject jarg1_);
  public final static native long MgShapes_create__SWIG_2();
  public final static native int MgShapes_getShapeCount(long jarg1, MgShapes jarg1_);
  public final static native int MgShapes_getShapeCountByTypeOrTag(long jarg1, MgShapes jarg1_, int jarg2, int jarg3);
  public final static native int MgShapes_getShapeIndex(long jarg1, MgShapes jarg1_, int jarg2);
  public final static native long MgShapes_getShapeAtIndex(long jarg1, MgShapes jarg1_, int jarg2);
  public final static native long MgShapes_getHeadShape(long jarg1, MgShapes jarg1_);
  public final static native long MgShapes_getLastShape(long jarg1, MgShapes jarg1_);
  public final static native long MgShapes_findShape(long jarg1, MgShapes jarg1_, int jarg2);
  public final static native long MgShapes_findShapeByTag(long jarg1, MgShapes jarg1_, int jarg2);
  public final static native long MgShapes_findShapeByType(long jarg1, MgShapes jarg1_, int jarg2);
  public final static native long MgShapes_findShapeByTypeAndTag(long jarg1, MgShapes jarg1_, int jarg2, int jarg3);
  public final static native long MgShapes_getExtent(long jarg1, MgShapes jarg1_);
  public final static native long MgShapes_hitTest(long jarg1, MgShapes jarg1_, long jarg2, Box2d jarg2_, long jarg3, MgHitResult jarg3_);
  public final static native int MgShapes_draw__SWIG_0(long jarg1, MgShapes jarg1_, long jarg2, GiGraphics jarg2_, long jarg3, GiContext jarg3_);
  public final static native int MgShapes_draw__SWIG_1(long jarg1, MgShapes jarg1_, long jarg2, GiGraphics jarg2_);
  public final static native boolean MgShapes_save__SWIG_0(long jarg1, MgShapes jarg1_, long jarg2, MgStorage jarg2_, int jarg3);
  public final static native boolean MgShapes_save__SWIG_1(long jarg1, MgShapes jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgShapes_saveShape(long jarg1, MgShapes jarg1_, long jarg2, MgStorage jarg2_, long jarg3, MgShape jarg3_, int jarg4);
  public final static native int MgShapes_load__SWIG_0(long jarg1, MgShapes jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_, boolean jarg4);
  public final static native int MgShapes_load__SWIG_1(long jarg1, MgShapes jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_);
  public final static native void MgShapes_setNewShapeID(long jarg1, MgShapes jarg1_, int jarg2);
  public final static native void MgShapes_clear(long jarg1, MgShapes jarg1_);
  public final static native void MgShapes_clearCachedData(long jarg1, MgShapes jarg1_);
  public final static native int MgShapes_copyShapes__SWIG_0(long jarg1, MgShapes jarg1_, long jarg2, MgShapes jarg2_, boolean jarg3, boolean jarg4);
  public final static native int MgShapes_copyShapes__SWIG_1(long jarg1, MgShapes jarg1_, long jarg2, MgShapes jarg2_, boolean jarg3);
  public final static native int MgShapes_copyShapes__SWIG_2(long jarg1, MgShapes jarg1_, long jarg2, MgShapes jarg2_);
  public final static native long MgShapes_addShape(long jarg1, MgShapes jarg1_, long jarg2, MgShape jarg2_);
  public final static native boolean MgShapes_addShapeDirect__SWIG_0(long jarg1, MgShapes jarg1_, long jarg2, MgShape jarg2_, boolean jarg3);
  public final static native boolean MgShapes_addShapeDirect__SWIG_1(long jarg1, MgShapes jarg1_, long jarg2, MgShape jarg2_);
  public final static native boolean MgShapes_updateShape__SWIG_0(long jarg1, MgShapes jarg1_, long jarg2, MgShape jarg2_, boolean jarg3);
  public final static native boolean MgShapes_updateShape__SWIG_1(long jarg1, MgShapes jarg1_, long jarg2, MgShape jarg2_);
  public final static native long MgShapes_cloneShape(long jarg1, MgShapes jarg1_, int jarg2);
  public final static native void MgShapes_transform(long jarg1, MgShapes jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native boolean MgShapes_removeShape(long jarg1, MgShapes jarg1_, int jarg2);
  public final static native boolean MgShapes_moveShapeTo(long jarg1, MgShapes jarg1_, int jarg2, long jarg3, MgShapes jarg3_);
  public final static native void MgShapes_copyShapesTo(long jarg1, MgShapes jarg1_, long jarg2, MgShapes jarg2_);
  public final static native boolean MgShapes_bringToFront(long jarg1, MgShapes jarg1_, int jarg2);
  public final static native boolean MgShapes_bringToBack(long jarg1, MgShapes jarg1_, int jarg2);
  public final static native boolean MgShapes_bringToIndex(long jarg1, MgShapes jarg1_, int jarg2, int jarg3);
  public final static native long MgShapes_getParentShape(long jarg1, MgShape jarg1_);
  public final static native long MgShapes_getOwner(long jarg1, MgShapes jarg1_);
  public final static native int MgShapes_getIndex(long jarg1, MgShapes jarg1_);
  public final static native long MgShapes_fromHandle(int jarg1);
  public final static native int MgShapes_toHandle(long jarg1, MgShapes jarg1_);
  public final static native long MgShapes_clone(long jarg1, MgShapes jarg1_);
  public final static native void MgShapes_copy(long jarg1, MgShapes jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgShapes_release(long jarg1, MgShapes jarg1_);
  public final static native void MgShapes_addRef(long jarg1, MgShapes jarg1_);
  public final static native boolean MgShapes_equals(long jarg1, MgShapes jarg1_, long jarg2, MgObject jarg2_);
  public final static native int MgShapes_getType(long jarg1, MgShapes jarg1_);
  public final static native boolean MgShapes_isKindOf(long jarg1, MgShapes jarg1_, int jarg2);
  public final static native long new_MgShapeIterator(long jarg1, MgShapes jarg1_);
  public final static native void delete_MgShapeIterator(long jarg1);
  public final static native boolean MgShapeIterator_hasNext(long jarg1, MgShapeIterator jarg1_);
  public final static native long MgShapeIterator_getNext(long jarg1, MgShapeIterator jarg1_);
  public final static native long MgShapeIterator_shapes(long jarg1, MgShapeIterator jarg1_);
  public final static native int MgComposite_Type();
  public final static native int MgComposite_getShapeCount(long jarg1, MgComposite jarg1_);
  public final static native long MgComposite_shapes(long jarg1, MgComposite jarg1_);
  public final static native long MgComposite_getOwnerShape(long jarg1, MgComposite jarg1_);
  public final static native boolean MgComposite_canOffsetShapeAlone(long jarg1, MgComposite jarg1_, long jarg2, MgShape jarg2_);
  public final static native boolean MgComposite_canOffsetShapeAloneSwigExplicitMgComposite(long jarg1, MgComposite jarg1_, long jarg2, MgShape jarg2_);
  public final static native long new_MgComposite();
  public final static native void MgComposite_director_connect(MgComposite obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void MgComposite_change_ownership(MgComposite obj, long cptr, boolean take_or_release);
  public final static native long new_MgGroup();
  public final static native void delete_MgGroup(long jarg1);
  public final static native long MgGroup_create();
  public final static native int MgGroup_Type();
  public final static native long MgGroup_cast(long jarg1, MgBaseShape jarg1_);
  public final static native long MgGroup_fromHandle(int jarg1);
  public final static native long MgGroup_clone(long jarg1, MgGroup jarg1_);
  public final static native void MgGroup_copy(long jarg1, MgGroup jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgGroup_release(long jarg1, MgGroup jarg1_);
  public final static native boolean MgGroup_equals(long jarg1, MgGroup jarg1_, long jarg2, MgObject jarg2_);
  public final static native int MgGroup_getType(long jarg1, MgGroup jarg1_);
  public final static native boolean MgGroup_isKindOf(long jarg1, MgGroup jarg1_, int jarg2);
  public final static native long MgGroup_getExtent(long jarg1, MgGroup jarg1_);
  public final static native void MgGroup_update(long jarg1, MgGroup jarg1_);
  public final static native void MgGroup_transform(long jarg1, MgGroup jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native void MgGroup_clear(long jarg1, MgGroup jarg1_);
  public final static native void MgGroup_clearCachedData(long jarg1, MgGroup jarg1_);
  public final static native int MgGroup_getPointCount(long jarg1, MgGroup jarg1_);
  public final static native long MgGroup_getPoint(long jarg1, MgGroup jarg1_, int jarg2);
  public final static native void MgGroup_setPoint(long jarg1, MgGroup jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean MgGroup_isClosed(long jarg1, MgGroup jarg1_);
  public final static native boolean MgGroup_hitTestBox(long jarg1, MgGroup jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean MgGroup_draw(long jarg1, MgGroup jarg1_, int jarg2, long jarg3, GiGraphics jarg3_, long jarg4, GiContext jarg4_, int jarg5);
  public final static native void MgGroup_output(long jarg1, MgGroup jarg1_, long jarg2, MgPath jarg2_);
  public final static native boolean MgGroup_save(long jarg1, MgGroup jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgGroup_load(long jarg1, MgGroup jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_);
  public final static native int MgGroup_getHandleCount(long jarg1, MgGroup jarg1_);
  public final static native long MgGroup_getHandlePoint(long jarg1, MgGroup jarg1_, int jarg2);
  public final static native boolean MgGroup_setHandlePoint(long jarg1, MgGroup jarg1_, int jarg2, long jarg3, Point2d jarg3_, float jarg4);
  public final static native boolean MgGroup_isHandleFixed(long jarg1, MgGroup jarg1_, int jarg2);
  public final static native int MgGroup_getHandleType(long jarg1, MgGroup jarg1_, int jarg2);
  public final static native boolean MgGroup_offset(long jarg1, MgGroup jarg1_, long jarg2, Vector2d jarg2_, int jarg3);
  public final static native float MgGroup_hitTest(long jarg1, MgGroup jarg1_, long jarg2, Point2d jarg2_, float jarg3, long jarg4, MgHitResult jarg4_);
  public final static native boolean MgGroup_addShapeToGroup(long jarg1, MgGroup jarg1_, long jarg2, MgShape jarg2_);
  public final static native long MgGroup_getInsertionPoint(long jarg1, MgGroup jarg1_);
  public final static native void MgGroup_setInsertionPoint(long jarg1, MgGroup jarg1_, long jarg2, Point2d jarg2_);
  public final static native boolean MgGroup_hasInsertionPoint(long jarg1, MgGroup jarg1_);
  public final static native long MgGroup_getCenterPoint(long jarg1, MgGroup jarg1_);
  public final static native void MgGroup_setName(long jarg1, MgGroup jarg1_, String jarg2);
  public final static native long MgGroup_findGroup(long jarg1, MgShapes jarg1_, String jarg2);
  public final static native long new_MgImageShape();
  public final static native void delete_MgImageShape(long jarg1);
  public final static native long MgImageShape_create();
  public final static native int MgImageShape_Type();
  public final static native long MgImageShape_cast(long jarg1, MgBaseShape jarg1_);
  public final static native long MgImageShape_fromHandle(int jarg1);
  public final static native long MgImageShape_clone(long jarg1, MgImageShape jarg1_);
  public final static native void MgImageShape_copy(long jarg1, MgImageShape jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgImageShape_release(long jarg1, MgImageShape jarg1_);
  public final static native boolean MgImageShape_equals(long jarg1, MgImageShape jarg1_, long jarg2, MgObject jarg2_);
  public final static native int MgImageShape_getType(long jarg1, MgImageShape jarg1_);
  public final static native boolean MgImageShape_isKindOf(long jarg1, MgImageShape jarg1_, int jarg2);
  public final static native long MgImageShape_getExtent(long jarg1, MgImageShape jarg1_);
  public final static native void MgImageShape_update(long jarg1, MgImageShape jarg1_);
  public final static native void MgImageShape_transform(long jarg1, MgImageShape jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native void MgImageShape_clear(long jarg1, MgImageShape jarg1_);
  public final static native void MgImageShape_clearCachedData(long jarg1, MgImageShape jarg1_);
  public final static native int MgImageShape_getPointCount(long jarg1, MgImageShape jarg1_);
  public final static native long MgImageShape_getPoint(long jarg1, MgImageShape jarg1_, int jarg2);
  public final static native void MgImageShape_setPoint(long jarg1, MgImageShape jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean MgImageShape_isClosed(long jarg1, MgImageShape jarg1_);
  public final static native boolean MgImageShape_hitTestBox(long jarg1, MgImageShape jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean MgImageShape_draw(long jarg1, MgImageShape jarg1_, int jarg2, long jarg3, GiGraphics jarg3_, long jarg4, GiContext jarg4_, int jarg5);
  public final static native void MgImageShape_output(long jarg1, MgImageShape jarg1_, long jarg2, MgPath jarg2_);
  public final static native boolean MgImageShape_save(long jarg1, MgImageShape jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgImageShape_load(long jarg1, MgImageShape jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_);
  public final static native int MgImageShape_getHandleCount(long jarg1, MgImageShape jarg1_);
  public final static native long MgImageShape_getHandlePoint(long jarg1, MgImageShape jarg1_, int jarg2);
  public final static native boolean MgImageShape_setHandlePoint(long jarg1, MgImageShape jarg1_, int jarg2, long jarg3, Point2d jarg3_, float jarg4);
  public final static native boolean MgImageShape_isHandleFixed(long jarg1, MgImageShape jarg1_, int jarg2);
  public final static native int MgImageShape_getHandleType(long jarg1, MgImageShape jarg1_, int jarg2);
  public final static native boolean MgImageShape_offset(long jarg1, MgImageShape jarg1_, long jarg2, Vector2d jarg2_, int jarg3);
  public final static native float MgImageShape_hitTest(long jarg1, MgImageShape jarg1_, long jarg2, Point2d jarg2_, float jarg3, long jarg4, MgHitResult jarg4_);
  public final static native void MgImageShape_setName(long jarg1, MgImageShape jarg1_, String jarg2);
  public final static native long MgImageShape_getImageSize(long jarg1, MgImageShape jarg1_);
  public final static native void MgImageShape_setImageSize(long jarg1, MgImageShape jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long MgImageShape_findShapeByImageID(long jarg1, MgShapes jarg1_, String jarg2);
  public final static native void delete_MgActionDispatcher(long jarg1);
  public final static native boolean MgActionDispatcher_showInSelect(long jarg1, MgActionDispatcher jarg1_, long jarg2, MgMotion jarg2_, int jarg3, long jarg4, MgShape jarg4_, long jarg5, Box2d jarg5_);
  public final static native boolean MgActionDispatcher_showInDrawing(long jarg1, MgActionDispatcher jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native boolean MgActionDispatcher_doAction(long jarg1, MgActionDispatcher jarg1_, long jarg2, MgMotion jarg2_, int jarg3);
  public final static native void delete_MgSnap(long jarg1);
  public final static native void MgSnap_clearSnap(long jarg1, MgSnap jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgSnap_drawSnap(long jarg1, MgSnap jarg1_, long jarg2, MgMotion jarg2_, long jarg3, GiGraphics jarg3_);
  public final static native boolean MgSnap_drawPerpMark(long jarg1, MgSnap jarg1_, long jarg2, GiGraphics jarg2_, long jarg3, GiContext jarg3_, long jarg4, Point2d jarg4_, long jarg5, Point2d jarg5_, long jarg6, Point2d jarg6_, long jarg7, Point2d jarg7_, float jarg8);
  public final static native int MgSnap_getSnapOptions(long jarg1, MgSnap jarg1_, long jarg2, MgView jarg2_);
  public final static native void MgSnap_setSnapOptions(long jarg1, MgSnap jarg1_, long jarg2, MgView jarg2_, int jarg3);
  public final static native int MgSnap_getSnappedType(long jarg1, MgSnap jarg1_);
  public final static native int MgSnap_getSnappedPoint__SWIG_0(long jarg1, MgSnap jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native int MgSnap_getSnappedPoint__SWIG_1(long jarg1, MgSnap jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_, long jarg5, Point2d jarg5_);
  public final static native void MgSnap_setIgnoreStartPoint(long jarg1, MgSnap jarg1_, long jarg2, Point2d jarg2_);
  public final static native long MgSnap_snapPoint(long jarg1, MgSnap jarg1_, long jarg2, MgMotion jarg2_, long jarg3, Point2d jarg3_);
  public final static native void delete_MgSelection(long jarg1);
  public final static native int MgSelection_getSelection(long jarg1, MgSelection jarg1_, long jarg2, MgView jarg2_, long jarg3, ConstShapes jarg3_);
  public final static native int MgSelection_getSelectionForChange(long jarg1, MgSelection jarg1_, long jarg2, MgView jarg2_, long jarg3, Shapes jarg3_);
  public final static native int MgSelection_getSelectionCount(long jarg1, MgSelection jarg1_, long jarg2, MgView jarg2_);
  public final static native int MgSelection_getSelectState(long jarg1, MgSelection jarg1_, long jarg2, MgView jarg2_);
  public final static native int MgSelection_getSelectType(long jarg1, MgSelection jarg1_, long jarg2, MgView jarg2_);
  public final static native int MgSelection_getSelectedHandle(long jarg1, MgSelection jarg1_, long jarg2, MgMotion jarg2_);
  public final static native int MgSelection_getSelectedShapeHandle(long jarg1, MgSelection jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgSelection_selectAll(long jarg1, MgSelection jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgSelection_deleteSelection(long jarg1, MgSelection jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgSelection_cloneSelection(long jarg1, MgSelection jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgSelection_groupSelection(long jarg1, MgSelection jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgSelection_ungroupSelection(long jarg1, MgSelection jarg1_, long jarg2, MgMotion jarg2_);
  public final static native void MgSelection_resetSelection(long jarg1, MgSelection jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgSelection_addSelection(long jarg1, MgSelection jarg1_, long jarg2, MgMotion jarg2_, int jarg3);
  public final static native boolean MgSelection_deleteVertex(long jarg1, MgSelection jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgSelection_insertVertex(long jarg1, MgSelection jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgSelection_switchClosed(long jarg1, MgSelection jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgSelection_isFixedLength(long jarg1, MgSelection jarg1_, long jarg2, MgView jarg2_);
  public final static native boolean MgSelection_setFixedLength(long jarg1, MgSelection jarg1_, long jarg2, MgMotion jarg2_, boolean jarg3);
  public final static native boolean MgSelection_isLocked(long jarg1, MgSelection jarg1_, long jarg2, MgView jarg2_);
  public final static native boolean MgSelection_setLocked(long jarg1, MgSelection jarg1_, long jarg2, MgMotion jarg2_, boolean jarg3);
  public final static native boolean MgSelection_isEditMode(long jarg1, MgSelection jarg1_, long jarg2, MgView jarg2_);
  public final static native boolean MgSelection_setEditMode(long jarg1, MgSelection jarg1_, long jarg2, MgMotion jarg2_, boolean jarg3);
  public final static native boolean MgSelection_overturnPolygon(long jarg1, MgSelection jarg1_, long jarg2, MgMotion jarg2_);
  public final static native long MgSelection_getBoundingBox(long jarg1, MgSelection jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgSelection_isSelectedByType(long jarg1, MgSelection jarg1_, long jarg2, MgView jarg2_, int jarg3);
  public final static native boolean MgSelection_applyTransform(long jarg1, MgSelection jarg1_, long jarg2, MgMotion jarg2_, long jarg3, Matrix2d jarg3_);
  public final static native void delete_MgView(long jarg1);
  public final static native long MgView_fromHandle(int jarg1);
  public final static native int MgView_toHandle(long jarg1, MgView jarg1_);
  public final static native long MgView_motion(long jarg1, MgView jarg1_);
  public final static native long MgView_cmds(long jarg1, MgView jarg1_);
  public final static native long MgView_xform(long jarg1, MgView jarg1_);
  public final static native long MgView_doc(long jarg1, MgView jarg1_);
  public final static native long MgView_shapes(long jarg1, MgView jarg1_);
  public final static native long MgView_context(long jarg1, MgView jarg1_);
  public final static native long MgView_modelTransform(long jarg1, MgView jarg1_);
  public final static native long MgView_getShapeFactory(long jarg1, MgView jarg1_);
  public final static native long MgView_createShapeCtx__SWIG_0(long jarg1, MgView jarg1_, int jarg2, long jarg3, GiContext jarg3_);
  public final static native long MgView_createShapeCtx__SWIG_1(long jarg1, MgView jarg1_, int jarg2);
  public final static native long MgView_getSnap(long jarg1, MgView jarg1_);
  public final static native long MgView_getAction(long jarg1, MgView jarg1_);
  public final static native long MgView_getCmdSubject(long jarg1, MgView jarg1_);
  public final static native long MgView_getSelection(long jarg1, MgView jarg1_);
  public final static native boolean MgView_setCurrentShapes(long jarg1, MgView jarg1_, long jarg2, MgShapes jarg2_);
  public final static native boolean MgView_toSelectCommand(long jarg1, MgView jarg1_);
  public final static native int MgView_getNewShapeID(long jarg1, MgView jarg1_);
  public final static native void MgView_setNewShapeID(long jarg1, MgView jarg1_, int jarg2);
  public final static native long MgView_getCommand(long jarg1, MgView jarg1_);
  public final static native long MgView_findCommand(long jarg1, MgView jarg1_, String jarg2);
  public final static native boolean MgView_setCommand__SWIG_0(long jarg1, MgView jarg1_, String jarg2, String jarg3);
  public final static native boolean MgView_setCommand__SWIG_1(long jarg1, MgView jarg1_, String jarg2);
  public final static native boolean MgView_isReadOnly(long jarg1, MgView jarg1_);
  public final static native boolean MgView_isCommand(long jarg1, MgView jarg1_, String jarg2);
  public final static native void MgView_regenAll(long jarg1, MgView jarg1_, boolean jarg2);
  public final static native void MgView_regenAppend__SWIG_0(long jarg1, MgView jarg1_, int jarg2, int jarg3);
  public final static native void MgView_regenAppend__SWIG_1(long jarg1, MgView jarg1_, int jarg2);
  public final static native void MgView_redraw__SWIG_0(long jarg1, MgView jarg1_, boolean jarg2);
  public final static native void MgView_redraw__SWIG_1(long jarg1, MgView jarg1_);
  public final static native boolean MgView_useFinger(long jarg1, MgView jarg1_);
  public final static native void MgView_commandChanged(long jarg1, MgView jarg1_);
  public final static native void MgView_selectionChanged(long jarg1, MgView jarg1_);
  public final static native void MgView_dynamicChanged(long jarg1, MgView jarg1_);
  public final static native boolean MgView_shapeWillAdded(long jarg1, MgView jarg1_, long jarg2, MgShape jarg2_);
  public final static native void MgView_shapeAdded(long jarg1, MgView jarg1_, long jarg2, MgShape jarg2_);
  public final static native boolean MgView_shapeWillDeleted(long jarg1, MgView jarg1_, long jarg2, MgShape jarg2_);
  public final static native int MgView_removeShape(long jarg1, MgView jarg1_, long jarg2, MgShape jarg2_);
  public final static native boolean MgView_shapeCanRotated(long jarg1, MgView jarg1_, long jarg2, MgShape jarg2_);
  public final static native boolean MgView_shapeCanTransform(long jarg1, MgView jarg1_, long jarg2, MgShape jarg2_);
  public final static native boolean MgView_shapeCanUnlock(long jarg1, MgView jarg1_, long jarg2, MgShape jarg2_);
  public final static native boolean MgView_shapeCanUngroup(long jarg1, MgView jarg1_, long jarg2, MgShape jarg2_);
  public final static native boolean MgView_shapeCanMovedHandle(long jarg1, MgView jarg1_, long jarg2, MgShape jarg2_, int jarg3);
  public final static native void MgView_shapeMoved(long jarg1, MgView jarg1_, long jarg2, MgShape jarg2_, int jarg3);
  public final static native boolean MgView_shapeWillChanged(long jarg1, MgView jarg1_, long jarg2, MgShape jarg2_, long jarg3, MgShape jarg3_);
  public final static native void MgView_shapeChanged(long jarg1, MgView jarg1_, long jarg2, MgShape jarg2_);
  public final static native boolean MgView_shapeDblClick(long jarg1, MgView jarg1_, long jarg2, MgShape jarg2_);
  public final static native boolean MgView_shapeClicked(long jarg1, MgView jarg1_, long jarg2, MgShape jarg2_, float jarg3, float jarg4);
  public final static native void MgView_showMessage(long jarg1, MgView jarg1_, String jarg2);
  public final static native void MgView_getLocalizedString(long jarg1, MgView jarg1_, String jarg2, long jarg3, MgStringCallback jarg3_);
  public final static native boolean MgView_isContextActionsVisible(long jarg1, MgView jarg1_);
  public final static native void MgView_hideContextActions(long jarg1, MgView jarg1_);
  public final static native boolean MgView_getOptionBool(long jarg1, MgView jarg1_, String jarg2, boolean jarg3);
  public final static native int MgView_getOptionInt(long jarg1, MgView jarg1_, String jarg2, int jarg3);
  public final static native float MgView_getOptionFloat(long jarg1, MgView jarg1_, String jarg2, float jarg3);
  public final static native void MgView_setOptionBool(long jarg1, MgView jarg1_, String jarg2, boolean jarg3);
  public final static native void MgView_setOptionInt(long jarg1, MgView jarg1_, String jarg2, int jarg3);
  public final static native void MgView_setOptionFloat(long jarg1, MgView jarg1_, String jarg2, float jarg3);
  public final static native void MgView_setOptionString(long jarg1, MgView jarg1_, String jarg2, String jarg3);
  public final static native void MgMotion_view_set(long jarg1, MgMotion jarg1_, long jarg2, MgView jarg2_);
  public final static native long MgMotion_view_get(long jarg1, MgMotion jarg1_);
  public final static native void MgMotion_gestureType_set(long jarg1, MgMotion jarg1_, int jarg2);
  public final static native int MgMotion_gestureType_get(long jarg1, MgMotion jarg1_);
  public final static native void MgMotion_gestureState_set(long jarg1, MgMotion jarg1_, int jarg2);
  public final static native int MgMotion_gestureState_get(long jarg1, MgMotion jarg1_);
  public final static native void MgMotion_pressDrag_set(long jarg1, MgMotion jarg1_, boolean jarg2);
  public final static native boolean MgMotion_pressDrag_get(long jarg1, MgMotion jarg1_);
  public final static native void MgMotion_switchGesture_set(long jarg1, MgMotion jarg1_, boolean jarg2);
  public final static native boolean MgMotion_switchGesture_get(long jarg1, MgMotion jarg1_);
  public final static native void MgMotion_velocity_set(long jarg1, MgMotion jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long MgMotion_velocity_get(long jarg1, MgMotion jarg1_);
  public final static native void MgMotion_startPt_set(long jarg1, MgMotion jarg1_, long jarg2, Point2d jarg2_);
  public final static native long MgMotion_startPt_get(long jarg1, MgMotion jarg1_);
  public final static native void MgMotion_startPtM_set(long jarg1, MgMotion jarg1_, long jarg2, Point2d jarg2_);
  public final static native long MgMotion_startPtM_get(long jarg1, MgMotion jarg1_);
  public final static native void MgMotion_lastPt_set(long jarg1, MgMotion jarg1_, long jarg2, Point2d jarg2_);
  public final static native long MgMotion_lastPt_get(long jarg1, MgMotion jarg1_);
  public final static native void MgMotion_lastPtM_set(long jarg1, MgMotion jarg1_, long jarg2, Point2d jarg2_);
  public final static native long MgMotion_lastPtM_get(long jarg1, MgMotion jarg1_);
  public final static native void MgMotion_point_set(long jarg1, MgMotion jarg1_, long jarg2, Point2d jarg2_);
  public final static native long MgMotion_point_get(long jarg1, MgMotion jarg1_);
  public final static native void MgMotion_pointM_set(long jarg1, MgMotion jarg1_, long jarg2, Point2d jarg2_);
  public final static native long MgMotion_pointM_get(long jarg1, MgMotion jarg1_);
  public final static native void MgMotion_startPt2_set(long jarg1, MgMotion jarg1_, long jarg2, Point2d jarg2_);
  public final static native long MgMotion_startPt2_get(long jarg1, MgMotion jarg1_);
  public final static native void MgMotion_startPt2M_set(long jarg1, MgMotion jarg1_, long jarg2, Point2d jarg2_);
  public final static native long MgMotion_startPt2M_get(long jarg1, MgMotion jarg1_);
  public final static native void MgMotion_point2_set(long jarg1, MgMotion jarg1_, long jarg2, Point2d jarg2_);
  public final static native long MgMotion_point2_get(long jarg1, MgMotion jarg1_);
  public final static native void MgMotion_point2M_set(long jarg1, MgMotion jarg1_, long jarg2, Point2d jarg2_);
  public final static native long MgMotion_point2M_get(long jarg1, MgMotion jarg1_);
  public final static native void MgMotion_d2mgs_set(long jarg1, MgMotion jarg1_, float jarg2);
  public final static native float MgMotion_d2mgs_get(long jarg1, MgMotion jarg1_);
  public final static native void MgMotion_d2m_set(long jarg1, MgMotion jarg1_, float jarg2);
  public final static native float MgMotion_d2m_get(long jarg1, MgMotion jarg1_);
  public final static native long new_MgMotion();
  public final static native boolean MgMotion_dragging(long jarg1, MgMotion jarg1_);
  public final static native long MgMotion_cmds(long jarg1, MgMotion jarg1_);
  public final static native long MgMotion_startCenterM(long jarg1, MgMotion jarg1_);
  public final static native long MgMotion_centerM(long jarg1, MgMotion jarg1_);
  public final static native float MgMotion_startDistanceM(long jarg1, MgMotion jarg1_);
  public final static native float MgMotion_distanceM(long jarg1, MgMotion jarg1_);
  public final static native float MgMotion_displayMmToModel__SWIG_0(long jarg1, MgMotion jarg1_, float jarg2, long jarg3, GiGraphics jarg3_);
  public final static native float MgMotion_displayMmToModel__SWIG_1(long jarg1, MgMotion jarg1_, float jarg2);
  public final static native float MgMotion_displayMmToModel__SWIG_2(long jarg1, MgMotion jarg1_, String jarg2, float jarg3);
  public final static native long MgMotion_displayMmToModelBox__SWIG_0(long jarg1, MgMotion jarg1_, float jarg2);
  public final static native long MgMotion_displayMmToModelBox__SWIG_1(long jarg1, MgMotion jarg1_, String jarg2, float jarg3);
  public final static native void delete_MgMotion(long jarg1);
  public final static native long new_MgCommand(String jarg1);
  public final static native void delete_MgCommand(long jarg1);
  public final static native void MgCommand_release(long jarg1, MgCommand jarg1_);
  public final static native boolean MgCommand_cancel(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommand_cancelSwigExplicitMgCommand(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommand_initialize(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgStorage jarg3_);
  public final static native boolean MgCommand_initializeSwigExplicitMgCommand(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgStorage jarg3_);
  public final static native boolean MgCommand_backStep(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommand_backStepSwigExplicitMgCommand(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommand_draw(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_, long jarg3, GiGraphics jarg3_);
  public final static native boolean MgCommand_gatherShapes(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShapes jarg3_);
  public final static native boolean MgCommand_gatherShapesSwigExplicitMgCommand(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShapes jarg3_);
  public final static native boolean MgCommand_click(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommand_clickSwigExplicitMgCommand(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommand_doubleClick(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommand_doubleClickSwigExplicitMgCommand(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommand_longPress(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommand_longPressSwigExplicitMgCommand(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommand_touchBegan(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommand_touchBeganSwigExplicitMgCommand(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommand_touchMoved(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommand_touchMovedSwigExplicitMgCommand(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommand_touchEnded(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommand_touchEndedSwigExplicitMgCommand(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommand_mouseHover(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommand_mouseHoverSwigExplicitMgCommand(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommand_twoFingersMove(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommand_twoFingersMoveSwigExplicitMgCommand(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommand_isDrawingCommand(long jarg1, MgCommand jarg1_);
  public final static native boolean MgCommand_isDrawingCommandSwigExplicitMgCommand(long jarg1, MgCommand jarg1_);
  public final static native boolean MgCommand_isFloatingCommand(long jarg1, MgCommand jarg1_);
  public final static native boolean MgCommand_isFloatingCommandSwigExplicitMgCommand(long jarg1, MgCommand jarg1_);
  public final static native boolean MgCommand_doContextAction(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_, int jarg3);
  public final static native boolean MgCommand_doContextActionSwigExplicitMgCommand(long jarg1, MgCommand jarg1_, long jarg2, MgMotion jarg2_, int jarg3);
  public final static native void MgCommand_director_connect(MgCommand obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void MgCommand_change_ownership(MgCommand obj, long cptr, boolean take_or_release);
  public final static native void delete_CmdObserver(long jarg1);
  public final static native void CmdObserver_onDocLoaded(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_, boolean jarg3);
  public final static native void CmdObserver_onEnterSelectCommand(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_);
  public final static native void CmdObserver_onUnloadCommands(long jarg1, CmdObserver jarg1_, long jarg2, MgCmdManager jarg2_);
  public final static native boolean CmdObserver_selectActionsNeedHided(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_);
  public final static native int CmdObserver_addShapeActions(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_, long jarg3, Ints jarg3_, int jarg4, long jarg5, MgShape jarg5_);
  public final static native boolean CmdObserver_doAction(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_, int jarg3);
  public final static native boolean CmdObserver_doEndAction(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_, int jarg3);
  public final static native void CmdObserver_drawInShapeCommand(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgCommand jarg3_, long jarg4, GiGraphics jarg4_);
  public final static native void CmdObserver_drawInSelectCommand(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_, int jarg4, long jarg5, GiGraphics jarg5_);
  public final static native void CmdObserver_onSelectionChanged(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean CmdObserver_onShapeWillAdded(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native void CmdObserver_onShapeAdded(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native boolean CmdObserver_onShapeWillDeleted(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native int CmdObserver_onShapeDeleted(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native boolean CmdObserver_onShapeCanRotated(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native boolean CmdObserver_onShapeCanTransform(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native boolean CmdObserver_onShapeCanUnlock(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native boolean CmdObserver_onShapeCanUngroup(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native boolean CmdObserver_onShapeCanMovedHandle(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_, int jarg4);
  public final static native void CmdObserver_onShapeMoved(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_, int jarg4);
  public final static native boolean CmdObserver_onShapeWillChanged(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_, long jarg4, MgShape jarg4_);
  public final static native void CmdObserver_onShapeChanged(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native long CmdObserver_createShape(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_, int jarg3);
  public final static native long CmdObserver_createCommand(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_, String jarg3);
  public final static native boolean CmdObserver_onPreGesture(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_);
  public final static native void CmdObserver_onPostGesture(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_);
  public final static native void CmdObserver_onPointSnapped(long jarg1, CmdObserver jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native long new_CmdObserverDefault();
  public final static native void delete_CmdObserverDefault(long jarg1);
  public final static native void CmdObserverDefault_onDocLoaded(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, boolean jarg3);
  public final static native void CmdObserverDefault_onDocLoadedSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, boolean jarg3);
  public final static native void CmdObserverDefault_onEnterSelectCommand(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_);
  public final static native void CmdObserverDefault_onEnterSelectCommandSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_);
  public final static native void CmdObserverDefault_onUnloadCommands(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgCmdManager jarg2_);
  public final static native void CmdObserverDefault_onUnloadCommandsSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgCmdManager jarg2_);
  public final static native boolean CmdObserverDefault_selectActionsNeedHided(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean CmdObserverDefault_selectActionsNeedHidedSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean CmdObserverDefault_doAction(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, int jarg3);
  public final static native boolean CmdObserverDefault_doActionSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, int jarg3);
  public final static native boolean CmdObserverDefault_doEndAction(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, int jarg3);
  public final static native boolean CmdObserverDefault_doEndActionSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, int jarg3);
  public final static native void CmdObserverDefault_drawInShapeCommand(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgCommand jarg3_, long jarg4, GiGraphics jarg4_);
  public final static native void CmdObserverDefault_drawInShapeCommandSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgCommand jarg3_, long jarg4, GiGraphics jarg4_);
  public final static native void CmdObserverDefault_drawInSelectCommand(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_, int jarg4, long jarg5, GiGraphics jarg5_);
  public final static native void CmdObserverDefault_drawInSelectCommandSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_, int jarg4, long jarg5, GiGraphics jarg5_);
  public final static native void CmdObserverDefault_onSelectionChanged(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_);
  public final static native void CmdObserverDefault_onSelectionChangedSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean CmdObserverDefault_onShapeWillAdded(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native boolean CmdObserverDefault_onShapeWillAddedSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native void CmdObserverDefault_onShapeAdded(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native void CmdObserverDefault_onShapeAddedSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native boolean CmdObserverDefault_onShapeWillDeleted(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native boolean CmdObserverDefault_onShapeWillDeletedSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native int CmdObserverDefault_onShapeDeleted(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native int CmdObserverDefault_onShapeDeletedSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native boolean CmdObserverDefault_onShapeCanRotated(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native boolean CmdObserverDefault_onShapeCanRotatedSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native boolean CmdObserverDefault_onShapeCanTransform(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native boolean CmdObserverDefault_onShapeCanTransformSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native boolean CmdObserverDefault_onShapeCanUnlock(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native boolean CmdObserverDefault_onShapeCanUnlockSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native boolean CmdObserverDefault_onShapeCanUngroup(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native boolean CmdObserverDefault_onShapeCanUngroupSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native boolean CmdObserverDefault_onShapeCanMovedHandle(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_, int jarg4);
  public final static native boolean CmdObserverDefault_onShapeCanMovedHandleSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_, int jarg4);
  public final static native void CmdObserverDefault_onShapeMoved(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_, int jarg4);
  public final static native void CmdObserverDefault_onShapeMovedSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_, int jarg4);
  public final static native boolean CmdObserverDefault_onShapeWillChanged(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_, long jarg4, MgShape jarg4_);
  public final static native boolean CmdObserverDefault_onShapeWillChangedSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_, long jarg4, MgShape jarg4_);
  public final static native void CmdObserverDefault_onShapeChanged(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native void CmdObserverDefault_onShapeChangedSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native long CmdObserverDefault_createShape(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, int jarg3);
  public final static native long CmdObserverDefault_createShapeSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, int jarg3);
  public final static native long CmdObserverDefault_createCommand(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, String jarg3);
  public final static native long CmdObserverDefault_createCommandSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, String jarg3);
  public final static native int CmdObserverDefault_addShapeActions(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, Ints jarg3_, int jarg4, long jarg5, MgShape jarg5_);
  public final static native int CmdObserverDefault_addShapeActionsSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, Ints jarg3_, int jarg4, long jarg5, MgShape jarg5_);
  public final static native boolean CmdObserverDefault_onPreGesture(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean CmdObserverDefault_onPreGestureSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_);
  public final static native void CmdObserverDefault_onPostGesture(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_);
  public final static native void CmdObserverDefault_onPostGestureSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_);
  public final static native void CmdObserverDefault_onPointSnapped(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native void CmdObserverDefault_onPointSnappedSwigExplicitCmdObserverDefault(long jarg1, CmdObserverDefault jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native void CmdObserverDefault_director_connect(CmdObserverDefault obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void CmdObserverDefault_change_ownership(CmdObserverDefault obj, long cptr, boolean take_or_release);
  public final static native void CmdSubject_registerObserver(long jarg1, CmdSubject jarg1_, long jarg2, CmdObserver jarg2_);
  public final static native void CmdSubject_unregisterObserver(long jarg1, CmdSubject jarg1_, long jarg2, CmdObserver jarg2_);
  public final static native boolean CmdSubject_registerNamedObserver(long jarg1, CmdSubject jarg1_, String jarg2, long jarg3, CmdObserver jarg3_);
  public final static native long CmdSubject_findNamedObserver(long jarg1, CmdSubject jarg1_, String jarg2);
  public final static native void delete_CmdSubject(long jarg1);
  public final static native long new_MgCommandDraw(String jarg1);
  public final static native void delete_MgCommandDraw(long jarg1);
  public final static native long MgCommandDraw_addShape__SWIG_0(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShape jarg3_);
  public final static native long MgCommandDraw_addShape__SWIG_1(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommandDraw_touchBeganStep(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommandDraw_touchMovedStep(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommandDraw_touchEndedStep(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_);
  public final static native int MgCommandDraw_getShapeType(long jarg1, MgCommandDraw jarg1_);
  public final static native int MgCommandDraw_getShapeTypeSwigExplicitMgCommandDraw(long jarg1, MgCommandDraw jarg1_);
  public final static native void MgCommandDraw_ignoreStartPoint(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_, int jarg3);
  public final static native int MgCommandDraw_getSnappedType(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_);
  public final static native long MgCommandDraw_getLastSnappedPoint();
  public final static native long MgCommandDraw_getLastSnappedOriginPoint();
  public final static native int MgCommandDraw_getMaxStep(long jarg1, MgCommandDraw jarg1_);
  public final static native int MgCommandDraw_getMaxStepSwigExplicitMgCommandDraw(long jarg1, MgCommandDraw jarg1_);
  public final static native void MgCommandDraw_setStepPoint(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_, int jarg3, long jarg4, Point2d jarg4_);
  public final static native void MgCommandDraw_setStepPointSwigExplicitMgCommandDraw(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_, int jarg3, long jarg4, Point2d jarg4_);
  public final static native boolean MgCommandDraw_isStepPointAccepted(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_, long jarg3, Point2d jarg3_);
  public final static native boolean MgCommandDraw_isStepPointAcceptedSwigExplicitMgCommandDraw(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_, long jarg3, Point2d jarg3_);
  public final static native int MgCommandDraw_snapOptionsForStep(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_, int jarg3);
  public final static native int MgCommandDraw_snapOptionsForStepSwigExplicitMgCommandDraw(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_, int jarg3);
  public final static native boolean MgCommandDraw_initialize(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgStorage jarg3_);
  public final static native boolean MgCommandDraw_initializeSwigExplicitMgCommandDraw(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgStorage jarg3_);
  public final static native boolean MgCommandDraw_backStep(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommandDraw_backStepSwigExplicitMgCommandDraw(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommandDraw_cancel(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommandDraw_cancelSwigExplicitMgCommandDraw(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommandDraw_draw(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_, long jarg3, GiGraphics jarg3_);
  public final static native boolean MgCommandDraw_drawSwigExplicitMgCommandDraw(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_, long jarg3, GiGraphics jarg3_);
  public final static native boolean MgCommandDraw_gatherShapes(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShapes jarg3_);
  public final static native boolean MgCommandDraw_gatherShapesSwigExplicitMgCommandDraw(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgShapes jarg3_);
  public final static native boolean MgCommandDraw_touchBegan(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommandDraw_touchBeganSwigExplicitMgCommandDraw(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommandDraw_touchMoved(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommandDraw_touchMovedSwigExplicitMgCommandDraw(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommandDraw_touchEnded(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommandDraw_touchEndedSwigExplicitMgCommandDraw(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommandDraw_click(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommandDraw_clickSwigExplicitMgCommandDraw(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommandDraw_longPress(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommandDraw_longPressSwigExplicitMgCommandDraw(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommandDraw_mouseHover(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCommandDraw_mouseHoverSwigExplicitMgCommandDraw(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_);
  public final static native int MgCommandDraw_getStep(long jarg1, MgCommandDraw jarg1_);
  public final static native long MgCommandDraw_dynshape(long jarg1, MgCommandDraw jarg1_);
  public final static native void MgCommandDraw_setStep(long jarg1, MgCommandDraw jarg1_, int jarg2);
  public final static native long MgCommandDraw_snapPointWidhOptions__SWIG_0(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_, int jarg3, boolean jarg4);
  public final static native long MgCommandDraw_snapPointWidhOptions__SWIG_1(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_, int jarg3);
  public final static native long MgCommandDraw_snapPoint__SWIG_0(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_, boolean jarg3);
  public final static native long MgCommandDraw_snapPoint__SWIG_1(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_);
  public final static native long MgCommandDraw_snapPoint__SWIG_2(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_, long jarg3, Point2d jarg3_, boolean jarg4);
  public final static native long MgCommandDraw_snapPoint__SWIG_3(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_, long jarg3, Point2d jarg3_);
  public final static native long MgCommandDraw_snapPoint__SWIG_4(long jarg1, MgCommandDraw jarg1_, long jarg2, MgMotion jarg2_, long jarg3, Point2d jarg3_, boolean jarg4, int jarg5);
  public final static native void MgCommandDraw_director_connect(MgCommandDraw obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void MgCommandDraw_change_ownership(MgCommandDraw obj, long cptr, boolean take_or_release);
  public final static native long new_MgCmdArc3P__SWIG_0(String jarg1);
  public final static native long new_MgCmdArc3P__SWIG_1();
  public final static native void MgCmdArc3P_release(long jarg1, MgCmdArc3P jarg1_);
  public final static native boolean MgCmdArc3P_touchBegan(long jarg1, MgCmdArc3P jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCmdArc3P_touchMoved(long jarg1, MgCmdArc3P jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCmdArc3P_touchEnded(long jarg1, MgCmdArc3P jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCmdArc3P_initialize(long jarg1, MgCmdArc3P jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgStorage jarg3_);
  public final static native boolean MgCmdArc3P_draw(long jarg1, MgCmdArc3P jarg1_, long jarg2, MgMotion jarg2_, long jarg3, GiGraphics jarg3_);
  public final static native void delete_MgCmdArc3P(long jarg1);
  public final static native long new_MgCmdArcCSE__SWIG_0(String jarg1);
  public final static native long new_MgCmdArcCSE__SWIG_1();
  public final static native void MgCmdArcCSE_release(long jarg1, MgCmdArcCSE jarg1_);
  public final static native boolean MgCmdArcCSE_draw(long jarg1, MgCmdArcCSE jarg1_, long jarg2, MgMotion jarg2_, long jarg3, GiGraphics jarg3_);
  public final static native void delete_MgCmdArcCSE(long jarg1);
  public final static native long new_MgCmdSector__SWIG_0(String jarg1);
  public final static native long new_MgCmdSector__SWIG_1();
  public final static native boolean MgCmdSector_initialize(long jarg1, MgCmdSector jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgStorage jarg3_);
  public final static native void delete_MgCmdSector(long jarg1);
  public final static native long new_MgCmdCompass__SWIG_0(String jarg1);
  public final static native long new_MgCmdCompass__SWIG_1();
  public final static native void MgCmdCompass_release(long jarg1, MgCmdCompass jarg1_);
  public final static native boolean MgCmdCompass_initialize(long jarg1, MgCmdCompass jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgStorage jarg3_);
  public final static native boolean MgCmdCompass_draw(long jarg1, MgCmdCompass jarg1_, long jarg2, MgMotion jarg2_, long jarg3, GiGraphics jarg3_);
  public final static native boolean MgCmdCompass_click(long jarg1, MgCmdCompass jarg1_, long jarg2, MgMotion jarg2_);
  public final static native void delete_MgCmdCompass(long jarg1);
  public final static native long new_MgCmdArcTan__SWIG_0(String jarg1);
  public final static native long new_MgCmdArcTan__SWIG_1();
  public final static native void MgCmdArcTan_release(long jarg1, MgCmdArcTan jarg1_);
  public final static native void delete_MgCmdArcTan(long jarg1);
  public final static native long new_MgCmdDrawRect__SWIG_0(String jarg1);
  public final static native long new_MgCmdDrawRect__SWIG_1();
  public final static native void MgCmdDrawRect_release(long jarg1, MgCmdDrawRect jarg1_);
  public final static native void MgCmdDrawRect_releaseSwigExplicitMgCmdDrawRect(long jarg1, MgCmdDrawRect jarg1_);
  public final static native boolean MgCmdDrawRect_initialize(long jarg1, MgCmdDrawRect jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgStorage jarg3_);
  public final static native boolean MgCmdDrawRect_initializeSwigExplicitMgCmdDrawRect(long jarg1, MgCmdDrawRect jarg1_, long jarg2, MgMotion jarg2_, long jarg3, MgStorage jarg3_);
  public final static native boolean MgCmdDrawRect_backStep(long jarg1, MgCmdDrawRect jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCmdDrawRect_backStepSwigExplicitMgCmdDrawRect(long jarg1, MgCmdDrawRect jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCmdDrawRect_touchBegan(long jarg1, MgCmdDrawRect jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCmdDrawRect_touchBeganSwigExplicitMgCmdDrawRect(long jarg1, MgCmdDrawRect jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCmdDrawRect_touchMoved(long jarg1, MgCmdDrawRect jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCmdDrawRect_touchMovedSwigExplicitMgCmdDrawRect(long jarg1, MgCmdDrawRect jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCmdDrawRect_touchEnded(long jarg1, MgCmdDrawRect jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCmdDrawRect_touchEndedSwigExplicitMgCmdDrawRect(long jarg1, MgCmdDrawRect jarg1_, long jarg2, MgMotion jarg2_);
  public final static native void MgCmdDrawRect_addRectShape(long jarg1, MgCmdDrawRect jarg1_, long jarg2, MgMotion jarg2_);
  public final static native void MgCmdDrawRect_addRectShapeSwigExplicitMgCmdDrawRect(long jarg1, MgCmdDrawRect jarg1_, long jarg2, MgMotion jarg2_);
  public final static native void delete_MgCmdDrawRect(long jarg1);
  public final static native void MgCmdDrawRect_director_connect(MgCmdDrawRect obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void MgCmdDrawRect_change_ownership(MgCmdDrawRect obj, long cptr, boolean take_or_release);
  public final static native void delete_MgCmdManager(long jarg1);
  public final static native void MgCmdManager_release(long jarg1, MgCmdManager jarg1_);
  public final static native long MgCmdManager_getCommand(long jarg1, MgCmdManager jarg1_);
  public final static native long MgCmdManager_findCommand(long jarg1, MgCmdManager jarg1_, String jarg2);
  public final static native boolean MgCmdManager_setCommand(long jarg1, MgCmdManager jarg1_, long jarg2, MgMotion jarg2_, String jarg3, long jarg4, MgStorage jarg4_);
  public final static native boolean MgCmdManager_switchCommand(long jarg1, MgCmdManager jarg1_, long jarg2, MgMotion jarg2_);
  public final static native boolean MgCmdManager_cancel(long jarg1, MgCmdManager jarg1_, long jarg2, MgMotion jarg2_);
  public final static native void MgCmdManager_unloadCommands(long jarg1, MgCmdManager jarg1_);
  public final static native int MgCmdManager_getNewShapeID(long jarg1, MgCmdManager jarg1_);
  public final static native void MgCmdManager_setNewShapeID(long jarg1, MgCmdManager jarg1_, int jarg2);
  public final static native float MgCmdManager_displayMmToModel__SWIG_0(long jarg1, MgCmdManager jarg1_, float jarg2, long jarg3, GiGraphics jarg3_);
  public final static native float MgCmdManager_displayMmToModel__SWIG_1(long jarg1, MgCmdManager jarg1_, float jarg2, long jarg3, MgMotion jarg3_);
  public final static native boolean MgCmdManager_dynamicChangeEnded(long jarg1, MgCmdManager jarg1_, long jarg2, MgView jarg2_, boolean jarg3);
  public final static native long MgCmdManager_getSelection(long jarg1, MgCmdManager jarg1_);
  public final static native long MgCmdManager_getActionDispatcher(long jarg1, MgCmdManager jarg1_);
  public final static native boolean MgCmdManager_doContextAction(long jarg1, MgCmdManager jarg1_, long jarg2, MgMotion jarg2_, int jarg3);
  public final static native long MgCmdManager_getSnap(long jarg1, MgCmdManager jarg1_);
  public final static native long MgCmdManager_getCmdSubject(long jarg1, MgCmdManager jarg1_);
  public final static native long MgCmdManager_addImageShape__SWIG_0(long jarg1, MgCmdManager jarg1_, long jarg2, MgMotion jarg2_, String jarg3, float jarg4, float jarg5);
  public final static native long MgCmdManager_addImageShape__SWIG_1(long jarg1, MgCmdManager jarg1_, long jarg2, MgMotion jarg2_, String jarg3, float jarg4, float jarg5, float jarg6, float jarg7, int jarg8);
  public final static native void MgCmdManager_getBoundingBox(long jarg1, MgCmdManager jarg1_, long jarg2, Box2d jarg2_, long jarg3, MgMotion jarg3_);
  public final static native long MgCmdManagerFactory_create();
  public final static native long new_MgCmdManagerFactory();
  public final static native void delete_MgCmdManagerFactory(long jarg1);
  public final static native int MgLayer_Type();
  public final static native long MgLayer_cloneLayer(long jarg1, MgLayer jarg1_);
  public final static native long MgLayer_create(long jarg1, MgShapeDoc jarg1_, int jarg2);
  public final static native long MgLayer_doc(long jarg1, MgLayer jarg1_);
  public final static native boolean MgLayer_isHided(long jarg1, MgLayer jarg1_);
  public final static native void MgLayer_setHided(long jarg1, MgLayer jarg1_, boolean jarg2);
  public final static native boolean MgLayer_isLocked(long jarg1, MgLayer jarg1_);
  public final static native void MgLayer_setLocked(long jarg1, MgLayer jarg1_, boolean jarg2);
  public final static native long MgLayer_clone(long jarg1, MgLayer jarg1_);
  public final static native void MgLayer_copy(long jarg1, MgLayer jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgLayer_release(long jarg1, MgLayer jarg1_);
  public final static native boolean MgLayer_equals(long jarg1, MgLayer jarg1_, long jarg2, MgObject jarg2_);
  public final static native int MgLayer_getType(long jarg1, MgLayer jarg1_);
  public final static native boolean MgLayer_isKindOf(long jarg1, MgLayer jarg1_, int jarg2);
  public final static native int MgShapeDoc_Type();
  public final static native long MgShapeDoc_cloneDoc(long jarg1, MgShapeDoc jarg1_);
  public final static native long MgShapeDoc_shallowCopy(long jarg1, MgShapeDoc jarg1_);
  public final static native int MgShapeDoc_copyShapes(long jarg1, MgShapeDoc jarg1_, long jarg2, MgShapeDoc jarg2_, boolean jarg3);
  public final static native long MgShapeDoc_createDoc();
  public final static native boolean MgShapeDoc_save(long jarg1, MgShapeDoc jarg1_, long jarg2, MgStorage jarg2_, int jarg3);
  public final static native boolean MgShapeDoc_saveAll(long jarg1, MgShapeDoc jarg1_, long jarg2, MgStorage jarg2_, long jarg3, GiTransform jarg3_);
  public final static native boolean MgShapeDoc_load(long jarg1, MgShapeDoc jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_, boolean jarg4);
  public final static native boolean MgShapeDoc_loadAll(long jarg1, MgShapeDoc jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgStorage jarg3_, long jarg4, GiTransform jarg4_);
  public final static native void MgShapeDoc_clear(long jarg1, MgShapeDoc jarg1_);
  public final static native void MgShapeDoc_clearCachedData(long jarg1, MgShapeDoc jarg1_);
  public final static native int MgShapeDoc_draw(long jarg1, MgShapeDoc jarg1_, long jarg2, GiGraphics jarg2_);
  public final static native int MgShapeDoc_dyndraw(long jarg1, MgShapeDoc jarg1_, int jarg2, long jarg3, GiGraphics jarg3_);
  public final static native long MgShapeDoc_getExtent(long jarg1, MgShapeDoc jarg1_);
  public final static native int MgShapeDoc_getShapeCount(long jarg1, MgShapeDoc jarg1_);
  public final static native long MgShapeDoc_findShape(long jarg1, MgShapeDoc jarg1_, int jarg2);
  public final static native long MgShapeDoc_getLastShape(long jarg1, MgShapeDoc jarg1_);
  public final static native long MgShapeDoc_getCurrentShapes(long jarg1, MgShapeDoc jarg1_);
  public final static native boolean MgShapeDoc_setCurrentShapes(long jarg1, MgShapeDoc jarg1_, long jarg2, MgShapes jarg2_);
  public final static native long MgShapeDoc_getCurrentLayer(long jarg1, MgShapeDoc jarg1_);
  public final static native boolean MgShapeDoc_switchLayer(long jarg1, MgShapeDoc jarg1_, int jarg2);
  public final static native int MgShapeDoc_getLayerCount(long jarg1, MgShapeDoc jarg1_);
  public final static native long MgShapeDoc_context(long jarg1, MgShapeDoc jarg1_);
  public final static native long MgShapeDoc_modelTransform(long jarg1, MgShapeDoc jarg1_);
  public final static native long MgShapeDoc_getPageRectW(long jarg1, MgShapeDoc jarg1_);
  public final static native float MgShapeDoc_getViewScale(long jarg1, MgShapeDoc jarg1_);
  public final static native void MgShapeDoc_setPageRectW__SWIG_0(long jarg1, MgShapeDoc jarg1_, long jarg2, Box2d jarg2_, float jarg3, boolean jarg4);
  public final static native void MgShapeDoc_setPageRectW__SWIG_1(long jarg1, MgShapeDoc jarg1_, long jarg2, Box2d jarg2_, float jarg3);
  public final static native boolean MgShapeDoc_zoomToInitial(long jarg1, MgShapeDoc jarg1_, long jarg2, GiTransform jarg2_);
  public final static native boolean MgShapeDoc_isReadOnly(long jarg1, MgShapeDoc jarg1_);
  public final static native void MgShapeDoc_setReadOnly(long jarg1, MgShapeDoc jarg1_, boolean jarg2);
  public final static native long MgShapeDoc_fromHandle(int jarg1);
  public final static native int MgShapeDoc_toHandle(long jarg1, MgShapeDoc jarg1_);
  public final static native long MgShapeDoc_clone(long jarg1, MgShapeDoc jarg1_);
  public final static native void MgShapeDoc_copy(long jarg1, MgShapeDoc jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgShapeDoc_release(long jarg1, MgShapeDoc jarg1_);
  public final static native void MgShapeDoc_addRef(long jarg1, MgShapeDoc jarg1_);
  public final static native boolean MgShapeDoc_equals(long jarg1, MgShapeDoc jarg1_, long jarg2, MgObject jarg2_);
  public final static native int MgShapeDoc_getType(long jarg1, MgShapeDoc jarg1_);
  public final static native boolean MgShapeDoc_isKindOf(long jarg1, MgShapeDoc jarg1_, int jarg2);
  public final static native void delete_GiView(long jarg1);
  public final static native void GiView_regenAll(long jarg1, GiView jarg1_, boolean jarg2);
  public final static native void GiView_regenAllSwigExplicitGiView(long jarg1, GiView jarg1_, boolean jarg2);
  public final static native void GiView_regenAppend(long jarg1, GiView jarg1_, int jarg2, int jarg3);
  public final static native void GiView_regenAppendSwigExplicitGiView(long jarg1, GiView jarg1_, int jarg2, int jarg3);
  public final static native void GiView_redraw(long jarg1, GiView jarg1_, boolean jarg2);
  public final static native void GiView_redrawSwigExplicitGiView(long jarg1, GiView jarg1_, boolean jarg2);
  public final static native boolean GiView_useFinger(long jarg1, GiView jarg1_);
  public final static native boolean GiView_useFingerSwigExplicitGiView(long jarg1, GiView jarg1_);
  public final static native boolean GiView_isContextActionsVisible(long jarg1, GiView jarg1_);
  public final static native boolean GiView_isContextActionsVisibleSwigExplicitGiView(long jarg1, GiView jarg1_);
  public final static native boolean GiView_showContextActions(long jarg1, GiView jarg1_, long jarg2, Ints jarg2_, long jarg3, Floats jarg3_, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native boolean GiView_showContextActionsSwigExplicitGiView(long jarg1, GiView jarg1_, long jarg2, Ints jarg2_, long jarg3, Floats jarg3_, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native void GiView_hideContextActions(long jarg1, GiView jarg1_);
  public final static native void GiView_hideContextActionsSwigExplicitGiView(long jarg1, GiView jarg1_);
  public final static native void GiView_commandChanged(long jarg1, GiView jarg1_);
  public final static native void GiView_commandChangedSwigExplicitGiView(long jarg1, GiView jarg1_);
  public final static native void GiView_selectionChanged(long jarg1, GiView jarg1_);
  public final static native void GiView_selectionChangedSwigExplicitGiView(long jarg1, GiView jarg1_);
  public final static native void GiView_contentChanged(long jarg1, GiView jarg1_);
  public final static native void GiView_contentChangedSwigExplicitGiView(long jarg1, GiView jarg1_);
  public final static native void GiView_dynamicChanged(long jarg1, GiView jarg1_);
  public final static native void GiView_dynamicChangedSwigExplicitGiView(long jarg1, GiView jarg1_);
  public final static native void GiView_zoomChanged(long jarg1, GiView jarg1_);
  public final static native void GiView_zoomChangedSwigExplicitGiView(long jarg1, GiView jarg1_);
  public final static native void GiView_viewChanged(long jarg1, GiView jarg1_, long jarg2, GiView jarg2_);
  public final static native void GiView_viewChangedSwigExplicitGiView(long jarg1, GiView jarg1_, long jarg2, GiView jarg2_);
  public final static native void GiView_shapeWillDelete(long jarg1, GiView jarg1_, int jarg2);
  public final static native void GiView_shapeWillDeleteSwigExplicitGiView(long jarg1, GiView jarg1_, int jarg2);
  public final static native void GiView_shapeDeleted(long jarg1, GiView jarg1_, int jarg2);
  public final static native void GiView_shapeDeletedSwigExplicitGiView(long jarg1, GiView jarg1_, int jarg2);
  public final static native boolean GiView_shapeDblClick(long jarg1, GiView jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native boolean GiView_shapeDblClickSwigExplicitGiView(long jarg1, GiView jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native boolean GiView_shapeClicked(long jarg1, GiView jarg1_, int jarg2, int jarg3, int jarg4, float jarg5, float jarg6);
  public final static native boolean GiView_shapeClickedSwigExplicitGiView(long jarg1, GiView jarg1_, int jarg2, int jarg3, int jarg4, float jarg5, float jarg6);
  public final static native void GiView_showMessage(long jarg1, GiView jarg1_, String jarg2);
  public final static native void GiView_showMessageSwigExplicitGiView(long jarg1, GiView jarg1_, String jarg2);
  public final static native void GiView_getLocalizedString(long jarg1, GiView jarg1_, String jarg2, long jarg3, MgStringCallback jarg3_);
  public final static native void GiView_getLocalizedStringSwigExplicitGiView(long jarg1, GiView jarg1_, String jarg2, long jarg3, MgStringCallback jarg3_);
  public final static native long new_GiView();
  public final static native void GiView_director_connect(GiView obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void GiView_change_ownership(GiView obj, long cptr, boolean take_or_release);
  public final static native void delete_MgStringCallback(long jarg1);
  public final static native void MgStringCallback_onGetString(long jarg1, MgStringCallback jarg1_, String jarg2);
  public final static native long new_MgStringCallback();
  public final static native void MgStringCallback_director_connect(MgStringCallback obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void MgStringCallback_change_ownership(MgStringCallback obj, long cptr, boolean take_or_release);
  public final static native void delete_MgFindImageCallback(long jarg1);
  public final static native void MgFindImageCallback_onFindImage(long jarg1, MgFindImageCallback jarg1_, int jarg2, String jarg3);
  public final static native long new_MgFindImageCallback();
  public final static native void MgFindImageCallback_director_connect(MgFindImageCallback obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void MgFindImageCallback_change_ownership(MgFindImageCallback obj, long cptr, boolean take_or_release);
  public final static native void delete_MgCoreView(long jarg1);
  public final static native long MgCoreView_fromHandle(int jarg1);
  public final static native int MgCoreView_toHandle(long jarg1, MgCoreView jarg1_);
  public final static native void MgCoreView_release(long jarg1, MgCoreView jarg1_);
  public final static native void MgCoreView_addRef(long jarg1, MgCoreView jarg1_);
  public final static native int MgCoreView_viewDataHandle(long jarg1, MgCoreView jarg1_);
  public final static native int MgCoreView_viewAdapterHandle(long jarg1, MgCoreView jarg1_);
  public final static native int MgCoreView_backDoc(long jarg1, MgCoreView jarg1_);
  public final static native int MgCoreView_backShapes(long jarg1, MgCoreView jarg1_);
  public final static native int MgCoreView_acquireFrontDoc__SWIG_0(long jarg1, MgCoreView jarg1_);
  public final static native int MgCoreView_acquireFrontDoc__SWIG_1(long jarg1, MgCoreView jarg1_, int jarg2);
  public final static native void MgCoreView_releaseDoc(int jarg1);
  public final static native int MgCoreView_acquireDynamicShapes(long jarg1, MgCoreView jarg1_);
  public final static native void MgCoreView_releaseShapes(int jarg1);
  public final static native boolean MgCoreView_isDrawing(long jarg1, MgCoreView jarg1_);
  public final static native boolean MgCoreView_isZooming(long jarg1, MgCoreView jarg1_);
  public final static native boolean MgCoreView_isStopping(long jarg1, MgCoreView jarg1_);
  public final static native int MgCoreView_stopDrawing__SWIG_0(long jarg1, MgCoreView jarg1_, boolean jarg2);
  public final static native int MgCoreView_stopDrawing__SWIG_1(long jarg1, MgCoreView jarg1_);
  public final static native boolean MgCoreView_isUndoRecording(long jarg1, MgCoreView jarg1_);
  public final static native boolean MgCoreView_isRecording(long jarg1, MgCoreView jarg1_);
  public final static native boolean MgCoreView_isPlaying(long jarg1, MgCoreView jarg1_);
  public final static native boolean MgCoreView_isPaused(long jarg1, MgCoreView jarg1_);
  public final static native int MgCoreView_getRecordTick(long jarg1, MgCoreView jarg1_, boolean jarg2, int jarg3);
  public final static native boolean MgCoreView_isUndoLoading(long jarg1, MgCoreView jarg1_);
  public final static native boolean MgCoreView_canUndo(long jarg1, MgCoreView jarg1_);
  public final static native boolean MgCoreView_canRedo(long jarg1, MgCoreView jarg1_);
  public final static native int MgCoreView_getRedoIndex(long jarg1, MgCoreView jarg1_);
  public final static native int MgCoreView_getRedoCount(long jarg1, MgCoreView jarg1_);
  public final static native int MgCoreView_getPlayingTick(long jarg1, MgCoreView jarg1_, int jarg2);
  public final static native int MgCoreView_getFrameTick(long jarg1, MgCoreView jarg1_);
  public final static native int MgCoreView_getFrameFlags(long jarg1, MgCoreView jarg1_);
  public final static native int MgCoreView_getFrameIndex(long jarg1, MgCoreView jarg1_);
  public final static native boolean MgCoreView_isPressDragging(long jarg1, MgCoreView jarg1_);
  public final static native boolean MgCoreView_isDrawingCommand(long jarg1, MgCoreView jarg1_);
  public final static native boolean MgCoreView_isCommand(long jarg1, MgCoreView jarg1_, String jarg2);
  public final static native void MgCoreView_getCommand(long jarg1, MgCoreView jarg1_, long jarg2, MgStringCallback jarg2_);
  public final static native boolean MgCoreView_setCommand__SWIG_0(long jarg1, MgCoreView jarg1_, String jarg2, String jarg3);
  public final static native boolean MgCoreView_setCommand__SWIG_1(long jarg1, MgCoreView jarg1_, String jarg2);
  public final static native boolean MgCoreView_switchCommand(long jarg1, MgCoreView jarg1_);
  public final static native boolean MgCoreView_doContextAction(long jarg1, MgCoreView jarg1_, int jarg2);
  public final static native void MgCoreView_clearCachedData(long jarg1, MgCoreView jarg1_);
  public final static native int MgCoreView_addShapesForTest__SWIG_0(long jarg1, MgCoreView jarg1_, int jarg2);
  public final static native int MgCoreView_addShapesForTest__SWIG_1(long jarg1, MgCoreView jarg1_);
  public final static native int MgCoreView_getShapeCount__SWIG_0(long jarg1, MgCoreView jarg1_);
  public final static native int MgCoreView_getShapeCount__SWIG_1(long jarg1, MgCoreView jarg1_, int jarg2);
  public final static native int MgCoreView_getUnlockedShapeCount__SWIG_0(long jarg1, MgCoreView jarg1_, int jarg2);
  public final static native int MgCoreView_getUnlockedShapeCount__SWIG_1(long jarg1, MgCoreView jarg1_);
  public final static native int MgCoreView_getVisibleShapeCount__SWIG_0(long jarg1, MgCoreView jarg1_, int jarg2);
  public final static native int MgCoreView_getVisibleShapeCount__SWIG_1(long jarg1, MgCoreView jarg1_);
  public final static native int MgCoreView_getChangeCount(long jarg1, MgCoreView jarg1_);
  public final static native int MgCoreView_getDrawCount(long jarg1, MgCoreView jarg1_);
  public final static native int MgCoreView_getSelectedShapeCount(long jarg1, MgCoreView jarg1_);
  public final static native int MgCoreView_getSelectedShapeType(long jarg1, MgCoreView jarg1_);
  public final static native int MgCoreView_getSelectedShapeID(long jarg1, MgCoreView jarg1_);
  public final static native int MgCoreView_getSelectedHandle(long jarg1, MgCoreView jarg1_);
  public final static native void MgCoreView_getSelectedShapeIDs(long jarg1, MgCoreView jarg1_, long jarg2, Ints jarg2_);
  public final static native void MgCoreView_setSelectedShapeIDs(long jarg1, MgCoreView jarg1_, long jarg2, Ints jarg2_);
  public final static native void MgCoreView_clear(long jarg1, MgCoreView jarg1_);
  public final static native boolean MgCoreView_loadFromFile__SWIG_0(long jarg1, MgCoreView jarg1_, String jarg2, boolean jarg3);
  public final static native boolean MgCoreView_loadFromFile__SWIG_1(long jarg1, MgCoreView jarg1_, String jarg2);
  public final static native boolean MgCoreView_saveToFile__SWIG_0(long jarg1, MgCoreView jarg1_, int jarg2, String jarg3, boolean jarg4);
  public final static native boolean MgCoreView_saveToFile__SWIG_1(long jarg1, MgCoreView jarg1_, int jarg2, String jarg3);
  public final static native boolean MgCoreView_saveToFile__SWIG_2(long jarg1, MgCoreView jarg1_, String jarg2, boolean jarg3);
  public final static native boolean MgCoreView_saveToFile__SWIG_3(long jarg1, MgCoreView jarg1_, String jarg2);
  public final static native boolean MgCoreView_loadShapes__SWIG_0(long jarg1, MgCoreView jarg1_, long jarg2, MgStorage jarg2_, boolean jarg3);
  public final static native boolean MgCoreView_loadShapes__SWIG_1(long jarg1, MgCoreView jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgCoreView_saveShapes__SWIG_0(long jarg1, MgCoreView jarg1_, int jarg2, long jarg3, MgStorage jarg3_);
  public final static native boolean MgCoreView_saveShapes__SWIG_1(long jarg1, MgCoreView jarg1_, long jarg2, MgStorage jarg2_);
  public final static native void MgCoreView_getContent__SWIG_0(long jarg1, MgCoreView jarg1_, int jarg2, long jarg3, MgStringCallback jarg3_);
  public final static native void MgCoreView_getContent__SWIG_1(long jarg1, MgCoreView jarg1_, long jarg2, MgStringCallback jarg2_);
  public final static native void MgCoreView_freeContent(long jarg1, MgCoreView jarg1_);
  public final static native boolean MgCoreView_setContent__SWIG_0(long jarg1, MgCoreView jarg1_, String jarg2, boolean jarg3);
  public final static native boolean MgCoreView_setContent__SWIG_1(long jarg1, MgCoreView jarg1_, String jarg2);
  public final static native boolean MgCoreView_zoomToInitial(long jarg1, MgCoreView jarg1_);
  public final static native boolean MgCoreView_zoomToExtent__SWIG_0(long jarg1, MgCoreView jarg1_, float jarg2);
  public final static native boolean MgCoreView_zoomToExtent__SWIG_1(long jarg1, MgCoreView jarg1_);
  public final static native boolean MgCoreView_zoomToModel__SWIG_0(long jarg1, MgCoreView jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6);
  public final static native boolean MgCoreView_zoomToModel__SWIG_1(long jarg1, MgCoreView jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native boolean MgCoreView_zoomPan__SWIG_0(long jarg1, MgCoreView jarg1_, float jarg2, float jarg3, boolean jarg4);
  public final static native boolean MgCoreView_zoomPan__SWIG_1(long jarg1, MgCoreView jarg1_, float jarg2, float jarg3);
  public final static native long MgCoreView_getContext(long jarg1, MgCoreView jarg1_, boolean jarg2);
  public final static native void MgCoreView_setContext__SWIG_0(long jarg1, MgCoreView jarg1_, int jarg2);
  public final static native boolean MgCoreView_getShapeFlag(long jarg1, MgCoreView jarg1_, int jarg2, int jarg3);
  public final static native boolean MgCoreView_setShapeFlag(long jarg1, MgCoreView jarg1_, int jarg2, int jarg3, boolean jarg4);
  public final static native void MgCoreView_setContext__SWIG_1(long jarg1, MgCoreView jarg1_, long jarg2, GiContext jarg2_, int jarg3, int jarg4);
  public final static native void MgCoreView_setContextEditing(long jarg1, MgCoreView jarg1_, boolean jarg2);
  public final static native int MgCoreView_addImageShape__SWIG_0(long jarg1, MgCoreView jarg1_, String jarg2, float jarg3, float jarg4);
  public final static native int MgCoreView_addImageShape__SWIG_1(long jarg1, MgCoreView jarg1_, String jarg2, float jarg3, float jarg4, float jarg5, float jarg6, int jarg7);
  public final static native boolean MgCoreView_hasImageShape(long jarg1, MgCoreView jarg1_, int jarg2);
  public final static native boolean MgCoreView_getImageSize(long jarg1, MgCoreView jarg1_, long jarg2, Floats jarg2_, int jarg3);
  public final static native int MgCoreView_findShapeByImageID(long jarg1, MgCoreView jarg1_, int jarg2, String jarg3);
  public final static native int MgCoreView_findShapeByTag(long jarg1, MgCoreView jarg1_, int jarg2, int jarg3);
  public final static native int MgCoreView_traverseImageShapes(long jarg1, MgCoreView jarg1_, int jarg2, long jarg3, MgFindImageCallback jarg3_);
  public final static native boolean MgCoreView_getViewModelBox(long jarg1, MgCoreView jarg1_, long jarg2, Floats jarg2_);
  public final static native boolean MgCoreView_getModelBox__SWIG_0(long jarg1, MgCoreView jarg1_, long jarg2, Floats jarg2_);
  public final static native boolean MgCoreView_getModelBox__SWIG_1(long jarg1, MgCoreView jarg1_, long jarg2, Floats jarg2_, int jarg3);
  public final static native boolean MgCoreView_getHandlePoint(long jarg1, MgCoreView jarg1_, long jarg2, Floats jarg2_, int jarg3, int jarg4);
  public final static native boolean MgCoreView_getDisplayExtent__SWIG_0(long jarg1, MgCoreView jarg1_, long jarg2, Floats jarg2_);
  public final static native boolean MgCoreView_getDisplayExtent__SWIG_1(long jarg1, MgCoreView jarg1_, int jarg2, int jarg3, long jarg4, Floats jarg4_);
  public final static native boolean MgCoreView_getBoundingBox__SWIG_0(long jarg1, MgCoreView jarg1_, long jarg2, Floats jarg2_);
  public final static native boolean MgCoreView_getBoundingBox__SWIG_1(long jarg1, MgCoreView jarg1_, long jarg2, Floats jarg2_, int jarg3);
  public final static native boolean MgCoreView_getBoundingBox__SWIG_2(long jarg1, MgCoreView jarg1_, int jarg2, int jarg3, long jarg4, Floats jarg4_, int jarg5);
  public final static native boolean MgCoreView_displayToModel(long jarg1, MgCoreView jarg1_, long jarg2, Floats jarg2_);
  public final static native int MgCoreView_importSVGPath(long jarg1, MgCoreView jarg1_, int jarg2, int jarg3, String jarg4);
  public final static native int MgCoreView_exportSVGPath(long jarg1, MgCoreView jarg1_, int jarg2, int jarg3, String jarg4, int jarg5);
  public final static native boolean MgCoreView_exportSVGPath2(long jarg1, MgCoreView jarg1_, long jarg2, MgStringCallback jarg2_, int jarg3, int jarg4);
  public final static native void delete_MgOptionCallback(long jarg1);
  public final static native void MgOptionCallback_onGetOptionBool(long jarg1, MgOptionCallback jarg1_, String jarg2, boolean jarg3);
  public final static native void MgOptionCallback_onGetOptionInt(long jarg1, MgOptionCallback jarg1_, String jarg2, int jarg3);
  public final static native void MgOptionCallback_onGetOptionFloat(long jarg1, MgOptionCallback jarg1_, String jarg2, float jarg3);
  public final static native void MgOptionCallback_onGetOptionString(long jarg1, MgOptionCallback jarg1_, String jarg2, String jarg3);
  public final static native long new_MgOptionCallback();
  public final static native void MgOptionCallback_director_connect(MgOptionCallback obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void MgOptionCallback_change_ownership(MgOptionCallback obj, long cptr, boolean take_or_release);
  public final static native long new_MgRegenLocker(long jarg1, MgView jarg1_);
  public final static native void delete_MgRegenLocker(long jarg1);
  public final static native long GiCoreView_createView__SWIG_0(long jarg1, GiView jarg1_, int jarg2);
  public final static native long GiCoreView_createView__SWIG_1(long jarg1, GiView jarg1_);
  public final static native long GiCoreView_createMagnifierView(long jarg1, GiView jarg1_, long jarg2, GiCoreView jarg2_, long jarg3, GiView jarg3_);
  public final static native void GiCoreView_destoryView(long jarg1, GiCoreView jarg1_, long jarg2, GiView jarg2_);
  public final static native int GiCoreView_acquireGraphics(long jarg1, GiCoreView jarg1_, long jarg2, GiView jarg2_);
  public final static native void GiCoreView_releaseGraphics(long jarg1, GiCoreView jarg1_, int jarg2);
  public final static native int GiCoreView_acquireFrontDocs(long jarg1, GiCoreView jarg1_, long jarg2, Longs jarg2_);
  public final static native void GiCoreView_releaseDocs(long jarg1, Longs jarg1_);
  public final static native int GiCoreView_getSkipDrawIds(long jarg1, GiCoreView jarg1_, long jarg2, Ints jarg2_);
  public final static native int GiCoreView_acquireDynamicShapesArray(long jarg1, GiCoreView jarg1_, long jarg2, Longs jarg2_);
  public final static native void GiCoreView_releaseShapesArray(long jarg1, Longs jarg1_);
  public final static native int GiCoreView_drawAll__SWIG_0(long jarg1, GiCoreView jarg1_, int jarg2, int jarg3, long jarg4, GiCanvas jarg4_);
  public final static native int GiCoreView_drawAll__SWIG_1(long jarg1, GiCoreView jarg1_, long jarg2, Longs jarg2_, int jarg3, long jarg4, GiCanvas jarg4_);
  public final static native int GiCoreView_drawAll__SWIG_2(long jarg1, GiCoreView jarg1_, long jarg2, Longs jarg2_, int jarg3, long jarg4, GiCanvas jarg4_, long jarg5, Ints jarg5_);
  public final static native int GiCoreView_drawAppend__SWIG_0(long jarg1, GiCoreView jarg1_, int jarg2, int jarg3, long jarg4, GiCanvas jarg4_, int jarg5);
  public final static native int GiCoreView_dynDraw__SWIG_0(long jarg1, GiCoreView jarg1_, int jarg2, int jarg3, long jarg4, GiCanvas jarg4_);
  public final static native int GiCoreView_dynDraw__SWIG_1(long jarg1, GiCoreView jarg1_, long jarg2, Longs jarg2_, int jarg3, long jarg4, GiCanvas jarg4_);
  public final static native int GiCoreView_drawAll__SWIG_3(long jarg1, GiCoreView jarg1_, long jarg2, GiView jarg2_, long jarg3, GiCanvas jarg3_);
  public final static native int GiCoreView_drawAppend__SWIG_1(long jarg1, GiCoreView jarg1_, long jarg2, GiView jarg2_, long jarg3, GiCanvas jarg3_, int jarg4);
  public final static native int GiCoreView_dynDraw__SWIG_2(long jarg1, GiCoreView jarg1_, long jarg2, GiView jarg2_, long jarg3, GiCanvas jarg3_);
  public final static native int GiCoreView_setBkColor(long jarg1, GiCoreView jarg1_, long jarg2, GiView jarg2_, int jarg3);
  public final static native void GiCoreView_setScreenDpi__SWIG_0(int jarg1, float jarg2);
  public final static native void GiCoreView_setScreenDpi__SWIG_1(int jarg1);
  public final static native void GiCoreView_onSize(long jarg1, GiCoreView jarg1_, long jarg2, GiView jarg2_, int jarg3, int jarg4);
  public final static native void GiCoreView_setViewScaleRange(long jarg1, GiCoreView jarg1_, long jarg2, GiView jarg2_, float jarg3, float jarg4);
  public final static native void GiCoreView_setPenWidthRange(long jarg1, GiCoreView jarg1_, long jarg2, GiView jarg2_, float jarg3, float jarg4);
  public final static native void GiCoreView_setGestureVelocity(long jarg1, GiCoreView jarg1_, long jarg2, GiView jarg2_, float jarg3, float jarg4);
  public final static native boolean GiCoreView_onGesture__SWIG_0(long jarg1, GiCoreView jarg1_, long jarg2, GiView jarg2_, int jarg3, int jarg4, float jarg5, float jarg6, boolean jarg7);
  public final static native boolean GiCoreView_onGesture__SWIG_1(long jarg1, GiCoreView jarg1_, long jarg2, GiView jarg2_, int jarg3, int jarg4, float jarg5, float jarg6);
  public final static native boolean GiCoreView_twoFingersMove__SWIG_0(long jarg1, GiCoreView jarg1_, long jarg2, GiView jarg2_, int jarg3, float jarg4, float jarg5, float jarg6, float jarg7, boolean jarg8);
  public final static native boolean GiCoreView_twoFingersMove__SWIG_1(long jarg1, GiCoreView jarg1_, long jarg2, GiView jarg2_, int jarg3, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native boolean GiCoreView_submitBackDoc(long jarg1, GiCoreView jarg1_, long jarg2, GiView jarg2_, boolean jarg3);
  public final static native boolean GiCoreView_submitDynamicShapes(long jarg1, GiCoreView jarg1_, long jarg2, GiView jarg2_);
  public final static native float GiCoreView_calcPenWidth(long jarg1, GiCoreView jarg1_, long jarg2, GiView jarg2_, float jarg3);
  public final static native int GiCoreView_getGestureType(long jarg1, GiCoreView jarg1_);
  public final static native int GiCoreView_getGestureState(long jarg1, GiCoreView jarg1_);
  public final static native int GiCoreView_getVersion();
  public final static native boolean GiCoreView_isZoomEnabled(long jarg1, GiCoreView jarg1_, long jarg2, GiView jarg2_);
  public final static native void GiCoreView_setZoomEnabled(long jarg1, GiCoreView jarg1_, long jarg2, GiView jarg2_, boolean jarg3);
  public final static native int GiCoreView_exportSVG__SWIG_0(long jarg1, GiCoreView jarg1_, int jarg2, int jarg3, String jarg4);
  public final static native int GiCoreView_exportSVG__SWIG_1(long jarg1, GiCoreView jarg1_, long jarg2, GiView jarg2_, String jarg3);
  public final static native boolean GiCoreView_startRecord__SWIG_0(long jarg1, GiCoreView jarg1_, String jarg2, int jarg3, boolean jarg4, int jarg5, long jarg6, MgStringCallback jarg6_);
  public final static native boolean GiCoreView_startRecord__SWIG_1(long jarg1, GiCoreView jarg1_, String jarg2, int jarg3, boolean jarg4, int jarg5);
  public final static native void GiCoreView_stopRecord(long jarg1, GiCoreView jarg1_, boolean jarg2);
  public final static native boolean GiCoreView_recordShapes__SWIG_0(long jarg1, GiCoreView jarg1_, boolean jarg2, int jarg3, int jarg4, int jarg5, int jarg6);
  public final static native boolean GiCoreView_recordShapes__SWIG_1(long jarg1, GiCoreView jarg1_, boolean jarg2, int jarg3, int jarg4, int jarg5, int jarg6, long jarg7, Longs jarg7_, long jarg8, MgStringCallback jarg8_);
  public final static native boolean GiCoreView_recordShapes__SWIG_2(long jarg1, GiCoreView jarg1_, boolean jarg2, int jarg3, int jarg4, int jarg5, int jarg6, long jarg7, Longs jarg7_);
  public final static native boolean GiCoreView_undo(long jarg1, GiCoreView jarg1_, long jarg2, GiView jarg2_);
  public final static native boolean GiCoreView_redo(long jarg1, GiCoreView jarg1_, long jarg2, GiView jarg2_);
  public final static native boolean GiCoreView_onPause(long jarg1, GiCoreView jarg1_, int jarg2);
  public final static native boolean GiCoreView_onResume(long jarg1, GiCoreView jarg1_, int jarg2);
  public final static native boolean GiCoreView_restoreRecord(long jarg1, GiCoreView jarg1_, int jarg2, String jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9);
  public final static native void GiCoreView_traverseOptions(long jarg1, GiCoreView jarg1_, long jarg2, MgOptionCallback jarg2_);
  public final static native void GiCoreView_setOptionBool(long jarg1, GiCoreView jarg1_, String jarg2, boolean jarg3);
  public final static native void GiCoreView_setOptionInt(long jarg1, GiCoreView jarg1_, String jarg2, int jarg3);
  public final static native void GiCoreView_setOptionFloat(long jarg1, GiCoreView jarg1_, String jarg2, float jarg3);
  public final static native void GiCoreView_setOptionString(long jarg1, GiCoreView jarg1_, String jarg2, String jarg3);
  public final static native void TestCanvas_initRand();
  public final static native int TestCanvas_randInt(int jarg1, int jarg2);
  public final static native float TestCanvas_randFloat(float jarg1, float jarg2);
  public final static native void TestCanvas_test__SWIG_0(long jarg1, GiCanvas jarg1_, int jarg2, int jarg3, boolean jarg4);
  public final static native void TestCanvas_test__SWIG_1(long jarg1, GiCanvas jarg1_, int jarg2, int jarg3);
  public final static native void TestCanvas_test__SWIG_2(long jarg1, GiCanvas jarg1_, int jarg2);
  public final static native void TestCanvas_testRect(long jarg1, GiCanvas jarg1_, int jarg2);
  public final static native void TestCanvas_testLine(long jarg1, GiCanvas jarg1_, int jarg2);
  public final static native void TestCanvas_testEllipse(long jarg1, GiCanvas jarg1_, int jarg2);
  public final static native void TestCanvas_testQuadBezier(long jarg1, GiCanvas jarg1_, int jarg2);
  public final static native void TestCanvas_testCubicBezier(long jarg1, GiCanvas jarg1_, int jarg2);
  public final static native void TestCanvas_testPolygon(long jarg1, GiCanvas jarg1_, int jarg2);
  public final static native void TestCanvas_testClipPath(long jarg1, GiCanvas jarg1_, int jarg2);
  public final static native void TestCanvas_testHandle(long jarg1, GiCanvas jarg1_, int jarg2);
  public final static native void TestCanvas_testDynCurves(long jarg1, GiCanvas jarg1_);
  public final static native void TestCanvas_testTextAt(long jarg1, GiCanvas jarg1_, int jarg2);
  public final static native void TestCanvas_testRotateText(long jarg1, GiCanvas jarg1_, int jarg2);
  public final static native long new_TestCanvas();
  public final static native void delete_TestCanvas(long jarg1);
  public final static native long GiPlaying_fromHandle(int jarg1);
  public final static native int GiPlaying_toHandle(long jarg1, GiPlaying jarg1_);
  public final static native long GiPlaying_create__SWIG_0(long jarg1, MgCoreView jarg1_, int jarg2, boolean jarg3);
  public final static native long GiPlaying_create__SWIG_1(long jarg1, MgCoreView jarg1_, int jarg2);
  public final static native void GiPlaying_release(long jarg1, GiPlaying jarg1_, long jarg2, MgCoreView jarg2_);
  public final static native void GiPlaying_clear(long jarg1, GiPlaying jarg1_);
  public final static native int GiPlaying_getTag(long jarg1, GiPlaying jarg1_);
  public final static native int GiPlaying_acquireFrontDoc(long jarg1, GiPlaying jarg1_);
  public final static native void GiPlaying_releaseDoc(int jarg1);
  public final static native long GiPlaying_getBackDoc(long jarg1, GiPlaying jarg1_);
  public final static native void GiPlaying_submitBackDoc(long jarg1, GiPlaying jarg1_);
  public final static native int GiPlaying_acquireFrontShapes(long jarg1, GiPlaying jarg1_);
  public final static native void GiPlaying_releaseShapes(int jarg1);
  public final static native int GiPlaying_getBackShapesHandle(long jarg1, GiPlaying jarg1_, boolean jarg2);
  public final static native long GiPlaying_getBackShapes(long jarg1, GiPlaying jarg1_, boolean jarg2);
  public final static native void GiPlaying_submitBackShapes(long jarg1, GiPlaying jarg1_);
  public final static native void GiPlaying_stop(long jarg1, GiPlaying jarg1_);
  public final static native boolean GiPlaying_isStopping(long jarg1, GiPlaying jarg1_);
  public final static native void GiPlayShapes_playing_set(long jarg1, GiPlayShapes jarg1_, long jarg2, GiPlaying jarg2_);
  public final static native long GiPlayShapes_playing_get(long jarg1, GiPlayShapes jarg1_);
  public final static native void GiPlayShapes_player_set(long jarg1, GiPlayShapes jarg1_, long jarg2, MgRecordShapes jarg2_);
  public final static native long GiPlayShapes_player_get(long jarg1, GiPlayShapes jarg1_);
  public final static native long new_GiPlayShapes();
  public final static native void delete_GiPlayShapes(long jarg1);
  public final static native void GiCoreViewData_drawing_set(long jarg1, GiCoreViewData jarg1_, long jarg2, GiPlaying jarg2_);
  public final static native long GiCoreViewData_drawing_get(long jarg1, GiCoreViewData jarg1_);
  public final static native void GiCoreViewData_backDoc_set(long jarg1, GiCoreViewData jarg1_, long jarg2, MgShapeDoc jarg2_);
  public final static native long GiCoreViewData_backDoc_get(long jarg1, GiCoreViewData jarg1_);
  public final static native void GiCoreViewData_play_set(long jarg1, GiCoreViewData jarg1_, long jarg2, GiPlayShapes jarg2_);
  public final static native long GiCoreViewData_play_get(long jarg1, GiCoreViewData jarg1_);
  public final static native void GiCoreViewData_submitBackXform(long jarg1, GiCoreViewData jarg1_);
  public final static native long GiCoreViewData_fromHandle(int jarg1);
  public final static native void delete_GiCoreViewData(long jarg1);
  public final static native long GiCoreViewData_recorder(long jarg1, GiCoreViewData jarg1_, boolean jarg2);
  public final static native void GiCoreViewData_setRecorder(long jarg1, GiCoreViewData jarg1_, boolean jarg2, long jarg3, MgRecordShapes jarg3_);
  public final static native int GiCoreViewData_getPlayingCount(long jarg1, GiCoreViewData jarg1_);
  public final static native int GiCoreViewData_acquireFrontDoc(long jarg1, GiCoreViewData jarg1_, int jarg2);
  public final static native int GiCoreViewData_acquireFrontShapes(long jarg1, GiCoreViewData jarg1_, int jarg2);
  public final static native void GiCoreViewData_addPlaying(long jarg1, GiCoreViewData jarg1_, long jarg2, GiPlaying jarg2_);
  public final static native void GiCoreViewData_removePlaying(long jarg1, GiCoreViewData jarg1_, long jarg2, GiPlaying jarg2_);
  public final static native long new_MgRecordShapes(String jarg1, long jarg2, MgShapeDoc jarg2_, boolean jarg3, int jarg4);
  public final static native void delete_MgRecordShapes(long jarg1);
  public final static native int MgRecordShapes_getCurrentTick(long jarg1, MgRecordShapes jarg1_, int jarg2);
  public final static native boolean MgRecordShapes_isLoading(long jarg1, MgRecordShapes jarg1_);
  public final static native void MgRecordShapes_setLoading(long jarg1, MgRecordShapes jarg1_, boolean jarg2);
  public final static native boolean MgRecordShapes_onResume(long jarg1, MgRecordShapes jarg1_, int jarg2);
  public final static native void MgRecordShapes_restore(long jarg1, MgRecordShapes jarg1_, int jarg2, int jarg3, int jarg4, int jarg5);
  public final static native void MgRecordShapes_stopRecordIndex(long jarg1, MgRecordShapes jarg1_);
  public final static native boolean MgRecordShapes_isPlaying(long jarg1, MgRecordShapes jarg1_);
  public final static native int MgRecordShapes_getFileTick(long jarg1, MgRecordShapes jarg1_);
  public final static native int MgRecordShapes_getFileFlags(long jarg1, MgRecordShapes jarg1_);
  public final static native int MgRecordShapes_getFileCount(long jarg1, MgRecordShapes jarg1_);
  public final static native boolean MgRecordShapes_applyFirstFile__SWIG_0(long jarg1, MgRecordShapes jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgShapeDoc jarg3_);
  public final static native boolean MgRecordShapes_applyFirstFile__SWIG_1(long jarg1, MgRecordShapes jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgShapeDoc jarg3_, String jarg4);
  public final static native int MgRecordShapes_applyRedoFile(long jarg1, MgRecordShapes jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgShapeDoc jarg3_, long jarg4, MgShapes jarg4_, int jarg5);
  public final static native int MgRecordShapes_applyUndoFile(long jarg1, MgRecordShapes jarg1_, long jarg2, MgShapeFactory jarg2_, long jarg3, MgShapeDoc jarg3_, long jarg4, MgShapes jarg4_, int jarg5, int jarg6);
  public final static native long MgBaseShape_SWIGUpcast(long jarg1);
  public final static native long MgBaseRect_SWIGUpcast(long jarg1);
  public final static native long MgRect_SWIGUpcast(long jarg1);
  public final static native long MgBaseLines_SWIGUpcast(long jarg1);
  public final static native long MgLines_SWIGUpcast(long jarg1);
  public final static native long MgArc_SWIGUpcast(long jarg1);
  public final static native long MgDiamond_SWIGUpcast(long jarg1);
  public final static native long MgDot_SWIGUpcast(long jarg1);
  public final static native long MgEllipse_SWIGUpcast(long jarg1);
  public final static native long MgGrid_SWIGUpcast(long jarg1);
  public final static native long MgLine_SWIGUpcast(long jarg1);
  public final static native long MgParallel_SWIGUpcast(long jarg1);
  public final static native long MgPathShape_SWIGUpcast(long jarg1);
  public final static native long MgRoundRect_SWIGUpcast(long jarg1);
  public final static native long MgSplines_SWIGUpcast(long jarg1);
  public final static native long MgShape_SWIGUpcast(long jarg1);
  public final static native long MgShapes_SWIGUpcast(long jarg1);
  public final static native long MgComposite_SWIGUpcast(long jarg1);
  public final static native long MgGroup_SWIGUpcast(long jarg1);
  public final static native long MgImageShape_SWIGUpcast(long jarg1);
  public final static native long CmdObserverDefault_SWIGUpcast(long jarg1);
  public final static native long CmdSubject_SWIGUpcast(long jarg1);
  public final static native long MgCommandDraw_SWIGUpcast(long jarg1);
  public final static native long MgCmdArc3P_SWIGUpcast(long jarg1);
  public final static native long MgCmdArcCSE_SWIGUpcast(long jarg1);
  public final static native long MgCmdSector_SWIGUpcast(long jarg1);
  public final static native long MgCmdCompass_SWIGUpcast(long jarg1);
  public final static native long MgCmdArcTan_SWIGUpcast(long jarg1);
  public final static native long MgCmdDrawRect_SWIGUpcast(long jarg1);
  public final static native long MgLayer_SWIGUpcast(long jarg1);
  public final static native long MgShapeDoc_SWIGUpcast(long jarg1);
  public final static native long GiCoreView_SWIGUpcast(long jarg1);
  public final static native long GiCoreViewData_SWIGUpcast(long jarg1);

  public static void SwigDirector_GiCanvas_setPen(GiCanvas jself, int argb, float width, int style, float phase, float orgw) {
    jself.setPen(argb, width, style, phase, orgw);
  }
  public static void SwigDirector_GiCanvas_setBrush(GiCanvas jself, int argb, int style) {
    jself.setBrush(argb, style);
  }
  public static void SwigDirector_GiCanvas_clearRect(GiCanvas jself, float x, float y, float w, float h) {
    jself.clearRect(x, y, w, h);
  }
  public static void SwigDirector_GiCanvas_drawRect(GiCanvas jself, float x, float y, float w, float h, boolean stroke, boolean fill) {
    jself.drawRect(x, y, w, h, stroke, fill);
  }
  public static void SwigDirector_GiCanvas_drawLine(GiCanvas jself, float x1, float y1, float x2, float y2) {
    jself.drawLine(x1, y1, x2, y2);
  }
  public static void SwigDirector_GiCanvas_drawEllipse(GiCanvas jself, float x, float y, float w, float h, boolean stroke, boolean fill) {
    jself.drawEllipse(x, y, w, h, stroke, fill);
  }
  public static void SwigDirector_GiCanvas_beginPath(GiCanvas jself) {
    jself.beginPath();
  }
  public static void SwigDirector_GiCanvas_moveTo(GiCanvas jself, float x, float y) {
    jself.moveTo(x, y);
  }
  public static void SwigDirector_GiCanvas_lineTo(GiCanvas jself, float x, float y) {
    jself.lineTo(x, y);
  }
  public static void SwigDirector_GiCanvas_bezierTo(GiCanvas jself, float c1x, float c1y, float c2x, float c2y, float x, float y) {
    jself.bezierTo(c1x, c1y, c2x, c2y, x, y);
  }
  public static void SwigDirector_GiCanvas_quadTo(GiCanvas jself, float cpx, float cpy, float x, float y) {
    jself.quadTo(cpx, cpy, x, y);
  }
  public static void SwigDirector_GiCanvas_closePath(GiCanvas jself) {
    jself.closePath();
  }
  public static void SwigDirector_GiCanvas_drawPath(GiCanvas jself, boolean stroke, boolean fill) {
    jself.drawPath(stroke, fill);
  }
  public static void SwigDirector_GiCanvas_saveClip(GiCanvas jself) {
    jself.saveClip();
  }
  public static void SwigDirector_GiCanvas_restoreClip(GiCanvas jself) {
    jself.restoreClip();
  }
  public static boolean SwigDirector_GiCanvas_clipRect(GiCanvas jself, float x, float y, float w, float h) {
    return jself.clipRect(x, y, w, h);
  }
  public static boolean SwigDirector_GiCanvas_clipPath(GiCanvas jself) {
    return jself.clipPath();
  }
  public static boolean SwigDirector_GiCanvas_drawHandle(GiCanvas jself, float x, float y, int type, float angle) {
    return jself.drawHandle(x, y, type, angle);
  }
  public static boolean SwigDirector_GiCanvas_drawBitmap(GiCanvas jself, String name, float xc, float yc, float w, float h, float angle) {
    return jself.drawBitmap(name, xc, yc, w, h, angle);
  }
  public static float SwigDirector_GiCanvas_drawTextAt(GiCanvas jself, String text, float x, float y, float h, int align, float angle) {
    return jself.drawTextAt(text, x, y, h, align, angle);
  }
  public static boolean SwigDirector_GiCanvas_beginShape(GiCanvas jself, int type, int sid, int version, float x, float y, float w, float h) {
    return jself.beginShape(type, sid, version, x, y, w, h);
  }
  public static void SwigDirector_GiCanvas_endShape(GiCanvas jself, int type, int sid, float x, float y) {
    jself.endShape(type, sid, x, y);
  }
  public static long SwigDirector_MgObject_clone(MgObject jself) {
    return MgObject.getCPtr(jself.clone());
  }
  public static void SwigDirector_MgObject_copy(MgObject jself, long src) {
    jself.copy(new MgObject(src, false));
  }
  public static void SwigDirector_MgObject_release(MgObject jself) {
    jself.release();
  }
  public static void SwigDirector_MgObject_addRef(MgObject jself) {
    jself.addRef();
  }
  public static boolean SwigDirector_MgObject_equals(MgObject jself, long src) {
    return jself.equals(new MgObject(src, false));
  }
  public static int SwigDirector_MgObject_getType(MgObject jself) {
    return jself.getType();
  }
  public static boolean SwigDirector_MgObject_isKindOf(MgObject jself, int type) {
    return jself.isKindOf(type);
  }
  public static long SwigDirector_MgBaseShape_clone(MgBaseShape jself) {
    return MgObject.getCPtr(jself.clone());
  }
  public static void SwigDirector_MgBaseShape_copy(MgBaseShape jself, long src) {
    jself.copy(new MgObject(src, false));
  }
  public static void SwigDirector_MgBaseShape_release(MgBaseShape jself) {
    jself.release();
  }
  public static void SwigDirector_MgBaseShape_addRef(MgBaseShape jself) {
    jself.addRef();
  }
  public static boolean SwigDirector_MgBaseShape_equals(MgBaseShape jself, long src) {
    return jself.equals(new MgObject(src, false));
  }
  public static int SwigDirector_MgBaseShape_getType(MgBaseShape jself) {
    return jself.getType();
  }
  public static boolean SwigDirector_MgBaseShape_isKindOf(MgBaseShape jself, int type) {
    return jself.isKindOf(type);
  }
  public static long SwigDirector_MgBaseShape_getExtent(MgBaseShape jself) {
    return Box2d.getCPtr(jself.getExtent());
  }
  public static int SwigDirector_MgBaseShape_getChangeCount(MgBaseShape jself) {
    return jself.getChangeCount();
  }
  public static void SwigDirector_MgBaseShape_resetChangeCount(MgBaseShape jself, int count) {
    jself.resetChangeCount(count);
  }
  public static void SwigDirector_MgBaseShape_afterChanged(MgBaseShape jself) {
    jself.afterChanged();
  }
  public static void SwigDirector_MgBaseShape_update(MgBaseShape jself) {
    jself.update();
  }
  public static void SwigDirector_MgBaseShape_transform(MgBaseShape jself, long mat) {
    jself.transform(new Matrix2d(mat, false));
  }
  public static void SwigDirector_MgBaseShape_clear(MgBaseShape jself) {
    jself.clear();
  }
  public static void SwigDirector_MgBaseShape_clearCachedData(MgBaseShape jself) {
    jself.clearCachedData();
  }
  public static int SwigDirector_MgBaseShape_getPointCount(MgBaseShape jself) {
    return jself.getPointCount();
  }
  public static long SwigDirector_MgBaseShape_getPoint(MgBaseShape jself, int index) {
    return Point2d.getCPtr(jself.getPoint(index));
  }
  public static void SwigDirector_MgBaseShape_setPoint(MgBaseShape jself, int index, long pt) {
    jself.setPoint(index, new Point2d(pt, false));
  }
  public static boolean SwigDirector_MgBaseShape_isClosed(MgBaseShape jself) {
    return jself.isClosed();
  }
  public static boolean SwigDirector_MgBaseShape_isCurve(MgBaseShape jself) {
    return jself.isCurve();
  }
  public static float SwigDirector_MgBaseShape_hitTest(MgBaseShape jself, long pt, float tol, long res) {
    return jself.hitTest(new Point2d(pt, false), tol, new MgHitResult(res, false));
  }
  public static boolean SwigDirector_MgBaseShape_hitTestBox(MgBaseShape jself, long rect) {
    return jself.hitTestBox(new Box2d(rect, false));
  }
  public static boolean SwigDirector_MgBaseShape_draw(MgBaseShape jself, int mode, long gs, long ctx, int segment) {
    return jself.draw(mode, new GiGraphics(gs, false), new GiContext(ctx, false), segment);
  }
  public static boolean SwigDirector_MgBaseShape_draw2(MgBaseShape jself, long owner, int mode, long gs, long ctx, int segment) {
    return jself.draw2((owner == 0) ? null : new MgObject(owner, false), mode, new GiGraphics(gs, false), new GiContext(ctx, false), segment);
  }
  public static void SwigDirector_MgBaseShape_output(MgBaseShape jself, long path) {
    jself.output(new MgPath(path, false));
  }
  public static boolean SwigDirector_MgBaseShape_save(MgBaseShape jself, long s) {
    return jself.save((s == 0) ? null : new MgStorage(s, false));
  }
  public static boolean SwigDirector_MgBaseShape_load(MgBaseShape jself, long factory, long s) {
    return jself.load((factory == 0) ? null : new MgShapeFactory(factory, false), (s == 0) ? null : new MgStorage(s, false));
  }
  public static int SwigDirector_MgBaseShape_getHandleCount(MgBaseShape jself) {
    return jself.getHandleCount();
  }
  public static long SwigDirector_MgBaseShape_getHandlePoint(MgBaseShape jself, int index) {
    return Point2d.getCPtr(jself.getHandlePoint(index));
  }
  public static boolean SwigDirector_MgBaseShape_setHandlePoint(MgBaseShape jself, int index, long pt, float tol) {
    return jself.setHandlePoint(index, new Point2d(pt, false), tol);
  }
  public static boolean SwigDirector_MgBaseShape_isHandleFixed(MgBaseShape jself, int index) {
    return jself.isHandleFixed(index);
  }
  public static int SwigDirector_MgBaseShape_getHandleType(MgBaseShape jself, int index) {
    return jself.getHandleType(index);
  }
  public static boolean SwigDirector_MgBaseShape_offset(MgBaseShape jself, long vec, int segment) {
    return jself.offset(new Vector2d(vec, false), segment);
  }
  public static void SwigDirector_MgBaseShape_setFlag(MgBaseShape jself, int bit, boolean on) {
    jself.setFlag(MgShapeBit.swigToEnum(bit), on);
  }
  public static void SwigDirector_MgBaseShape_setOwner(MgBaseShape jself, long owner) {
    jself.setOwner((owner == 0) ? null : new MgObject(owner, false));
  }
  public static int SwigDirector_MgBaseShape_getSubType(MgBaseShape jself) {
    return jself.getSubType();
  }
  public static long SwigDirector_MgBaseRect_clone(MgBaseRect jself) {
    return MgObject.getCPtr(jself.clone());
  }
  public static void SwigDirector_MgBaseRect_copy(MgBaseRect jself, long src) {
    jself.copy(new MgObject(src, false));
  }
  public static void SwigDirector_MgBaseRect_release(MgBaseRect jself) {
    jself.release();
  }
  public static void SwigDirector_MgBaseRect_addRef(MgBaseRect jself) {
    jself.addRef();
  }
  public static boolean SwigDirector_MgBaseRect_equals(MgBaseRect jself, long src) {
    return jself.equals(new MgObject(src, false));
  }
  public static int SwigDirector_MgBaseRect_getType(MgBaseRect jself) {
    return jself.getType();
  }
  public static boolean SwigDirector_MgBaseRect_isKindOf(MgBaseRect jself, int type) {
    return jself.isKindOf(type);
  }
  public static long SwigDirector_MgBaseRect_getExtent(MgBaseRect jself) {
    return Box2d.getCPtr(jself.getExtent());
  }
  public static int SwigDirector_MgBaseRect_getChangeCount(MgBaseRect jself) {
    return jself.getChangeCount();
  }
  public static void SwigDirector_MgBaseRect_resetChangeCount(MgBaseRect jself, int count) {
    jself.resetChangeCount(count);
  }
  public static void SwigDirector_MgBaseRect_afterChanged(MgBaseRect jself) {
    jself.afterChanged();
  }
  public static void SwigDirector_MgBaseRect_update(MgBaseRect jself) {
    jself.update();
  }
  public static void SwigDirector_MgBaseRect_transform(MgBaseRect jself, long mat) {
    jself.transform(new Matrix2d(mat, false));
  }
  public static void SwigDirector_MgBaseRect_clear(MgBaseRect jself) {
    jself.clear();
  }
  public static void SwigDirector_MgBaseRect_clearCachedData(MgBaseRect jself) {
    jself.clearCachedData();
  }
  public static int SwigDirector_MgBaseRect_getPointCount(MgBaseRect jself) {
    return jself.getPointCount();
  }
  public static long SwigDirector_MgBaseRect_getPoint(MgBaseRect jself, int index) {
    return Point2d.getCPtr(jself.getPoint(index));
  }
  public static void SwigDirector_MgBaseRect_setPoint(MgBaseRect jself, int index, long pt) {
    jself.setPoint(index, new Point2d(pt, false));
  }
  public static boolean SwigDirector_MgBaseRect_isClosed(MgBaseRect jself) {
    return jself.isClosed();
  }
  public static boolean SwigDirector_MgBaseRect_isCurve(MgBaseRect jself) {
    return jself.isCurve();
  }
  public static float SwigDirector_MgBaseRect_hitTest(MgBaseRect jself, long pt, float tol, long res) {
    return jself.hitTest(new Point2d(pt, false), tol, new MgHitResult(res, false));
  }
  public static boolean SwigDirector_MgBaseRect_hitTestBox(MgBaseRect jself, long rect) {
    return jself.hitTestBox(new Box2d(rect, false));
  }
  public static boolean SwigDirector_MgBaseRect_draw(MgBaseRect jself, int mode, long gs, long ctx, int segment) {
    return jself.draw(mode, new GiGraphics(gs, false), new GiContext(ctx, false), segment);
  }
  public static boolean SwigDirector_MgBaseRect_draw2(MgBaseRect jself, long owner, int mode, long gs, long ctx, int segment) {
    return jself.draw2((owner == 0) ? null : new MgObject(owner, false), mode, new GiGraphics(gs, false), new GiContext(ctx, false), segment);
  }
  public static void SwigDirector_MgBaseRect_output(MgBaseRect jself, long path) {
    jself.output(new MgPath(path, false));
  }
  public static boolean SwigDirector_MgBaseRect_save(MgBaseRect jself, long s) {
    return jself.save((s == 0) ? null : new MgStorage(s, false));
  }
  public static boolean SwigDirector_MgBaseRect_load(MgBaseRect jself, long factory, long s) {
    return jself.load((factory == 0) ? null : new MgShapeFactory(factory, false), (s == 0) ? null : new MgStorage(s, false));
  }
  public static int SwigDirector_MgBaseRect_getHandleCount(MgBaseRect jself) {
    return jself.getHandleCount();
  }
  public static long SwigDirector_MgBaseRect_getHandlePoint(MgBaseRect jself, int index) {
    return Point2d.getCPtr(jself.getHandlePoint(index));
  }
  public static boolean SwigDirector_MgBaseRect_setHandlePoint(MgBaseRect jself, int index, long pt, float tol) {
    return jself.setHandlePoint(index, new Point2d(pt, false), tol);
  }
  public static boolean SwigDirector_MgBaseRect_isHandleFixed(MgBaseRect jself, int index) {
    return jself.isHandleFixed(index);
  }
  public static int SwigDirector_MgBaseRect_getHandleType(MgBaseRect jself, int index) {
    return jself.getHandleType(index);
  }
  public static boolean SwigDirector_MgBaseRect_offset(MgBaseRect jself, long vec, int segment) {
    return jself.offset(new Vector2d(vec, false), segment);
  }
  public static void SwigDirector_MgBaseRect_setFlag(MgBaseRect jself, int bit, boolean on) {
    jself.setFlag(MgShapeBit.swigToEnum(bit), on);
  }
  public static void SwigDirector_MgBaseRect_setOwner(MgBaseRect jself, long owner) {
    jself.setOwner((owner == 0) ? null : new MgObject(owner, false));
  }
  public static int SwigDirector_MgBaseRect_getSubType(MgBaseRect jself) {
    return jself.getSubType();
  }
  public static long SwigDirector_MgBaseLines_clone(MgBaseLines jself) {
    return MgObject.getCPtr(jself.clone());
  }
  public static void SwigDirector_MgBaseLines_copy(MgBaseLines jself, long src) {
    jself.copy(new MgObject(src, false));
  }
  public static void SwigDirector_MgBaseLines_release(MgBaseLines jself) {
    jself.release();
  }
  public static void SwigDirector_MgBaseLines_addRef(MgBaseLines jself) {
    jself.addRef();
  }
  public static boolean SwigDirector_MgBaseLines_equals(MgBaseLines jself, long src) {
    return jself.equals(new MgObject(src, false));
  }
  public static int SwigDirector_MgBaseLines_getType(MgBaseLines jself) {
    return jself.getType();
  }
  public static boolean SwigDirector_MgBaseLines_isKindOf(MgBaseLines jself, int type) {
    return jself.isKindOf(type);
  }
  public static long SwigDirector_MgBaseLines_getExtent(MgBaseLines jself) {
    return Box2d.getCPtr(jself.getExtent());
  }
  public static int SwigDirector_MgBaseLines_getChangeCount(MgBaseLines jself) {
    return jself.getChangeCount();
  }
  public static void SwigDirector_MgBaseLines_resetChangeCount(MgBaseLines jself, int count) {
    jself.resetChangeCount(count);
  }
  public static void SwigDirector_MgBaseLines_afterChanged(MgBaseLines jself) {
    jself.afterChanged();
  }
  public static void SwigDirector_MgBaseLines_update(MgBaseLines jself) {
    jself.update();
  }
  public static void SwigDirector_MgBaseLines_transform(MgBaseLines jself, long mat) {
    jself.transform(new Matrix2d(mat, false));
  }
  public static void SwigDirector_MgBaseLines_clear(MgBaseLines jself) {
    jself.clear();
  }
  public static void SwigDirector_MgBaseLines_clearCachedData(MgBaseLines jself) {
    jself.clearCachedData();
  }
  public static int SwigDirector_MgBaseLines_getPointCount(MgBaseLines jself) {
    return jself.getPointCount();
  }
  public static long SwigDirector_MgBaseLines_getPoint(MgBaseLines jself, int index) {
    return Point2d.getCPtr(jself.getPoint(index));
  }
  public static void SwigDirector_MgBaseLines_setPoint(MgBaseLines jself, int index, long pt) {
    jself.setPoint(index, new Point2d(pt, false));
  }
  public static boolean SwigDirector_MgBaseLines_isClosed(MgBaseLines jself) {
    return jself.isClosed();
  }
  public static boolean SwigDirector_MgBaseLines_isCurve(MgBaseLines jself) {
    return jself.isCurve();
  }
  public static float SwigDirector_MgBaseLines_hitTest(MgBaseLines jself, long pt, float tol, long res) {
    return jself.hitTest(new Point2d(pt, false), tol, new MgHitResult(res, false));
  }
  public static boolean SwigDirector_MgBaseLines_hitTestBox(MgBaseLines jself, long rect) {
    return jself.hitTestBox(new Box2d(rect, false));
  }
  public static boolean SwigDirector_MgBaseLines_draw(MgBaseLines jself, int mode, long gs, long ctx, int segment) {
    return jself.draw(mode, new GiGraphics(gs, false), new GiContext(ctx, false), segment);
  }
  public static boolean SwigDirector_MgBaseLines_draw2(MgBaseLines jself, long owner, int mode, long gs, long ctx, int segment) {
    return jself.draw2((owner == 0) ? null : new MgObject(owner, false), mode, new GiGraphics(gs, false), new GiContext(ctx, false), segment);
  }
  public static void SwigDirector_MgBaseLines_output(MgBaseLines jself, long path) {
    jself.output(new MgPath(path, false));
  }
  public static boolean SwigDirector_MgBaseLines_save(MgBaseLines jself, long s) {
    return jself.save((s == 0) ? null : new MgStorage(s, false));
  }
  public static boolean SwigDirector_MgBaseLines_load(MgBaseLines jself, long factory, long s) {
    return jself.load((factory == 0) ? null : new MgShapeFactory(factory, false), (s == 0) ? null : new MgStorage(s, false));
  }
  public static int SwigDirector_MgBaseLines_getHandleCount(MgBaseLines jself) {
    return jself.getHandleCount();
  }
  public static long SwigDirector_MgBaseLines_getHandlePoint(MgBaseLines jself, int index) {
    return Point2d.getCPtr(jself.getHandlePoint(index));
  }
  public static boolean SwigDirector_MgBaseLines_setHandlePoint(MgBaseLines jself, int index, long pt, float tol) {
    return jself.setHandlePoint(index, new Point2d(pt, false), tol);
  }
  public static boolean SwigDirector_MgBaseLines_isHandleFixed(MgBaseLines jself, int index) {
    return jself.isHandleFixed(index);
  }
  public static int SwigDirector_MgBaseLines_getHandleType(MgBaseLines jself, int index) {
    return jself.getHandleType(index);
  }
  public static boolean SwigDirector_MgBaseLines_offset(MgBaseLines jself, long vec, int segment) {
    return jself.offset(new Vector2d(vec, false), segment);
  }
  public static void SwigDirector_MgBaseLines_setFlag(MgBaseLines jself, int bit, boolean on) {
    jself.setFlag(MgShapeBit.swigToEnum(bit), on);
  }
  public static void SwigDirector_MgBaseLines_setOwner(MgBaseLines jself, long owner) {
    jself.setOwner((owner == 0) ? null : new MgObject(owner, false));
  }
  public static int SwigDirector_MgBaseLines_getSubType(MgBaseLines jself) {
    return jself.getSubType();
  }
  public static boolean SwigDirector_MgBaseLines_resize(MgBaseLines jself, int count) {
    return jself.resize(count);
  }
  public static boolean SwigDirector_MgBaseLines_addPoint(MgBaseLines jself, long pt) {
    return jself.addPoint(new Point2d(pt, false));
  }
  public static boolean SwigDirector_MgBaseLines_insertPoint(MgBaseLines jself, int segment, long pt) {
    return jself.insertPoint(segment, new Point2d(pt, false));
  }
  public static boolean SwigDirector_MgBaseLines_removePoint(MgBaseLines jself, int index) {
    return jself.removePoint(index);
  }
  public static long SwigDirector_MgComposite_clone(MgComposite jself) {
    return MgObject.getCPtr(jself.clone());
  }
  public static void SwigDirector_MgComposite_copy(MgComposite jself, long src) {
    jself.copy(new MgObject(src, false));
  }
  public static void SwigDirector_MgComposite_release(MgComposite jself) {
    jself.release();
  }
  public static void SwigDirector_MgComposite_addRef(MgComposite jself) {
    jself.addRef();
  }
  public static boolean SwigDirector_MgComposite_equals(MgComposite jself, long src) {
    return jself.equals(new MgObject(src, false));
  }
  public static int SwigDirector_MgComposite_getType(MgComposite jself) {
    return jself.getType();
  }
  public static boolean SwigDirector_MgComposite_isKindOf(MgComposite jself, int type) {
    return jself.isKindOf(type);
  }
  public static long SwigDirector_MgComposite_getExtent(MgComposite jself) {
    return Box2d.getCPtr(jself.getExtent());
  }
  public static int SwigDirector_MgComposite_getChangeCount(MgComposite jself) {
    return jself.getChangeCount();
  }
  public static void SwigDirector_MgComposite_resetChangeCount(MgComposite jself, int count) {
    jself.resetChangeCount(count);
  }
  public static void SwigDirector_MgComposite_afterChanged(MgComposite jself) {
    jself.afterChanged();
  }
  public static void SwigDirector_MgComposite_update(MgComposite jself) {
    jself.update();
  }
  public static void SwigDirector_MgComposite_transform(MgComposite jself, long mat) {
    jself.transform(new Matrix2d(mat, false));
  }
  public static void SwigDirector_MgComposite_clear(MgComposite jself) {
    jself.clear();
  }
  public static void SwigDirector_MgComposite_clearCachedData(MgComposite jself) {
    jself.clearCachedData();
  }
  public static int SwigDirector_MgComposite_getPointCount(MgComposite jself) {
    return jself.getPointCount();
  }
  public static long SwigDirector_MgComposite_getPoint(MgComposite jself, int index) {
    return Point2d.getCPtr(jself.getPoint(index));
  }
  public static void SwigDirector_MgComposite_setPoint(MgComposite jself, int index, long pt) {
    jself.setPoint(index, new Point2d(pt, false));
  }
  public static boolean SwigDirector_MgComposite_isClosed(MgComposite jself) {
    return jself.isClosed();
  }
  public static boolean SwigDirector_MgComposite_isCurve(MgComposite jself) {
    return jself.isCurve();
  }
  public static float SwigDirector_MgComposite_hitTest(MgComposite jself, long pt, float tol, long res) {
    return jself.hitTest(new Point2d(pt, false), tol, new MgHitResult(res, false));
  }
  public static boolean SwigDirector_MgComposite_hitTestBox(MgComposite jself, long rect) {
    return jself.hitTestBox(new Box2d(rect, false));
  }
  public static boolean SwigDirector_MgComposite_draw(MgComposite jself, int mode, long gs, long ctx, int segment) {
    return jself.draw(mode, new GiGraphics(gs, false), new GiContext(ctx, false), segment);
  }
  public static boolean SwigDirector_MgComposite_draw2(MgComposite jself, long owner, int mode, long gs, long ctx, int segment) {
    return jself.draw2((owner == 0) ? null : new MgObject(owner, false), mode, new GiGraphics(gs, false), new GiContext(ctx, false), segment);
  }
  public static void SwigDirector_MgComposite_output(MgComposite jself, long path) {
    jself.output(new MgPath(path, false));
  }
  public static boolean SwigDirector_MgComposite_save(MgComposite jself, long s) {
    return jself.save((s == 0) ? null : new MgStorage(s, false));
  }
  public static boolean SwigDirector_MgComposite_load(MgComposite jself, long factory, long s) {
    return jself.load((factory == 0) ? null : new MgShapeFactory(factory, false), (s == 0) ? null : new MgStorage(s, false));
  }
  public static int SwigDirector_MgComposite_getHandleCount(MgComposite jself) {
    return jself.getHandleCount();
  }
  public static long SwigDirector_MgComposite_getHandlePoint(MgComposite jself, int index) {
    return Point2d.getCPtr(jself.getHandlePoint(index));
  }
  public static boolean SwigDirector_MgComposite_setHandlePoint(MgComposite jself, int index, long pt, float tol) {
    return jself.setHandlePoint(index, new Point2d(pt, false), tol);
  }
  public static boolean SwigDirector_MgComposite_isHandleFixed(MgComposite jself, int index) {
    return jself.isHandleFixed(index);
  }
  public static int SwigDirector_MgComposite_getHandleType(MgComposite jself, int index) {
    return jself.getHandleType(index);
  }
  public static boolean SwigDirector_MgComposite_offset(MgComposite jself, long vec, int segment) {
    return jself.offset(new Vector2d(vec, false), segment);
  }
  public static void SwigDirector_MgComposite_setFlag(MgComposite jself, int bit, boolean on) {
    jself.setFlag(MgShapeBit.swigToEnum(bit), on);
  }
  public static void SwigDirector_MgComposite_setOwner(MgComposite jself, long owner) {
    jself.setOwner((owner == 0) ? null : new MgObject(owner, false));
  }
  public static int SwigDirector_MgComposite_getSubType(MgComposite jself) {
    return jself.getSubType();
  }
  public static boolean SwigDirector_MgComposite_canOffsetShapeAlone(MgComposite jself, long shape) {
    return jself.canOffsetShapeAlone((shape == 0) ? null : new MgShape(shape, false));
  }
  public static void SwigDirector_MgCommand_release(MgCommand jself) {
    jself.release();
  }
  public static boolean SwigDirector_MgCommand_cancel(MgCommand jself, long sender) {
    return jself.cancel((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCommand_initialize(MgCommand jself, long sender, long s) {
    return jself.initialize((sender == 0) ? null : new MgMotion(sender, false), (s == 0) ? null : new MgStorage(s, false));
  }
  public static boolean SwigDirector_MgCommand_backStep(MgCommand jself, long sender) {
    return jself.backStep((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCommand_draw(MgCommand jself, long sender, long gs) {
    return jself.draw((sender == 0) ? null : new MgMotion(sender, false), (gs == 0) ? null : new GiGraphics(gs, false));
  }
  public static boolean SwigDirector_MgCommand_gatherShapes(MgCommand jself, long sender, long shapes) {
    return jself.gatherShapes((sender == 0) ? null : new MgMotion(sender, false), (shapes == 0) ? null : new MgShapes(shapes, false));
  }
  public static boolean SwigDirector_MgCommand_click(MgCommand jself, long sender) {
    return jself.click((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCommand_doubleClick(MgCommand jself, long sender) {
    return jself.doubleClick((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCommand_longPress(MgCommand jself, long sender) {
    return jself.longPress((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCommand_touchBegan(MgCommand jself, long sender) {
    return jself.touchBegan((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCommand_touchMoved(MgCommand jself, long sender) {
    return jself.touchMoved((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCommand_touchEnded(MgCommand jself, long sender) {
    return jself.touchEnded((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCommand_mouseHover(MgCommand jself, long sender) {
    return jself.mouseHover((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCommand_twoFingersMove(MgCommand jself, long sender) {
    return jself.twoFingersMove((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCommand_isDrawingCommand(MgCommand jself) {
    return jself.isDrawingCommand();
  }
  public static boolean SwigDirector_MgCommand_isFloatingCommand(MgCommand jself) {
    return jself.isFloatingCommand();
  }
  public static boolean SwigDirector_MgCommand_doContextAction(MgCommand jself, long sender, int action) {
    return jself.doContextAction((sender == 0) ? null : new MgMotion(sender, false), action);
  }
  public static void SwigDirector_CmdObserverDefault_onDocLoaded(CmdObserverDefault jself, long sender, boolean forUndo) {
    jself.onDocLoaded((sender == 0) ? null : new MgMotion(sender, false), forUndo);
  }
  public static void SwigDirector_CmdObserverDefault_onEnterSelectCommand(CmdObserverDefault jself, long sender) {
    jself.onEnterSelectCommand((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static void SwigDirector_CmdObserverDefault_onUnloadCommands(CmdObserverDefault jself, long sender) {
    jself.onUnloadCommands((sender == 0) ? null : new MgCmdManager(sender, false));
  }
  public static boolean SwigDirector_CmdObserverDefault_selectActionsNeedHided(CmdObserverDefault jself, long sender) {
    return jself.selectActionsNeedHided((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static int SwigDirector_CmdObserverDefault_addShapeActions(CmdObserverDefault jself, long sender, long actions, int n, long sp) {
    return jself.addShapeActions((sender == 0) ? null : new MgMotion(sender, false), new Ints(actions, false), n, (sp == 0) ? null : new MgShape(sp, false));
  }
  public static boolean SwigDirector_CmdObserverDefault_doAction(CmdObserverDefault jself, long sender, int action) {
    return jself.doAction((sender == 0) ? null : new MgMotion(sender, false), action);
  }
  public static boolean SwigDirector_CmdObserverDefault_doEndAction(CmdObserverDefault jself, long sender, int action) {
    return jself.doEndAction((sender == 0) ? null : new MgMotion(sender, false), action);
  }
  public static void SwigDirector_CmdObserverDefault_drawInShapeCommand(CmdObserverDefault jself, long sender, long cmd, long gs) {
    jself.drawInShapeCommand((sender == 0) ? null : new MgMotion(sender, false), (cmd == 0) ? null : new MgCommand(cmd, false), (gs == 0) ? null : new GiGraphics(gs, false));
  }
  public static void SwigDirector_CmdObserverDefault_drawInSelectCommand(CmdObserverDefault jself, long sender, long sp, int handleIndex, long gs) {
    jself.drawInSelectCommand((sender == 0) ? null : new MgMotion(sender, false), (sp == 0) ? null : new MgShape(sp, false), handleIndex, (gs == 0) ? null : new GiGraphics(gs, false));
  }
  public static void SwigDirector_CmdObserverDefault_onSelectionChanged(CmdObserverDefault jself, long sender) {
    jself.onSelectionChanged((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_CmdObserverDefault_onShapeWillAdded(CmdObserverDefault jself, long sender, long sp) {
    return jself.onShapeWillAdded((sender == 0) ? null : new MgMotion(sender, false), (sp == 0) ? null : new MgShape(sp, false));
  }
  public static void SwigDirector_CmdObserverDefault_onShapeAdded(CmdObserverDefault jself, long sender, long sp) {
    jself.onShapeAdded((sender == 0) ? null : new MgMotion(sender, false), (sp == 0) ? null : new MgShape(sp, false));
  }
  public static boolean SwigDirector_CmdObserverDefault_onShapeWillDeleted(CmdObserverDefault jself, long sender, long sp) {
    return jself.onShapeWillDeleted((sender == 0) ? null : new MgMotion(sender, false), (sp == 0) ? null : new MgShape(sp, false));
  }
  public static int SwigDirector_CmdObserverDefault_onShapeDeleted(CmdObserverDefault jself, long sender, long sp) {
    return jself.onShapeDeleted((sender == 0) ? null : new MgMotion(sender, false), (sp == 0) ? null : new MgShape(sp, false));
  }
  public static boolean SwigDirector_CmdObserverDefault_onShapeCanRotated(CmdObserverDefault jself, long sender, long sp) {
    return jself.onShapeCanRotated((sender == 0) ? null : new MgMotion(sender, false), (sp == 0) ? null : new MgShape(sp, false));
  }
  public static boolean SwigDirector_CmdObserverDefault_onShapeCanTransform(CmdObserverDefault jself, long sender, long sp) {
    return jself.onShapeCanTransform((sender == 0) ? null : new MgMotion(sender, false), (sp == 0) ? null : new MgShape(sp, false));
  }
  public static boolean SwigDirector_CmdObserverDefault_onShapeCanUnlock(CmdObserverDefault jself, long sender, long sp) {
    return jself.onShapeCanUnlock((sender == 0) ? null : new MgMotion(sender, false), (sp == 0) ? null : new MgShape(sp, false));
  }
  public static boolean SwigDirector_CmdObserverDefault_onShapeCanUngroup(CmdObserverDefault jself, long sender, long sp) {
    return jself.onShapeCanUngroup((sender == 0) ? null : new MgMotion(sender, false), (sp == 0) ? null : new MgShape(sp, false));
  }
  public static boolean SwigDirector_CmdObserverDefault_onShapeCanMovedHandle(CmdObserverDefault jself, long sender, long sp, int index) {
    return jself.onShapeCanMovedHandle((sender == 0) ? null : new MgMotion(sender, false), (sp == 0) ? null : new MgShape(sp, false), index);
  }
  public static void SwigDirector_CmdObserverDefault_onShapeMoved(CmdObserverDefault jself, long sender, long sp, int segment) {
    jself.onShapeMoved((sender == 0) ? null : new MgMotion(sender, false), (sp == 0) ? null : new MgShape(sp, false), segment);
  }
  public static boolean SwigDirector_CmdObserverDefault_onShapeWillChanged(CmdObserverDefault jself, long sender, long sp, long oldsp) {
    return jself.onShapeWillChanged((sender == 0) ? null : new MgMotion(sender, false), (sp == 0) ? null : new MgShape(sp, false), (oldsp == 0) ? null : new MgShape(oldsp, false));
  }
  public static void SwigDirector_CmdObserverDefault_onShapeChanged(CmdObserverDefault jself, long sender, long shape) {
    jself.onShapeChanged((sender == 0) ? null : new MgMotion(sender, false), (shape == 0) ? null : new MgShape(shape, false));
  }
  public static long SwigDirector_CmdObserverDefault_createShape(CmdObserverDefault jself, long sender, int type) {
    return MgBaseShape.getCPtr(jself.createShape((sender == 0) ? null : new MgMotion(sender, false), type));
  }
  public static long SwigDirector_CmdObserverDefault_createCommand(CmdObserverDefault jself, long sender, String name) {
    return MgCommand.getCPtr(jself.createCommand((sender == 0) ? null : new MgMotion(sender, false), name));
  }
  public static boolean SwigDirector_CmdObserverDefault_onPreGesture(CmdObserverDefault jself, long sender) {
    return jself.onPreGesture((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static void SwigDirector_CmdObserverDefault_onPostGesture(CmdObserverDefault jself, long sender) {
    jself.onPostGesture((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static void SwigDirector_CmdObserverDefault_onPointSnapped(CmdObserverDefault jself, long sender, long sp) {
    jself.onPointSnapped((sender == 0) ? null : new MgMotion(sender, false), (sp == 0) ? null : new MgShape(sp, false));
  }
  public static void SwigDirector_MgCommandDraw_release(MgCommandDraw jself) {
    jself.release();
  }
  public static boolean SwigDirector_MgCommandDraw_cancel(MgCommandDraw jself, long sender) {
    return jself.cancel((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCommandDraw_initialize(MgCommandDraw jself, long sender, long s) {
    return jself.initialize((sender == 0) ? null : new MgMotion(sender, false), (s == 0) ? null : new MgStorage(s, false));
  }
  public static boolean SwigDirector_MgCommandDraw_backStep(MgCommandDraw jself, long sender) {
    return jself.backStep((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCommandDraw_draw(MgCommandDraw jself, long sender, long gs) {
    return jself.draw((sender == 0) ? null : new MgMotion(sender, false), (gs == 0) ? null : new GiGraphics(gs, false));
  }
  public static boolean SwigDirector_MgCommandDraw_gatherShapes(MgCommandDraw jself, long sender, long shapes) {
    return jself.gatherShapes((sender == 0) ? null : new MgMotion(sender, false), (shapes == 0) ? null : new MgShapes(shapes, false));
  }
  public static boolean SwigDirector_MgCommandDraw_click(MgCommandDraw jself, long sender) {
    return jself.click((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCommandDraw_doubleClick(MgCommandDraw jself, long sender) {
    return jself.doubleClick((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCommandDraw_longPress(MgCommandDraw jself, long sender) {
    return jself.longPress((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCommandDraw_touchBegan(MgCommandDraw jself, long sender) {
    return jself.touchBegan((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCommandDraw_touchMoved(MgCommandDraw jself, long sender) {
    return jself.touchMoved((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCommandDraw_touchEnded(MgCommandDraw jself, long sender) {
    return jself.touchEnded((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCommandDraw_mouseHover(MgCommandDraw jself, long sender) {
    return jself.mouseHover((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCommandDraw_twoFingersMove(MgCommandDraw jself, long sender) {
    return jself.twoFingersMove((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCommandDraw_isDrawingCommand(MgCommandDraw jself) {
    return jself.isDrawingCommand();
  }
  public static boolean SwigDirector_MgCommandDraw_isFloatingCommand(MgCommandDraw jself) {
    return jself.isFloatingCommand();
  }
  public static boolean SwigDirector_MgCommandDraw_doContextAction(MgCommandDraw jself, long sender, int action) {
    return jself.doContextAction((sender == 0) ? null : new MgMotion(sender, false), action);
  }
  public static int SwigDirector_MgCommandDraw_getShapeType(MgCommandDraw jself) {
    return jself.getShapeType();
  }
  public static int SwigDirector_MgCommandDraw_getMaxStep(MgCommandDraw jself) {
    return jself.getMaxStep();
  }
  public static void SwigDirector_MgCommandDraw_setStepPoint(MgCommandDraw jself, long sender, int step, long pt) {
    jself.setStepPoint((sender == 0) ? null : new MgMotion(sender, false), step, new Point2d(pt, false));
  }
  public static boolean SwigDirector_MgCommandDraw_isStepPointAccepted(MgCommandDraw jself, long sender, long pt) {
    return jself.isStepPointAccepted((sender == 0) ? null : new MgMotion(sender, false), new Point2d(pt, false));
  }
  public static int SwigDirector_MgCommandDraw_snapOptionsForStep(MgCommandDraw jself, long sender, int step) {
    return jself.snapOptionsForStep((sender == 0) ? null : new MgMotion(sender, false), step);
  }
  public static void SwigDirector_MgCmdDrawRect_release(MgCmdDrawRect jself) {
    jself.release();
  }
  public static boolean SwigDirector_MgCmdDrawRect_cancel(MgCmdDrawRect jself, long sender) {
    return jself.cancel((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCmdDrawRect_initialize(MgCmdDrawRect jself, long sender, long s) {
    return jself.initialize((sender == 0) ? null : new MgMotion(sender, false), (s == 0) ? null : new MgStorage(s, false));
  }
  public static boolean SwigDirector_MgCmdDrawRect_backStep(MgCmdDrawRect jself, long sender) {
    return jself.backStep((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCmdDrawRect_draw(MgCmdDrawRect jself, long sender, long gs) {
    return jself.draw((sender == 0) ? null : new MgMotion(sender, false), (gs == 0) ? null : new GiGraphics(gs, false));
  }
  public static boolean SwigDirector_MgCmdDrawRect_gatherShapes(MgCmdDrawRect jself, long sender, long shapes) {
    return jself.gatherShapes((sender == 0) ? null : new MgMotion(sender, false), (shapes == 0) ? null : new MgShapes(shapes, false));
  }
  public static boolean SwigDirector_MgCmdDrawRect_click(MgCmdDrawRect jself, long sender) {
    return jself.click((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCmdDrawRect_doubleClick(MgCmdDrawRect jself, long sender) {
    return jself.doubleClick((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCmdDrawRect_longPress(MgCmdDrawRect jself, long sender) {
    return jself.longPress((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCmdDrawRect_touchBegan(MgCmdDrawRect jself, long sender) {
    return jself.touchBegan((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCmdDrawRect_touchMoved(MgCmdDrawRect jself, long sender) {
    return jself.touchMoved((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCmdDrawRect_touchEnded(MgCmdDrawRect jself, long sender) {
    return jself.touchEnded((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCmdDrawRect_mouseHover(MgCmdDrawRect jself, long sender) {
    return jself.mouseHover((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCmdDrawRect_twoFingersMove(MgCmdDrawRect jself, long sender) {
    return jself.twoFingersMove((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static boolean SwigDirector_MgCmdDrawRect_isDrawingCommand(MgCmdDrawRect jself) {
    return jself.isDrawingCommand();
  }
  public static boolean SwigDirector_MgCmdDrawRect_isFloatingCommand(MgCmdDrawRect jself) {
    return jself.isFloatingCommand();
  }
  public static boolean SwigDirector_MgCmdDrawRect_doContextAction(MgCmdDrawRect jself, long sender, int action) {
    return jself.doContextAction((sender == 0) ? null : new MgMotion(sender, false), action);
  }
  public static int SwigDirector_MgCmdDrawRect_getShapeType(MgCmdDrawRect jself) {
    return jself.getShapeType();
  }
  public static int SwigDirector_MgCmdDrawRect_getMaxStep(MgCmdDrawRect jself) {
    return jself.getMaxStep();
  }
  public static void SwigDirector_MgCmdDrawRect_setStepPoint(MgCmdDrawRect jself, long sender, int step, long pt) {
    jself.setStepPoint((sender == 0) ? null : new MgMotion(sender, false), step, new Point2d(pt, false));
  }
  public static boolean SwigDirector_MgCmdDrawRect_isStepPointAccepted(MgCmdDrawRect jself, long sender, long pt) {
    return jself.isStepPointAccepted((sender == 0) ? null : new MgMotion(sender, false), new Point2d(pt, false));
  }
  public static int SwigDirector_MgCmdDrawRect_snapOptionsForStep(MgCmdDrawRect jself, long sender, int step) {
    return jself.snapOptionsForStep((sender == 0) ? null : new MgMotion(sender, false), step);
  }
  public static void SwigDirector_MgCmdDrawRect_addRectShape(MgCmdDrawRect jself, long sender) {
    jself.addRectShape((sender == 0) ? null : new MgMotion(sender, false));
  }
  public static void SwigDirector_GiView_regenAll(GiView jself, boolean changed) {
    jself.regenAll(changed);
  }
  public static void SwigDirector_GiView_regenAppend(GiView jself, int sid, int playh) {
    jself.regenAppend(sid, playh);
  }
  public static void SwigDirector_GiView_redraw(GiView jself, boolean changed) {
    jself.redraw(changed);
  }
  public static boolean SwigDirector_GiView_useFinger(GiView jself) {
    return jself.useFinger();
  }
  public static boolean SwigDirector_GiView_isContextActionsVisible(GiView jself) {
    return jself.isContextActionsVisible();
  }
  public static boolean SwigDirector_GiView_showContextActions(GiView jself, long actions, long buttonXY, float x, float y, float w, float h) {
    return jself.showContextActions(new Ints(actions, false), new Floats(buttonXY, false), x, y, w, h);
  }
  public static void SwigDirector_GiView_hideContextActions(GiView jself) {
    jself.hideContextActions();
  }
  public static void SwigDirector_GiView_commandChanged(GiView jself) {
    jself.commandChanged();
  }
  public static void SwigDirector_GiView_selectionChanged(GiView jself) {
    jself.selectionChanged();
  }
  public static void SwigDirector_GiView_contentChanged(GiView jself) {
    jself.contentChanged();
  }
  public static void SwigDirector_GiView_dynamicChanged(GiView jself) {
    jself.dynamicChanged();
  }
  public static void SwigDirector_GiView_zoomChanged(GiView jself) {
    jself.zoomChanged();
  }
  public static void SwigDirector_GiView_viewChanged(GiView jself, long oldview) {
    jself.viewChanged((oldview == 0) ? null : new GiView(oldview, false));
  }
  public static void SwigDirector_GiView_shapeWillDelete(GiView jself, int sid) {
    jself.shapeWillDelete(sid);
  }
  public static void SwigDirector_GiView_shapeDeleted(GiView jself, int sid) {
    jself.shapeDeleted(sid);
  }
  public static boolean SwigDirector_GiView_shapeDblClick(GiView jself, int type, int sid, int tag) {
    return jself.shapeDblClick(type, sid, tag);
  }
  public static boolean SwigDirector_GiView_shapeClicked(GiView jself, int type, int sid, int tag, float x, float y) {
    return jself.shapeClicked(type, sid, tag, x, y);
  }
  public static void SwigDirector_GiView_showMessage(GiView jself, String text) {
    jself.showMessage(text);
  }
  public static void SwigDirector_GiView_getLocalizedString(GiView jself, String name, long c) {
    jself.getLocalizedString(name, (c == 0) ? null : new MgStringCallback(c, false));
  }
  public static void SwigDirector_MgStringCallback_onGetString(MgStringCallback jself, String text) {
    jself.onGetString(text);
  }
  public static void SwigDirector_MgFindImageCallback_onFindImage(MgFindImageCallback jself, int sid, String name) {
    jself.onFindImage(sid, name);
  }
  public static void SwigDirector_MgOptionCallback_onGetOptionBool(MgOptionCallback jself, String name, boolean value) {
    jself.onGetOptionBool(name, value);
  }
  public static void SwigDirector_MgOptionCallback_onGetOptionInt(MgOptionCallback jself, String name, int value) {
    jself.onGetOptionInt(name, value);
  }
  public static void SwigDirector_MgOptionCallback_onGetOptionFloat(MgOptionCallback jself, String name, float value) {
    jself.onGetOptionFloat(name, value);
  }
  public static void SwigDirector_MgOptionCallback_onGetOptionString(MgOptionCallback jself, String name, String text) {
    jself.onGetOptionString(name, text);
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
