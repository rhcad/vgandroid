/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package rhcad.touchvg.core;

public class MgCmdArc3P extends MgCommandDraw {
  private transient long swigCPtr;

  protected MgCmdArc3P(long cPtr, boolean cMemoryOwn) {
    super(touchvgJNI.MgCmdArc3P_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(MgCmdArc3P obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        touchvgJNI.delete_MgCmdArc3P(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public MgCmdArc3P(String name) {
    this(touchvgJNI.new_MgCmdArc3P__SWIG_0(name), true);
  }

  public MgCmdArc3P() {
    this(touchvgJNI.new_MgCmdArc3P__SWIG_1(), true);
  }

  public void release() {
    touchvgJNI.MgCmdArc3P_release(swigCPtr, this);
  }

  public boolean touchBegan(MgMotion sender) {
    return touchvgJNI.MgCmdArc3P_touchBegan(swigCPtr, this, MgMotion.getCPtr(sender), sender);
  }

  public boolean touchMoved(MgMotion sender) {
    return touchvgJNI.MgCmdArc3P_touchMoved(swigCPtr, this, MgMotion.getCPtr(sender), sender);
  }

  public boolean touchEnded(MgMotion sender) {
    return touchvgJNI.MgCmdArc3P_touchEnded(swigCPtr, this, MgMotion.getCPtr(sender), sender);
  }

  public boolean initialize(MgMotion sender, MgStorage s) {
    return touchvgJNI.MgCmdArc3P_initialize(swigCPtr, this, MgMotion.getCPtr(sender), sender, MgStorage.getCPtr(s), s);
  }

  public boolean draw(MgMotion sender, GiGraphics gs) {
    return touchvgJNI.MgCmdArc3P_draw(swigCPtr, this, MgMotion.getCPtr(sender), sender, GiGraphics.getCPtr(gs), gs);
  }

}
